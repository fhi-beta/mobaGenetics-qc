##
#
# This module extracts a set of good quality markers. The evaluation of the markers is conducted on unrelated individuals, considering founders and offspring separately.
#
##


def dev_log(
        inTrunk,
        step,
        batch,
        population,
        plinklocal
):
    """
    Developpers' log for module 4.
    """

    # Samples
    fam_file = str(inTrunk) + ".fam"
    fam_data = pd.read_csv(
        fam_file,
        delimiter = ' ',
        header = None
    )
    ids = np.unique(fam_data[[1, 2, 3]].to_numpy().flatten())
    n_samples = len(ids)

    # Variants
    out_dir = Path(inTrunk).parent
    outFreq = out_dir / "log_in"
    freq_data = mqc.get_freq_data(
        inTrunk = inTrunk,
        outTrunk = outFreq,
        plinklocal = plinklocal
    )
    min_maf = freq_data['MAF'].min()
    max_maf = freq_data['MAF'].max()
    n_markers = len(freq_data)
    chromosomes = freq_data['CHR'].unique()
    chromosomes_string = ','.join(map(str, chromosomes.flatten()))

    print("*** Debug ***")
    print("inTrunk")
    print("Chromosomes: ", chromosomes_string)
    print("min maf: ", min_maf)
    print("*************")

    with open(inTrunk + ".devLog", "w") as dev_log:
        dev_log.write("batch\tpopulation\tstep\tchromosomes\tmin_maf\tmax_maf\tn_markers\tn_samples\n")
        dev_log.write(f"{batch}\t{population}\t{step}\t{chromosomes_string}\t{min_maf}\t{max_maf}\t{n_markers}\t{n_samples}\n")

    return


rule_stem = "mod4_keep_main_cluster"  # Extract samples from main cluster in PCA to get best quality markers
rule mod4_keep_main_cluster:
    input:
        ceu_id_file = tmpMod3/"{batch}"/"ceu_core_ids",
        bedset = rules.m2_output.output.bedset,
    output:
        bedset = multiext(str(tmpMod4 / "{batch}" / rule_stem), '.bed', '.bim', '.fam'),
        results = report(
            resultPath / "{batch}" / (rule_stem + ".yaml"),
            category = "Module 4 Good markers",
            caption = resultPath / "{batch}" / (rule_stem + ".rst")
        )
    benchmark:
        tmpMod4 / "{batch}" / (rule_stem + ".benchmark")
    run:
        try:

            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog, rule_info[rule]["QC test"])
            mqc.log(runlog, "PCA exlude {item_type} ({params.threshold})\n")

            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])

            dev_log(
                inTrunk = inTrunk,
                step = "start",
                batch = wildcards.batch,
                population = "all",
                plinklocal = plinklocal
            )

            print(f"using {inTrunk} to make {outTrunk} using {input.ceu_id_file}")
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--keep", input.ceu_id_file,
                    "--out", outTrunk,
                    "--make-bed"
                ],
                check = True
            )

            dev_log(
                inTrunk = outTrunk,
                step = "mod4_keep_main_cluster",
                batch = wildcards.batch,
                population = "all",
                plinklocal = plinklocal
            )

            dropouts = mqc.checkUpdates(
                inTrunk + ".fam",
                outTrunk + ".fam",
                cols = [0, 1],
                sanityCheck = "removal",
                fullList = True
            )

            dropouts.update(rule_info[rule])  # Metainfo and documentation about the rule
            dropouts["Rule"] = rule
            mqc.saveYamlResults(output.results,dropouts)

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

# Split parents and children into founders and offspring. Note that the output of this rule is also used in module 5 via the input of 'ibd_estimate'.
rule_stem = "split_founders_offspring"
split_rule_stem = rule_stem  # Placeholder for other rules using the output of the split
rule split_founders_offspring:
    input:
        bedset = rules.mod4_keep_main_cluster.output.bedset
    output:
        bedset_founders = multiext(str(tmpMod4 / "{batch}" / "founders" / rule_stem), '.bed', '.bim', '.fam'),
        bedset_offspring = multiext(str(tmpMod4 / "{batch}" / "offspring" / rule_stem), '.bed', '.bim', '.fam'),
        results_founders = report(
            resultPath / "{batch}" / (rule_stem + "_founders.yaml"),
            category = "Module 4 Good markers",
            caption = resultPath / "{batch}" / (rule_stem + "_founders.rst")
        ),
        results_offspring = report(
            resultPath / "{batch}" / (rule_stem + "_offspring.yaml"),
            category = "Module 4 Good markers",
            caption = resultPath / "{batch}" / (rule_stem + "_offspring.rst")
        )
    benchmark:
        tmpMod4 / "{batch}" / (rule_stem + ".benchmark")
    run:
        try:
            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog,rule_info[rule]["QC test"])
            inTrunk = mqc.plinkBase(input.bedset[0])
            foundersTrunk = mqc.plinkBase(output.bedset_founders[0])
            offspringTrunk = mqc.plinkBase(output.bedset_offspring[0])

            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--filter-founders",
                    "--out", foundersTrunk,
                    "--make-bed"
                ],
                check = True
            )

            dev_log(
                inTrunk = foundersTrunk,
                step = "filter-founders",
                batch = wildcards.batch,
                population = "founders",
                plinklocal = plinklocal
            )

            dropouts = mqc.checkUpdates(
                inTrunk + ".fam",
                foundersTrunk + ".fam",
                cols = [1],
                sanityCheck = "removal",
                fullList = True
            )
            dropouts.update(rule_info[rule])  # Metainfo and documentation about the rule
            dropouts["Rule"] = rule
            mqc.saveYamlResults(output.results_founders, dropouts)

            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--filter-nonfounders",
                    "--make-founders",
                    "--out", offspringTrunk,
                    "--make-bed"
                ],
                check = True
            )

            dev_log(
                inTrunk = offspringTrunk,
                step = "filter-founders",
                batch = wildcards.batch,
                population = "offspring",
                plinklocal = plinklocal
            )

            dropouts = mqc.checkUpdates(
                inTrunk + ".fam",
                offspringTrunk + ".fam",
                cols = [1],
                sanityCheck = "removal",
                fullList = True
            )
            dropouts.update(rule_info[rule])  # Metainfo and documentation about the rule
            dropouts["Rule"] = rule
            mqc.saveYamlResults(output.results_offspring,dropouts)

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

rule_stem = "ibd_estimate"
rule ibd_estimate:
    threads: 8
    input:
        bed = tmpMod4 / "{batch}" / "{role}" / (split_rule_stem + ".bed"),
        clean_snps = rules.m2_output.output.pruned_snps
    output:
        bed_clean_snps = tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".bed"),
        fam_clean_snps = tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".fam"),
        king_relatedness = tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".kin0")
    benchmark:
        tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".benchmark")
    run:
        try:
            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog, rule_info[rule]["QC test"])
            inTrunk = mqc.plinkBase(input.bed)
            outTrunk = mqc.plinkBase(output.bed_clean_snps)
            kingTrunk = mqc.plinkBase(output.king_relatedness)

            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--extract", input.clean_snps,
                    "--make-bed",
                    "--out", outTrunk
                ],
                check = True
            )

            subprocess.run(
                [
                    kinglocal,
                    "-b", output.bed_clean_snps,
                    "--kinship",
                    "--cpus", str(threads),
                    "--prefix", kingTrunk
                ],
                check = True
            )

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)


rule_stem = 'ibd_accum'
rule ibd_accum:
    input:
        fam = rules.ibd_estimate.output.fam_clean_snps,
        king_relatedness = rules.ibd_estimate.output.king_relatedness
    params:
        title = "\"Kinship filtering in {role} in {batch}\"",
        kinship_threshold = str(config["kinship_threshold"]),
        accum_kinship_threshold = str(config["accum_kinship_threshold"])
    output:
        id_exclusion_file = tmpMod4 / "{batch}" / "{role}" / (rule_stem + "_pedigree_sample_exclusion"),
        md_file = github_docs / "{batch}" / rule_stem / "{role}" / (rule_stem + ".md"),
    conda:
        "envs/r_4.2.yaml"
    threads: 1
    shell:
        """
        Rscript utils/pedigree/relatedness_filtering.R \
            {input.king_relatedness} \
            {input.fam} \
            {params.kinship_threshold} \
            {params.accum_kinship_threshold} \
            {output.id_exclusion_file} \
            {output.md_file} \
            {params.title}
        """

rule_stem = "ibd_exclusion"
rule ibd_exclusion:
    threads: 2
    input:
        bed = rules.ibd_estimate.output.bed_clean_snps,
        id_exclusion_file = rules.ibd_accum.output.id_exclusion_file
    output:
        bed = tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".bed"),
        results = report(
            resultPath / "{batch}" / "{role}" / (rule_stem + ".yaml"),
            category = "Module 4 Good markers",
            caption = resultPath / "{batch}" / (rule_stem + ".rst")
        ),
    benchmark:
        tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".benchmark")
    run:
        try:

            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog, rule_info[rule]["QC test"])
            inTrunk = mqc.plinkBase(input.bed)
            outTrunk = mqc.plinkBase(output.bed)

            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--remove", input.id_exclusion_file,
                    "--make-bed",
                    "--out", outTrunk
                ],
                check = True
            )

            dev_log(
                inTrunk = outTrunk,
                step = "ibd_exclusion",
                batch = wildcards.batch,
                population = wildcards.role,
                plinklocal = plinklocal
            )

            dropouts = mqc.checkUpdates(
                inTrunk + ".fam",
                outTrunk + ".fam",
                cols = [1],
                sanityCheck = "removal",
                fullList = True
            )

            dropouts.update(rule_info[rule])
            dropouts["Rule"] = rule
            mqc.saveYamlResults(output.results,dropouts)
            mqc.make_rule_caption(rule_info, rule, resultPath)

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

rule_stem = 'geno_rates'
# Note 24.04.24: The documentation and log are written at every step of this rule, i.e. two filtering steps executed three times iteratively. The captioning system of the previous implementation needs to be checked.
rule geno_rates:
    threads: 2
    input:
        bed = rules.ibd_exclusion.output.bed
    params:
        docs_folder = os.path.join(resultPath, "{batch}",  "{role}")
    output:
        bed = tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".bed")
    benchmark:
        tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".benchmark")
    run:
        try:
            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog,rule_info[rule]["QC test"])

            inTrunk = mqc.plinkBase(input.bed)
            out_dir = Path(output.bed).parent
            lastTrunk = inTrunk
            ruleTrunk = "geno_rates"

            for i in [1, 2, 3]:

                mqc.log(runlog,f'{rule_info[rule]["QC test"]}: Iteration {i}')
                print(f'{rule_info[rule]["QC test"]}: Iteration {i}')

                file_name = ruleTrunk + "_geno" + str(i)
                outTrunk = out_dir / file_name
                res_file = Path(params.docs_folder) / (file_name + ".yaml")
                plot_file = Path(params.docs_folder) / (file_name + ".png")

                mqc.missing_genotype_rate(
                    rule,
                    lastTrunk,
                    outTrunk,
                    sample = False,
                    threshold = config[f"geno_rate.geno{i}"],
                    result_file = res_file,
                    plot_file = plot_file,
                    plinklocal = plinklocal,
                    rule_info = rule_info
                )

                dev_log(
                    inTrunk = outTrunk,
                    step = f"geno_rates_geno{i}",
                    batch = wildcards.batch,
                    population = wildcards.role,
                    plinklocal = plinklocal
                )
                
                lastTrunk = outTrunk
                file_name = ruleTrunk + "_mind" + str(i)
                outTrunk = out_dir / file_name
                res_file = Path(params.docs_folder) / (file_name + ".yaml")
                plot_file = Path(params.docs_folder) / (file_name + ".png")

                mqc.missing_genotype_rate(
                    rule,
                    lastTrunk,
                    outTrunk,
                    sample = True,
                    threshold = config[f"geno_rate.mind{i}"],
                    result_file = res_file,
                    plot_file = plot_file,
                    plinklocal = plinklocal,
                    rule_info = rule_info
                )

                dev_log(
                    inTrunk = outTrunk,
                    step = f"geno_rates_mind{i}",
                    batch = wildcards.batch,
                    population = wildcards.role,
                    plinklocal = plinklocal
                )

                lastTrunk = outTrunk

            # Make a clean bedset
            outTrunk = mqc.plinkBase(output.bed)

            mqc.copy_bedset(str(lastTrunk), str(outTrunk))

            # and set a common caption
            mqc.make_rule_caption(rule_info, rule, Path(params.docs_folder))

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)


rule_stem = 'hwe_autos_geno'
# Note 27.04.24: The documentation and log are written at every step of this rule. The captioning system of the previous implementation needs to be fixed.
rule hwe_autos_geno:
    threads: 1
    input:
        bed = rules.geno_rates.output.bed
    params:
        #2 cycles hwe/maf + a geno
        hwe1 = config["hwe1"],
        maf1 = config["maf1"],
        sd_het1 = config["sd_het1"],
        hwe2 = config["hwe2"],
        maf2 = config["maf2"],
        sd_het2 = config["sd_het2"],
        geno_rate = config["geno_rate"],
        docs_folder = os.path.join(resultPath, "{batch}",  "{role}")
    output:
        bed = tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".bed"),
        results = report(
            resultPath / "{batch}" / "{role}" / (rule_stem + ".yaml"),
            category = "Module 4 Good markers",
            caption = resultPath / "{batch}" / (rule_stem + ".rst")
        ),
        plot = report(
            resultPath / "{batch}" / "{role}" / (rule_stem + ".png"),
            category = "Module 4 Good markers",
            caption = resultPath / "{batch}" / (rule_stem + ".rst")
        )
    benchmark:
        tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".benchmark")
    run:
        try:
            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog,rule_info[rule]["QC test"])

            inTrunk = mqc.plinkBase(input.bed)
            out_dir = Path(output.bed).parent
            lastTrunk = inTrunk

            for i in [1, 2]:

                # Get mafs
                file_name = rule + "_freq" + str(i)
                outTrunk = out_dir / file_name

                freq_data = get_freq_data(
                    inTrunk = lastTrunk,
                    outTrunk = outTrunk,
                    plinklocal = plinklocal
                )

                min_maf = freq_data['MAF'].min()
                maf_threshold = getattr(params, f"maf{i}")

                print("min maf: ", min_maf)

                if min_maf > maf_threshold:
                    markers_categories = ["common"]
                    print("No variant with maf < ", maf_threshold, " found at iteration ", i, ", skipping HWE/HET for rare variants.")

                else:
                    markers_categories = ["common", "rare"]

                for markers_category in markers_categories:

                    file_name = rule + "_hwe" + str(i)
                    outTrunk = out_dir / file_name
                    res_file = Path(params.docs_folder) / (file_name + ".yaml")
                    plot_file = Path(params.docs_folder) / (file_name + ".png")

                    # Filters and plot
                    mqc.filter_hwe(
                        rule,
                        str(lastTrunk),
                        str(outTrunk),
                        threshold = getattr(params, f"hwe{i}"),
                        hwe_switches = ["--autosome", "--hardy", "midp"],
                        result_file = str(res_file),
                        plot_file = str(plot_file),
                        plinklocal = plinklocal,
                        rule_info = rule_info
                    )

                    dev_log(
                        inTrunk = outTrunk,
                        step = f"hwe_autos_geno_{markers_category}_markers_hwe{i}",
                        batch = wildcards.batch,
                        population = wildcards.role,
                        plinklocal = plinklocal
                    )

                    lastTrunk = outTrunk
                    file_name = rule + "_het" + str(i)
                    outTrunk = out_dir / file_name
                    res_file = Path(params.docs_folder) / (file_name + ".yaml")
                    plot_file = Path(params.docs_folder) / (file_name + ".png")

                    mqc.filter_excess_het(
                        rule,
                        markers_category,
                        str(lastTrunk),
                        str(outTrunk),
                        threshold = maf_threshold,
                        sd = getattr(params, f"sd_het{i}"),
                        result_file = res_file,
                        plot_file = plot_file,
                        plinklocal = plinklocal,
                        rule_info = rule_info
                    )

                    dev_log(
                        inTrunk = outTrunk,
                        step = f"hwe_autos_geno_{markers_category}_markers_het{i}",
                        batch = wildcards.batch,
                        population = wildcards.role,
                        plinklocal = plinklocal
                    )

                    lastTrunk = outTrunk

            # a last round of marker removal
            outTrunk = mqc.plinkBase(output.bed)
            mqc.missing_genotype_rate(
                rule,
                str(lastTrunk),
                str(outTrunk),
                sample = False,
                threshold = params.geno_rate,
                result_file = output.results,
                plot_file = output.plot,
                plinklocal = plinklocal,
                rule_info = rule_info
            )

            dev_log(
                inTrunk = outTrunk,
                step = f"hwe_autos_geno",
                batch = wildcards.batch,
                population = wildcards.role,
                plinklocal = plinklocal
            )

            # and set a common caption
            mqc.make_rule_caption(rule_info, rule, Path(params.docs_folder))

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

rule_stem = 'sex_check'
rule sex_check:
    threads: 2
    input:
        bed = rules.hwe_autos_geno.output.bed,
    output:
        bed = tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".bed"),
        results = report(
            resultPath / "{batch}" / "{role}" / (rule_stem + ".yaml"),
            category = "Module 4 Good markers",
            caption = resultPath / "{batch}" / (rule_stem + ".rst")
        ),
        # File containing the F-statistics for the sex chromosomes
        f_x = tmpMod4 / "{batch}" / "{role}" / "sexcheck_report_x.sexcheck",
        f_y = tmpMod4 / "{batch}" / "{role}" / "sexcheck_report_y.sexcheck",
        # in addition to the removal list, a removal.samples.txt is produced, sporting only the sample-list
        plot = report(
            resultPath / "{batch}" / "{role}" / (rule_stem + ".png"),
            category = "Module 4 Good markers",
            caption = resultPath / "{batch}" / (rule_stem + ".rst")
        ),
        # These two files are referred to later
        bim = tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".bim"),
        hh = tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".hh")
    params:
        female_threshold = config['sex_check_female'],
        male_threshold = config['sex_check_male']
    benchmark:
        tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".benchmark")
    run:
        try:
            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog, rule_info[rule]["QC test"])

            inTrunk = mqc.plinkBase(input.bed)
            outTrunk = mqc.plinkBase(output.bed)

            mqc.sex_check(
                rule,
                input.bed,
                output.bed,
                f_threshold = 0.2,
                m_threshold = 0.8,
                config_sex_check_indep_pairwise = config["sex_check_indep_pairwise"],
                result_file = output.results,
                plot_file = output.plot,
                plinklocal = plinklocal,
                rule_info = rule_info
            )

            mqc.make_rule_caption(rule_info, rule, resultPath)

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)


rule_stem = 'female_xmarkers'
rule female_xmarkers:
    threads: 2
    input:
        bed = rules.sex_check.output.bed,
    output:
        bed = tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".bed"),
        results = report(
            resultPath / "{batch}" / "{role}" / (rule_stem + ".yaml"),
            category = "Module 4 Good markers",
            caption = resultPath / "{batch}" / (rule_stem + ".rst")
        ),
        exclude_markers = report(
            tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".exclude"),
            category = "Module 4 Good markers",
            caption = resultPath / "{batch}" / (rule_stem + ".rst")
        ),
        plot = report(
            resultPath / "{batch}" / "{role}" / (rule_stem + ".png"),
            category = "Module 4 Good markers",
            caption = resultPath / "{batch}" / (rule_stem + ".rst")
        ),
    params:
        threshold = config['xmarkers_clean'],
    benchmark:
        tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".benchmark")
    run:
        try:
            # note 1: all samples are now marked as FOUNDERS (no need for "--nonfounders" flag)
            # note 2: all samples have missing phenotype (no need for "include-nonctrl" flag)

            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog,rule_info[rule]["QC test"])

            inTrunk = mqc.plinkBase(input.bed)
            outTrunk = mqc.plinkBase(output.bed)

            mqc.filter_hwe(
                rule,
                inTrunk,
                outTrunk,
                threshold = params.threshold,
                hwe_switches = ["--filter-females", "--chr", "23", "--hardy", "midp"],
                result_file = output.results,
                plot_file = output.plot
            )
            mqc.make_rule_caption(rule_info, rule, resultPath)

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

rule_stem = 'par_regions'
rule par_regions:
    threads: 2
    input:
        bed = rules.female_xmarkers.output.bed,
    output:
        bed = tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".bed"),
        results = report(
            resultPath / "{batch}" / "{role}" / (rule_stem + ".yaml"),
            category = "Module 4 Good markers",
            caption = resultPath / "{batch}" / (rule_stem + ".rst")
        ),
        exclude_markers = report(
            tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".exclude"),
            category = "Module 4 Good markers",
            caption = resultPath / "{batch}" / (rule_stem + ".rst")
        ),
        plot = report(
            resultPath / "{batch}" / "{role}" / (rule_stem + ".png"),
            category = "Module 4 Good markers",
            caption = resultPath / "{batch}" / (rule_stem + ".rst")
        ),
    params:
        threshold = config['xmarkers_clean'],
    benchmark:
        tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".benchmark")
    run:
        try:
            # note 1: all samples are now marked as FOUNDERS (no need for "--nonfounders" flag)
            # note 2: all samples have missing phenotype (no need for "include-nonctrl" flag)

            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog,rule_info[rule]["QC test"])

            inTrunk = mqc.plinkBase(input.bed)
            outTrunk = mqc.plinkBase(output.bed)

            mqc.filter_hwe(
                rule,
                inTrunk,
                outTrunk,
                threshold = params.threshold,
                hwe_switches = ["--chr", "25", "--hardy", "midp"],
                result_file = output.results,
                plot_file = output.plot
            )
            mqc.make_rule_caption(rule_info, rule, resultPath)

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

rule_stem = 'clean_male_x'
rule clean_male_x:
    threads: 2
    input:
        bed = rules.par_regions.output.bed,
        # heterozygous haploid and nonmale Y chromosome call list from sexcheck
        hh = rules.sex_check.output.hh,
        bim = rules.sex_check.output.bim,
    output:
        exclude_markers = report(
            tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".exclude"),
            category = "Module 4 Good markers",
            caption = resultPath / "{batch}" / (rule_stem + ".rst")
        ),
        chr23 = tmpMod4 / "{batch}" / "{role}" / "sex_check.bim23"

    benchmark:
        tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".benchmark")
    run:
        try:
            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog,rule_info[rule]["QC test"])

            inTrunk = mqc.plinkBase(input.bed)
            # outTrunk =  mqc.plinkBase(output.bedset)
            mqc.egrep('^23',input.bim,output.chr23)  # a file with only chr23 rsid in second column
            # the .hh file as multiples, so we pass it as param 1
            mqc.intersect_rsid(
                input.hh,
                output.chr23,
                output.exclude_markers,
                small_col = 2,
                big_col = 1
            )
            mqc.make_rule_caption(rule_info, rule, resultPath)

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

# Note that this rule_stem is hardcoded in m3_output_good_markers
rule_stem = 'sex_clean'
rule sex_clean:
    threads: 2
    input:
        bed = rules.hwe_autos_geno.output.bed,
        excl_failed_hwe_female_x = rules.female_xmarkers.output.exclude_markers,
        excl_failed_hwe_par_regions = rules.par_regions.output.exclude_markers,
        excl_male_x_markers = rules.clean_male_x.output.exclude_markers,
        # File containing the F-statistics for the sex chromosomes
        f_x = tmpMod4 / "{batch}" / "{role}" / "sexcheck_report_x.sexcheck",
        f_y = tmpMod4 / "{batch}" / "{role}" / "sexcheck_report_y.sexcheck"
    output:
        bed = tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".bed"),
        bim = tmpMod4 / "{batch}" / '{role}' / (rule_stem + '.bim'),
        exclude_markers = report(
            tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".exclude"),
            category = "Module 4 Good markers",
            caption = resultPath / "{batch}" / (rule_stem + ".rst")
        ),
        results = report(
            resultPath / "{batch}" / "{role}" / (rule_stem + ".yaml"),
            category = "Module 4 Good markers",
            caption = resultPath / "{batch}" / (rule_stem + ".rst")
        )
    benchmark:
        tmpMod4 / "{batch}" / "{role}" / (rule_stem + ".benchmark")
    run:
        try:
            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog,rule_info[rule]["QC test"])

            inTrunk = mqc.plinkBase(input.bed)
            outTrunk = mqc.plinkBase(output.bed)

            # Make a list of all earlier fails
            subprocess.call(
                f'cat {input.excl_failed_hwe_female_x}'
                f' {input.excl_failed_hwe_par_regions}'
                f' {input.excl_male_x_markers} > {output.exclude_markers}',
                shell = True
            )

            # and remove them
            subprocess.run(
                [
                    plinklocal,
                    "--bfile",
                    inTrunk,
                    "--exclude",
                    "--out",
                    "--make-bed"
                ],
                check = True
            )

            dropouts = mqc.checkUpdates(
                inTrunk + ".bim",
                outTrunk + ".bim",
                cols = [0, 1, 3, 4, 5],
                sanityCheck = "removal",
                fullList = True,
                allele_flip = True
            )
            dropouts.update(rule_info[rule])  # Metainfo and documentation about the rule
            dropouts["Rule"] = rule
            mqc.saveYamlResults(output.results, dropouts)
            mqc.make_rule_caption(rule_info, rule, resultPath)

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)


rule_stem = 'm4_output_good_markers'
rule m4_output_good_markers:
    # Note that this rule creates and reports a non-split bedset.
    threads: 2
    input:
        bedset = rules.m2_output.output.bedset,
        markers = expand(os.path.join(tmpMod4,"{batch}", '{role}', 'sex_clean.bim'), role = roles, batch = batches)  # Final markerlists
    output:
        good_markers = tmpMod4 / "{batch}" / (rule_stem + ".txt"),
        m4_output_good_markers = multiext(os.path.join(tmpMod4, "{batch}", rule_stem), '.bed', '.bim', '.fam'),
        results = report(
            resultPath / "{batch}" / (rule_stem + ".yaml"),
            category = "- Module 4 Good markers recap",
            caption = resultPath / "{batch}" / (rule_stem + ".rst")
        )
    run:
        try:
            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog,rule_info[rule]["QC test"])
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.m4_output_good_markers[0])
            # Module 5: find common markers and extract them from original set
            mqc.intersect_rsid(
                input.markers[1],
                input.markers[0],
                output.good_markers,
                small_col = 1,
                big_col = 1
            )
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--extract", output.good_markers,
                    "--out", outTrunk,
                    "--make-bed"
                ],
                check = True
            )

            dropouts = mqc.checkUpdates(
                inTrunk + ".bim",
                outTrunk + ".bim",
                cols = [0, 1, 3, 4, 5],
                sanityCheck = "removal",
                fullList = True,
                allele_flip = True
            )
            dropouts.update(rule_info[rule])  # Metainfo and documentation about the rule
            dropouts["Rule"] = rule
            # Let the yaml-file contain info abut last step as well.
            founders = mqc.line_count(input.markers[0])
            offspring = mqc.line_count(input.markers[1])
            common = mqc.line_count(output.good_markers)
            dropouts["Final markers"] = f"founders/offspring/common {founders}/{offspring}/{common}\n"
            mqc.saveYamlResults(output.results,dropouts)

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)
