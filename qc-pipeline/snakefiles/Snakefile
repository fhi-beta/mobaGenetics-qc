# Config files containing hard coded variables
sys.path.append('../lib')  # in order to find our local packages
import mobaQcTools as mqc  # local moba package
from shutil import copyfile

# configfile: "configR3.yaml" # for running rotterdam3 tests
configfile: "config.yaml" 

#ensure bash as shell
shell.executable("/bin/bash")

# Runtime variables
include: "variables.py"
# A file with rule properties and ordering
with open("rules.yaml", 'r') as stream:
    rule_info = yaml.safe_load(stream)

# Report (top level)
report: "report/qc.rst"

# rule all
rule all:
    input:
        # Module 3 results
        (tmpMod3/"m3_output_good_markers").with_suffix(".txt") , 
        # Module 4 results
        expand(str(resultPath/"{role}/m4_output_lmm_samples.yaml"), role=ROLES),
        expand(str(resultPath/"{role}/m4_output_unrelated_samples.yaml"), role=ROLES),
        # Module 5 results
        expand(str(tmpMod5)+"/mendelian_errors"+'{ext}', ext=['.bed','.bim','.fam'], chromo=chrom),
        expand(str(tmpMod5)+"/mendelian_errors-updated-chr{chromo}"+'{ext}', ext=['.bed','.bim','.fam'], chromo=chrom),
        resultPath/"rayner_report.rst",
        # Forcing documentation of fu_detector of certain elements 
        (resultPath/"pedigree_fu_detector_solver").with_suffix(".yaml"),
        # For now: this is needed to force the plots into the report. Fix later
        # Uncomment when creating in the report with plots
        expand(str(resultPath) + "/{role}/core_pca.png", role=ROLES),
        expand(str(resultPath/"{role}/ibd_estimate.png"), role=ROLES),
        expand(str(resultPath/"{role}/ibd_accum_exclusion.png"), role=ROLES),
        expand(str(resultPath/"{role}/core_pca.png"), role=ROLES),        

        # remove this when m4 is done
	# final output:
        #expand(config['output_base'] + 'mod5-shaping-preparation/tmp/hrc-update-complete-{chr}' + '{ext}', ext=['.bed','.bim','.fam'], chr=chrom),
	# expand(config['output_base'] + '{role}/pca/final_pca_covars.txt', role=ROLES),
	# config['output_base'] + 'sample_flag_list.txt'


# Include modules
include: "mod1-data-conversion.snake"
include: "mod2-sample-pedigree.snake"
include: "mod3-good-markers.snake"
include: "mod4-samples-unrelated.snake"
include: "mod5-phasing-prep.snake"

# for small tests. 
rule test:
    output: touch("foo")
    log: "test.log"
    run:
        print(config["plinklocal"])
        #mqc.test_me()
        print(config["plinklocal"])

# This can be ued to check/log stuff (like available memory). Is run once. 
# onstart:
#     print("NOT Starting the baby")
#     print(rules.test.log)


