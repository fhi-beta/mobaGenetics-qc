##
#
# This snakefile executes the QC pipeline. The different parts of the pipeline are organized in modules represented in different snake files.
# The pipeline is expected to run in the conda environment named 'snpQc' built using `aux/environment/snpQc-env.txt`.
#
# Commands to execute from the qc-pipeline folder:
# conda activate snpQc
# snakemake --snakefile Snakefile --cores 32 --use-conda
#
##


# External libraries
sys.path.append('../lib')  # in order to find our local packages
import mobaQcTools as mqc  # local moba utils package
from shutil import copyfile

# configfile: "configR3.yaml" # for running rotterdam3 tests
configfile: "config.yaml" 

# Ensure bash as shell
shell.executable("/bin/bash")

# Pipeline variables and setup
include: "variables.py"
include: "batch_details.py"
include: "setup.py"

# A file with rule properties and ordering
with open("rules.yaml", 'r') as stream:
    rule_info = yaml.safe_load(stream)

# Report (top level)
report: "report/qc.rst"

# rule all, lists the output of every module
rule all:
    input:
        # Module 1:
        mod1_start_het = expand(tmpMod1/"{batch}"/'mod1_start_het.het', batch = batches),
        mod1_start_hwe = expand(tmpMod1/"{batch}"/'mod1_start_hwe.hwe', batch = batches),
        mod1_start_freq = expand(tmpMod1/"{batch}"/'mod1_start_freq.frq', batch = batches),
        mod1_start_lmiss = expand(tmpMod1/"{batch}"/'mod1_start_missing.lmiss', batch = batches),
        mod1_start_imiss = expand(tmpMod1/"{batch}"/'mod1_start_missing.imiss', batch = batches),
        mod1_end_bed_file = expand(tmpMod1 / "{batch}" / "m1_output.bed", batch = batches),
        mod1_end_bim_file = expand(tmpMod1 / "{batch}" / "m1_output.bim", batch = batches),
        mod1_end_fam_file = expand(tmpMod1 / "{batch}" / "m1_output.fam", batch = batches),

        # Module 2:
        mod2_start_het= expand(tmpMod2 / "{batch}" / 'mod2_start_het.het', batch = batches),
        mod2_start_hwe= expand(tmpMod2 / "{batch}" / 'mod2_start_hwe.hwe', batch = batches),
        mod2_start_freq= expand(tmpMod2 / "{batch}" / 'mod2_start_freq.frq', batch = batches),
        mod2_start_lmiss= expand(tmpMod2 / "{batch}" / 'mod2_start_missing.lmiss', batch = batches),
        mod2_start_imiss= expand(tmpMod2 / "{batch}" / 'mod2_start_missing.imiss', batch = batches),
        mod2_end_bed_file = expand(tmpMod2 / "{batch}" / "m2_output.bed", batch = batches),
        mod2_end_bim_file = expand(tmpMod2 / "{batch}" / "m2_output.bim", batch = batches),
        mod2_end_fam_file = expand(tmpMod2 / "{batch}" / "m2_output.fam", batch = batches),
        mod2_end_pruned_bed_file = expand(tmpMod2 / "{batch}" / "m2_output_pruned.bed", batch = batches),
        mod2_end_pruned_bim_file = expand(tmpMod2 / "{batch}" / "m2_output_pruned.bim", batch = batches),
        mod2_end_pruned_fam_file = expand(tmpMod2 / "{batch}" / "m2_output_pruned.fam", batch = batches),
        pruned_snps = expand(tmpMod2/"{batch}"/"m2_output.prune.in", batch = batches),
        sex_check = expand(tmpMod2/"{batch}"/"m2_output.sexcheck", batch = batches),
        king_relatedness = expand(tmpMod2/"{batch}"/"m2_output.kin0", batch = batches),

        # module_3_good_markers = expand((tmpMod3/"{batch}/m3_output_good_markers").with_suffix(".txt"), batch=batches),
        # sex_check = expand(str(tmpMod3/"{batch}/{role}/sexcheck_report_x.sexcheck"), role=ROLES, batch=batches),
        
        # samples_lmm = expand(str(resultPath/"{batch}/{role}/m4_output_lmm_samples.yaml"), role=ROLES, batch=batches),
        # unrelated_samples = expand(str(resultPath/"{batch}/{role}/m4_output_unrelated_samples.yaml"), role=ROLES, batch=batches),
        
        # mendelian_errors = expand(str(tmpMod5)+"/{batch}/mendelian_errors"+'{ext}', ext=['.bed','.bim','.fam'], batch=batches),
        # mendelian_errors_chr = expand(str(tmpMod5)+"/{batch}/mendelian_errors-updated-chr{chromo}"+'{ext}', ext=['.bed','.bim','.fam'], chromo=chrom, batch=batches),
        # rayner_report = expand(resultPath/"{batch}/rayner_report.rst", batch=batches),
        
        # pedigree_report = expand((resultPath/"{batch}/pedigree_fu_detector_solver").with_suffix(".yaml"), batch=batches),
        
        # For now: this is needed to force the plots into the report. Fix later
        # Uncomment when creating in the report with plots
        # pca = expand(str(resultPath) + "/{batch}/{role}/core_pca.png", role=ROLES, batch=batches),
        # ibd = expand(str(resultPath/"{batch}/{role}/ibd_estimate.png"), role=ROLES, batch=batches),
        # ibd_accum_exclusion = expand(str(resultPath/"{batch}/{role}/ibd_accum_exclusion.png"), role=ROLES, batch=batches)

        # remove this when m4 is done
	# final output:
        #expand(config['output_base'] + 'mod5-shaping-preparation/tmp/hrc-update-complete-{chr}' + '{ext}', ext=['.bed','.bim','.fam'], chr=chrom),
	# expand(config['output_base'] + '{role}/pca/final_pca_covars.txt', role=ROLES),
	# config['output_base'] + 'sample_flag_list.txt'


# Include modules
include: "mod1-data-conversion.snake"
include: "mod2-sample-pedigree.snake"
include: "mod3-good-markers.snake"
include: "mod4-samples-unrelated.snake"
include: "mod5-phasing-prep.snake"

# for small tests. 
rule test:
    output: touch("foo")
    log: "test.log"
    run:
        print(config["plinklocal"])
        #mqc.test_me()
        print(config["plinklocal"])

# This can be ued to check/log stuff (like available memory). Is run once. 
# onstart:
#     print("NOT Starting the baby")
#     print(rules.test.log)


