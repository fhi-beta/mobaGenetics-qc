rule_stem = "mod6_split_into_chromosomes"
rule mod6_split_into_chromosomes:
    input:
        bedset = rules.mod5_output.output.bedset
    output:
        bedset = multiext(str(tmpMod6 / "{batch}" / "{number_of_samples}_samples" / "mod6_split_into_chromosomes.chr{chr}"), ".bed", ".bim", ".fam")
    run:
        try:
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--chr", wildcards.chr,
                    "--make-bed",
                    "--out", outTrunk
                ]
            )
        except Exception as e:
            print(f"An exception occurred in rule {rule_stem}.")
            print(e)

rule_stem = "mod6_create_vcf"
rule mod6_create_vcf:
    input:
        bedset = rules.mod6_split_into_chromosomes.output.bedset
    output:
        vcf = str(tmpMod6 / "{batch}" / "{number_of_samples}_samples" / "mod6_create_vcf.chr{chr}.nofam.vcf")
    run:
        try:
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.vcf)
            fam = str(input.bedset[2])
            bim = input.bedset[1]
            fam_orig = fam + ".orig"
            wo_fam_fam = str(inTrunk + ".wo_fam.fam")
            # Copy fam to fam_orig:
            cmd = f"cp {fam} {fam_orig}"
            subprocess.run(cmd, shell = True, check=True)
            # remove family information:
            cmd = "awk '{OFS=\"\\t\"}{$1=$3=$4=0;print$2,$3,$4,$5,$6}' " + fam + " > " + wo_fam_fam
            subprocess.run(
                cmd, 
                shell = True
            )
            cmd = f"mv {wo_fam_fam} {fam}"
            subprocess.run(cmd, shell = True, check=True)
            # create vcf file
            cmd = f"{plink2local} --bfile {inTrunk} --recode vcf --ref-allele {bim} 5 2 --no-fid --out {outTrunk}"
            subprocess.run(cmd, shell = True)
            # copy fam_orig to fam
            cmd = f"cp {fam_orig} {fam}"
            subprocess.run(cmd, shell = True, check=True)
        except Exception as e:
            print(f"An exception occurred in rule {rule_stem}.")
            print(e)

rule_stem = "mod6_sort"
rule mod6_sort:
    input:
        vcf = rules.mod6_create_vcf.output.vcf
    output:
        sorted_vcf = str(tmpMod6 / "{batch}" / "{number_of_samples}_samples" / "mod6_sort.chr{chr}.nofam.sorted.vcf")
    conda:
        "envs/bcf_tabix.yaml"
    shell:
        "bcftools sort {input.vcf} -o {output.sorted_vcf}"

rule mod6_conform:
    input:
        sorted_vcf = rules.mod6_sort.output.sorted_vcf
    output:
        conformed_vcf = str(tmpMod6 / "{batch}" /  "{number_of_samples}_samples" / "mod6_conform.chr{chr}.conformed.vcf.gz")
    threads: config["mod6conform_threads"]
    shell:
        """
        echo running mod6_conform
        reffile=$(echo {hrc_ega}/EGA*/HRC.r1-1.EGA.GRCh37.chr{wildcards.chr}.haplotypes*.vcf.gz)
        output_full={output.conformed_vcf}
        outTrunk="${{output_full%.vcf.gz}}"
        echo here
        java -jar {conform_gt} gt={input.sorted_vcf} ref=$reffile out=$outTrunk chrom={wildcards.chr} match=POS
        echo done with chr{wildcards.chr}
        """

rule_stem = "mod6_impute"
rule mod6_impute:
    input:
        conformed_vcf = rules.mod6_conform.output.conformed_vcf
    output:
        imputed_vcf = str(tmpMod6 / "{batch}" / "{number_of_samples}_samples" / "mod6_impute.chr{chr}.imputed.vcf.gz")
    conda:
        "envs/bcf_tabix.yaml"
    threads: config["mod6impute_threads"]
    shell:
        """
        reffile=$(echo {hrc_ega}/EGA*/HRC.r1-1.EGA.GRCh37.chr{wildcards.chr}.haplotypes*.vcf.gz)
        mapfile={mapfiles}/plink.chr{wildcards.chr}.GRCh37.map
        output_full={output.imputed_vcf}
        outTrunk="${{output_full%.vcf.gz}}"
        java -Xmx{config[mem]} -jar {beagle} gt={input.conformed_vcf} ref=$reffile impute=true out=$outTrunk chrom={wildcards.chr} nthreads={config[beagle_threads]} seed=12345 map=$mapfile
        tabix -p vcf {output.imputed_vcf}
        bcftools query -f '%POS %REF %ALT %DR2 %AF\n' {output.imputed_vcf} -o ${{outTrunk}}.info
        """


rule mod6_output:
    input:
        imputed_vcf = rules.mod6_impute.output.imputed_vcf
    output:
        bedset = multiext(str(tmpMod6 / "{batch}" / "{number_of_samples}_samples" / "mod6_output.chr{chr}"), ".bed", ".bim", ".fam")
    shell:
        """
        output_full={output.bedset[0]}
        outTrunk="${{output_full%.bed}}"
        {plink2local} --vcf {input.imputed_vcf} --make-bed --out $outTrunk
        """