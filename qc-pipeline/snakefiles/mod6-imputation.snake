tmpMod5str = str(tmpMod5)
def get_all_mod5_output_fam_files(wildcards):
    return [f"{tmpMod5str}/{batch}/mod5_output.fam" for batch in batches]

def get_all_mod5_output_bim_files(wildcards):
    return [f"{tmpMod5str}/{batch}/mod5_output.bim" for batch in batches]

rule mod6_extend_count_tables:
    input:
        fam_files = get_all_mod5_output_fam_files,
        bim_files = get_all_mod5_output_bim_files,
        previous_samples_table = rules.mod5_extend_count_tables.output.samples_table,
        previous_variants_table = rules.mod5_extend_count_tables.output.variants_table,
        id_mapping = config["id_mapping"]
    output:
        samples_table = resultPath / "count_tables" / "mod6_samples",
        variants_table = resultPath / "count_tables" / "mod6_variants"
    params:
        mod = "mod6"
    conda:
        "envs/r_4.2.yaml"
    shell:
        """
        Rscript utils/extend_count_tables.R \
            {input.id_mapping} \
            {input.previous_samples_table} \
            {output.samples_table} \
            {params.mod} \
            {input.fam_files}
        Rscript utils/extend_count_tables.R \
            {input.id_mapping} \
            {input.previous_variants_table} \
            {output.variants_table} \
            {params.mod} \
            {input.bim_files}
        """

rule_stem = "mod6_split_into_chromosomes"
rule mod6_split_into_chromosomes:
    input:
        bedset = rules.mod5_output.output.bedset
    output:
        bedset = multiext(str(tmpMod6 / "{batch}" / "mod6_split_into_chromosomes.chr{chr}"), ".bed", ".bim", ".fam")
    run:
        try:
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            subprocess.run(
                [
                    plink2local,
                    "--bfile", inTrunk,
                    "--chr", wildcards.chr,
                    "--make-bed",
                    "--out", outTrunk
                ]
            )
        except Exception as e:
            print(f"An exception occurred in rule {rule_stem}.")
            print(e)

rule_stem = "mod6_create_vcf"
rule mod6_create_vcf:
    input:
        bedset = rules.mod6_split_into_chromosomes.output.bedset
    output:
        vcf = str(tmpMod6 / "{batch}" / "mod6_create_vcf.chr{chr}.vcf")
    run:
        try:
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.vcf)
            bim = input.bedset[1]
            cmd = f"{plink2local} --bfile {inTrunk} --recode vcf-iid --ref-allele {bim} 5 2 --out {outTrunk}"
            subprocess.run(cmd, shell = True)
        except Exception as e:
            print(f"An exception occurred in rule {rule_stem}.")
            print(e)

rule_stem = "mod6_sort"
rule mod6_sort:
    input:
        vcf = rules.mod6_create_vcf.output.vcf
    output:
        sorted_vcf = str(tmpMod6 / "{batch}" / "mod6_sort.chr{chr}.sorted.vcf")
    conda:
        "envs/bcf_tabix.yaml"
    shell:
        "bcftools sort {input.vcf} -o {output.sorted_vcf}"

rule mod6_conform:
    input:
        sorted_vcf = rules.mod6_sort.output.sorted_vcf
    output:
        conformed_vcf = str(tmpMod6 / "{batch}" / "mod6_conform.chr{chr}.conformed.vcf.gz")
    threads: config["mod6conform_threads"]
    params:
        ref_chr=lambda wildcards: "X_nonPAR" if wildcards.chr == "X" else wildcards.chr
    conda:
        "envs/bcf_tabix.yaml"
    shell:
        """
        echo running mod6_conform for chr {wildcards.chr}
        if [[ {wildcards.chr} == "X" ]]; then
            echo "Bypassing conform for non-PAR X chromosome"
            bgzip -c {input.sorted_vcf} > {output.conformed_vcf}
        else
            reffile=$(echo {hrc_ega}/EGA*/HRC.r1-1.EGA.GRCh37.chr{wildcards.chr}.haplotypes*.vcf.gz)
            output_full={output.conformed_vcf}
            outTrunk="${{output_full%.vcf.gz}}"
            java -Xmx{config[mod6conform_mem]} -jar {conform_gt} gt={input.sorted_vcf} ref=$reffile out=$outTrunk chrom={wildcards.chr} match=POS
        fi
        """
rule mod6_fill_ac:
    input:
        vcf = rules.mod6_conform.output.conformed_vcf
    output:
        bcf = str(tmpMod6 / "{batch}" / "mod6_fill_ac.chr{chr}.bcf.gz")
    conda:
        "envs/bcf_tabix.yaml"
    shell:
        """
        bcftools +fill-AN-AC -Ob {input.vcf} -o {output.bcf}
        tabix -p bcf {output.bcf}
        """
rule mod6_generate_shapeit_family_files:
    input:
        fam = rules.mod5_output.output.bedset[2]
    output:
        shapeit_fam = str(tmpMod6 / "{batch}" / "shapeit_fam.fam")
    run:
        mqc.filter_fam_table_for_shapeit(input.fam, output.shapeit_fam)




        # shell:
    #     """
    #     reffile=$(echo {hrc_ega}/EGA*/HRC.r1-1.EGA.GRCh37.chr{params.ref_chr}.haplotypes*.vcf.gz)
    #     output_full={output.conformed_vcf}
    #     outTrunk="${{output_full%.vcf.gz}}"
    #     java -Xmx{config[mod6conform_mem]} -jar {conform_gt} gt={input.sorted_vcf} ref=$reffile out=$outTrunk chrom={wildcards.chr} match=POS
    #     """

def get_map_chr(wildcards):
    if wildcards.chr == "PAR1":
        return "X_par1"
    elif wildcards.chr == "PAR2":
        return "X_par2"
    else:
        return wildcards.chr

def get_beagle_chr(wildcards):
    if wildcards.chr == "PAR1" or wildcards.chr == "PAR2":
        return "X"
    else:
        return wildcards.chr

tmpMod6str = str(tmpMod6)
def get_shapeit_fam(wildcards):
    return f"{tmpMod6}/{wildcards.batch}/shapeit_fam.fam"

rule mod6_phase:
    input:
        shapeit_fam = get_shapeit_fam,
        bcf = rules.mod6_fill_ac.output.bcf
    output:
        phased_bcf = str(tmpMod6 / "{batch}" / "mod6_phase.chr{chr}.phased.bcf"),
        phaseit_log = str(tmpMod6 / "{batch}" / "mod6_phase.chr{chr}.log")
    params:
        map_chr=get_map_chr
    conda:
        "envs/shapeit_5.yaml"
    threads: 8
    shell:
        """
        reffile=$(echo {hrc_ega}/EGA*/HRC.r1-1.EGA.GRCh37.chr{wildcards.chr}.haplotypes*.vcf.gz)
        mapfile={mapfiles}/shapeit.chr{params.map_chr}.GRCh37.map
        SHAPEIT5_phase_common --input {input.bcf} --pedigree {input.shapeit_fam} --reference reffile --region {wildcards.chr} --map $mapfile --output {output.phased_bcf} --output-format bcf --thread 8
        """
        

rule_stem = "mod6_impute"
rule mod6_impute:
    input:
        conformed_vcf = rules.mod6_conform.output.conformed_vcf
    output:
        imputed_vcf = str(tmpMod6 / "{batch}" / "mod6_impute.chr{chr}.imputed.vcf.gz")
    params:
        map_chr=get_map_chr,
        beagle_chr=get_beagle_chr
    threads: config["mod6impute_threads"]
    log:
        str(tmpMod6/"{batch}" / "mod6_impute_log_chr{chr}.log")
    shell:
        """
        reffile={hrc_bref}/HRC_GRCh37.chr{wildcards.chr}.bref3
        mapfile={mapfiles}/plink.chr{params.map_chr}.GRCh37.map
        output_full={output.imputed_vcf}
        outTrunk="${{output_full%.vcf.gz}}"
        java -Xmx{config[mem]} -jar {beagle} gt={input.conformed_vcf} ref=$reffile impute=true out=$outTrunk chrom={params.beagle_chr} nthreads={config[beagle_threads]} ap=true gp=true map=$mapfile
        """

# rule mod6_norm_and_rename:
#     input:
#         imputed_vcf = rules.mod6_impute.output.imputed_vcf
#         # index = rules.mod7_index_batch_merge.output.index
#     output:
#         norm_vcf = str(tmpMod6 / "{batch}" / "{number_of_samples}_samples" / "mod6_norm.chr{chr}.vcf.gz")
#     conda:
#         "envs/bcf_tabix.yaml"
#     shell:
#         """
#         bcftools norm -m + {input.imputed_vcf} | bcftools annotate --set-id +'%CHROM\_%POS\_%REF:%ALT' -o {output.norm_vcf}
#         """
    
rule mod6_index:
    input:
        imputed_vcf = rules.mod6_impute.output.imputed_vcf
    output:
        index = str(tmpMod6 / "{batch}" / "mod6_impute.chr{chr}.imputed.vcf.gz.tbi")
    conda:
        "envs/bcf_tabix.yaml"
    shell:
        """
        tabix -p vcf {input.imputed_vcf}
        """

rule mod6_query:
    input:
        imputed_vcf = rules.mod6_impute.output.imputed_vcf
    output:
        info = str(tmpMod6 / "{batch}" / "mod6_impute.chr{chr}.imputed.vcf.gz.info")
    conda:
        "envs/bcf_tabix.yaml"
    shell:
        "bcftools query -f '%CHROM %POS %ID %IMP %REF %ALT %DR2 %AF\n' {input.imputed_vcf} -o {output.info}"






# chrs = chrs_debug # remove in prod!
# tmpMod6str = str(tmpMod6)
# def get_vcf_chr_files_for_batch(wildcards):
#     return [f"{tmpMod6str}/{wildcards.batch}/{wildcards.number_of_samples}_samples/mod6_impute.chr{chr}.imputed.vcf.gz" for chr in chrs]

# def get_index_files_for_batch(wildcards):
#     return [f"{tmpMod6str}/{wildcards.batch}/{wildcards.number_of_samples}_samples/mod6_impute.chr{chr}.imputed.vcf.gz.tbi" for chr in chrs]

# rule mod6_merge_chrs:
#     input:
#         imputed_vcfs = get_vcf_chr_files_for_batch,
#         index = get_index_files_for_batch
#     output:
#         #merged_vcf = str(tmpMod6Archive / "{batch}" / "{number_of_samples}_samples" / "mod6_merge_chrs.vcf.gz")
#         merged_vcf = str(tmpMergeTest / "{batch}" / "{number_of_samples}_samples" / "mod6_merge_chrs.vcf.gz")
#     log:
#         # str(tmpMod6Archive / "{batch}" / "{number_of_samples}_samples" / "mod6_merge.log")
#         str(tmpMergeTest / "{batch}" / "{number_of_samples}_samples" / "mod6_merge.log")
#     conda:
#         "envs/bcf_tabix.yaml"
#     shell:
#         """
#         echo "Output file: {output.merged_vcf}" > {log}
#         echo "Merge started $(date '+%Y-%m-%d %H:%M:%S')" >> {log}
#         bcftools concat {input.imputed_vcfs} -o {output.merged_vcf} --write-index
#         echo "Merge finished $(date '+%Y-%m-%d %H:%M:%S')" >> {log}
#         echo "Merged files:" >> {log}
#         for file in {input.imputed_vcfs}; do echo "$file" >> {log}; done
#         """
# rule mod6_output:
#     input:
#         merged_vcf = rules.mod6_merge_chrs.output.merged_vcf
#     output:
#         # sorted_vcf = str(tmpMod6Archive / "{batch}" / "{number_of_samples}_samples" / "mod6_output.vcf.gz")
#         sorted_vcf = str(tmpMergeTest / "{batch}" / "{number_of_samples}_samples" / "mod6_output.vcf.gz")
#     conda:
#         "envs/bcf_tabix.yaml"
#     shell:
#         """
#         bcftools sort {input.merged_vcf} -o {output.sorted_vcf} --write-index
#         """




# rule mod6_norm:
#     input:
#         imputed_vcf = rules.mod6_impute.output.imputed_vcf
#     output:
#         normalized_vcf = str(tmpMod6 / "{batch}" / "{number_of_samples}_samples" / "mod6_norm.chr{chr}.imputed.vcf.gz")
#     conda:
#         "envs/bcf_tabix.yaml"
#     shell:
#         """
#         bcftools norm -m + {input.imputed_vcf} -o {output.normalized_vcf}
#         """

# rule mod6_convert_to_pgen:
#     input:
#         normalized_vcf = rules.mod6_norm.output.normalized_vcf
#     output:
#         pgenset = multiext(str(tmpMod6 / "{batch}" / "{number_of_samples}_samples" / "mod6_output.chr{chr}"), ".pgen", ".pvar", ".psam")
#     shell:
#         """
#         output_full={output.pgenset[0]}
#         outTrunk="${{output_full%.pgen}}"
#         {plink2local} --vcf {input.normalized_vcf} --make-pgen --out $outTrunk
#         """

# chrs = chrs_debug
# def get_pgen_chr_files_for_batch(wildcards):
#     tmpMod6str = str(tmpMod6)
#     return [f"{tmpMod6str}/{wildcards.batch}/{n_samples}_samples/mod6_output.chr{chr}.pgen" for chr in chrs]
# rule mod6_output:
#     input:
#         pgens = get_pgen_chr_files_for_batch,
#         original_psam = rules.mod5_output.output.psam
#     output:
#         pgenset = multiext(str(tmpMod6 / "{batch}" / "{number_of_samples}_samples" / "mod6_output"), ".pgen", ".pvar", ".psam")
#     run:
#         out_trunk = mqc.plinkBase(output.pgenset[0])
#         # merge chromosomes:
#         mqc.merge_pgensets(input.pgens, out_trunk, plink2local)
#         # add source ID to .psam and restore family information:
#         psam_file = input.original_psam
#         df = pd.read_csv(psam_file, delim_whitespace=True, dtype={'SEX': 'str'})
#         df["SEX"] = df["SEX"].fillna(0)
#         df.insert(2, "SID", wildcards.batch)
#         df.to_csv(output.pgenset[2], sep='\t', index=False)

    