# Get cleaned markers
rule_stem = "mendelian_errors_prep"
rule mendelian_errors_prep:
    input:
        bedset = rules.pedigree_fu_detector_solver.output.inferped_all,
        markers = rules.common_founders_offspring_markers.output.markers,
    output:
        bedset=expand(str(tmpMod5/rule_stem)
                          + '{ext}', ext=['.bed','.bim','.fam']),
        results = report((resultPath/rule_stem).with_suffix(".yaml"),
                         category="Module 5 Shaping preparation",
                         caption=(resultPath/rule_stem).with_suffix(".rst"))
    benchmark:
        (tmpMod5/rule_stem).with_suffix(".benchmark")
    run:
        item_type = rule_info[rule]["rule type"]
        mqc.log(runlog, rule_info[rule]["QC test"])

        inTrunk =  mqc.plinkBase(input.bedset[0])
        outTrunk = mqc.plinkBase(output.bedset[0])
        subprocess.run([plinklocal,
                        "--bfile", inTrunk,
                        "--extract", input.markers,
                        "--out", outTrunk,
                        "--make-bed" ], check=True)
        dropouts = mqc.checkUpdates(inTrunk+".bim", outTrunk+".bim",cols = [0,1],
                                    sanityCheck = "removal", fullList = True)
        dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
        dropouts["Rule"] = rule
        mqc.saveYamlResults(output.results, dropouts)


# Remove markers above chr 23 as these are eliglible for imputation
rule_stem = "chr1_23"
rule chr1_23:
    input:
        bedset = rules.mendelian_errors_prep.output.bedset,
    output:
        bedset=expand(str(tmpMod5/rule_stem)
                          + '{ext}', ext=['.bed','.bim','.fam']),
        results = report((resultPath/rule_stem).with_suffix(".yaml"),
                         category="Module 5 Shaping preparation",
                         caption=(resultPath/rule_stem).with_suffix(".rst"))
    benchmark:
        (tmpMod5/rule_stem).with_suffix(".benchmark")
    run:
        item_type = rule_info[rule]["rule type"]
        mqc.log(runlog, rule_info[rule]["QC test"])

        inTrunk =  mqc.plinkBase(input.bedset[0])
        outTrunk = mqc.plinkBase(output.bedset[0])
        subprocess.run([plinklocal,
                        "--bfile", inTrunk,
                        "--chr", "1-23",
                        "--out", outTrunk,
                        "--make-bed" ], check=True)
        dropouts = mqc.checkUpdates(inTrunk+".bim", outTrunk+".bim",cols = [0,1],
                                    sanityCheck = "removal", fullList = True)
        dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
        dropouts["Rule"] = rule
        mqc.saveYamlResults(output.results, dropouts)

# Set any mendelian errors obtained from trios (and duos) to missing
rule_stem = "mendelian_errors"
rule mendelian_errors:
    input:
        bedset = rules.chr1_23.output.bedset,
    output:
        bedset=expand(str(tmpMod5/rule_stem)
                          + '{ext}', ext=['.bed','.bim','.fam']),
        results = report((resultPath/rule_stem).with_suffix(".yaml"),
                         category="Module 5 Shaping preparation",
                         caption=(resultPath/rule_stem).with_suffix(".rst"))
    benchmark:
        (tmpMod5/rule_stem).with_suffix(".benchmark")
    run:
        item_type = rule_info[rule]["rule type"]
        mqc.log(runlog, rule_info[rule]["QC test"])

        inTrunk =  mqc.plinkBase(input.bedset[0])
        outTrunk = mqc.plinkBase(output.bedset[0])
        subprocess.run([plinklocal,
                        "--bfile", inTrunk,
                        "--set-me-missing",
                        "--mendel-duos",
                        "--out", outTrunk,
                        "--make-bed" ], check=True)
        dropouts = mqc.checkUpdates(inTrunk+".bim", outTrunk+".bim",cols = [0,1],
                                    sanityCheck = "updated", fullList = True)
        dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
        dropouts["Rule"] = rule
        # we are not happy about the yaml-file since it does not reflect the missings state
        # mendelian errors set to missing are here reported on the logfile
        # and will patch drpouts[actionTakenCount"]
        miss_file = outTrunk+".me_miss"
        mqc.egrep("set-me-missing:",outTrunk+".log",miss_file) # not really necessary, but nice for later debug
        try:
            with open(miss_file, 'r') as miss:
                res = miss.read()
            n = int(re.search(r"--set-me-missing:\s+(\d+)",res).group(1))
        except Exception as e:
            print(f"Error. Did not find a set-me-missing number in {miss_file}', {str(e)}")

        # here n is the number of 'replaced by missing' reported by plink, so we patch dropouts...
        dropouts["actionTakenCount"] = n
        mqc.saveYamlResults(output.results, dropouts)

# Not used for now - due to memory problem this was rewritten to work on one chromosome at the time
# See wr_check and tidy up the names if needed.
rule_stem = "hrc_verification"
rule rayner_verification:
    input:
        bedset = rules.mendelian_errors.output.bedset,
        hrc_sites=config['hrc_sites']
    output:
        touch(tmpMod5/"RaynerVerificationNotDone")
        # bedset=expand(str(tmpMod5/rule_stem)
        #                   + '{ext}', ext=['.bed','.bim','.fam']),
        # results = report((resultPath/rule_stem).with_suffix(".yaml"),
        #                  category="Module 5 Shaping preparation",
        #                  caption=(resultPath/rule_stem).with_suffix(".rst"))
    benchmark:
        (tmpMod5/rule_stem).with_suffix(".benchmark")
    run:
        item_type = rule_info[rule]["rule type"]
        mqc.log(runlog, rule_info[rule]["QC test"])

        # inTrunk =  mqc.plinkBase(input.bedset[0])
        # outTrunk = mqc.plinkBase(output.bedset[0])
        # freqTrunk = outTrunk + ".freq4hrc"
        # # generate required frequency file for HRC check perl script
        # subprocess.run([plinklocal,
        #                 "--bfile", inTrunk,
        #                 "--freq",
        #                 "--out", freqTrunk])
        # in order not to confuse/change perl-script we cd there so results end up where they should
        #os.chdir(tmpMod5)
        # assumes perl found in path
        # 18.2.2020: This should have been a subprocess.run but it crashes due to not enough memory
        # subprocess.run(["perl",
        #             f"{libdir}/HRC-1000G-check-bim.pl",
        #             "-b", inTrunk+".bim",
        #             "-f", freqTrunk+".frq",
        #             "-r", input.hrc_sites,
        #             "-h"]) # -h indicates HRC as refset
        print ("**** hrc_verification not done due to to little memory. Should have done: ")
        print(["perl",
                    f"{libdir}/HRC-1000G-check-bim.pl",
                    "-b", "inTrunk.bim",
                    "-f", "freqTrunk.freq",
                    "-r", input.hrc_sites,
                    "-h"])
        print ("**** While at it, get the neweset version 4.2.11: ")
        # dropouts = mqc.checkUpdates(inTrunk+".bim", outTrunk+".bim",cols = [0,1],
        #                             sanityCheck = "updated", fullList = True)
        # dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
        # dropouts["Rule"] = rule
        # mqc.saveYamlResults(output.results, dropouts)

rule_stem = "split_by_chr"
rule split_by_chr:
    input:
        bedset = rules.mendelian_errors.output.bedset,
    output:
        bedset = expand(str(tmpMod5/rule_stem)
                          +'{{chromo}}'+'{ext}', ext=['.bed','.bim','.fam']),
    benchmark:
        str(tmpMod5/rule_stem)+f"{{chromo}}.benchmark"
    message: "Splitting verified dataset by chromosome: chromosome {wildcards.chromo}/23"
    run:
        item_type = rule_info[rule]["rule type"]
        mqc.log(runlog, rule_info[rule]["QC test"])
        inTrunk =  mqc.plinkBase(input.bedset[0])
        outTrunk = mqc.plinkBase(output.bedset[0])
        print("****** Get bedset from Rayner verification!!! *****")
        subprocess.run([plinklocal,
                        "--bfile", inTrunk,
                        "--chr", str(wildcards.chromo),
                        "--out", outTrunk,
                        "--make-bed"], check=True)

rule_stem = "split_by_chr_report"
rule split_by_chr_report:
    input:
        bedset = rules.mendelian_errors.output.bedset,
        chrfiles =  expand(str(tmpMod5/"split_by_chr")
                          +'{chrom}'+".bim", chrom=range(1,24)),
    output:
        results = report((resultPath/rule_stem).with_suffix(".rst"),
                          category="Module 5 Shaping preparation",
                          caption=(resultPath/rule_stem).with_suffix(".rst"))
    run:
        item_type = rule_info[rule]["rule type"]
        mqc.log(runlog, rule_info[rule]["QC test"])
        bimfile =  mqc.plinkBase(input.bedset[0]) + ".bim"
        total = mqc.line_count(bimfile)  # number of snps before split
        sum = 0 # total snps in chr files created previously
        regx = re.compile('(\d+).bim')  # assuming that the chromosone number is just before .bim
        res = ""  # String that contains chromosone counts.
        for f in input.chrfiles:
            c = re.search(regx,f).group(1)  # this chromosone
            n = mqc.line_count(f)           # number of snsps for this chromosone
            res += f"{c}:{n} "
            sum += n
        if total != sum :
            print("Error: {bimfile} had {total} snps while the 23 chromosone files had {sum}")

        with open(output.results,'w') as file:
                file.write(f'Rule {rule_info[rule]["Rule order"]} ({rule_info[rule]["rule action"]})\n\n'
                           f'Total snps {total} split chromosone-wise like this:\n\n'
                           f'{res}\n')
# Pretty hardcoded to HRC as reference set
rule_stem = "wr_check"
rule wr_check:
    input:
        bedset = rules.split_by_chr.output.bedset,
        hrc_sites=config['hrc_sites']
    output:
        bedset = expand(str(tmpMod5/rule_stem)
                          +'{{chromo}}'+'{ext}', ext=['.bed','.bim','.fam']),
        # results = report((resultPath/rule_stem).with_suffix(".rst"),
        #                  category="Module 5 Shaping preparation",
        #                  caption=(resultPath/rule_stem).with_suffix(".rst"))
    benchmark:
        str(tmpMod5/rule_stem)+f"{{chromo}}.benchmark"
    message: "Running Will Rayner perl script for {wildcards.chromo}/23"
    run:
        item_type = rule_info[rule]["rule type"]
        mqc.log(runlog, rule_info[rule]["QC test"])
        inTrunk =  mqc.plinkBase(input.bedset[0])
        basename = Path(inTrunk).name # perl-script will use this to denote tweak-files for plink
        print(basename)
        outTrunk = mqc.plinkBase(output.bedset[0])
        freqTrunk = outTrunk + ".freq4wr"
        # generate required frequency file for HRC check perl script
        subprocess.run([plinklocal,
                        "--bfile", inTrunk,
                        "--freq",
                        "--out", freqTrunk], check=True)

        # reducing the reference set to this chromosoe
        hrc_subset = "hrc." + wildcards.chromo
        mqc.egrep(f"'^\#CHROM|^{wildcards.chromo}\s'",input.hrc_sites, hrc_subset)
        if wildcards.chromo == '23' :    # denoted as X in the hrc ref.set
            mqc.egrep(f"'^\#CHROM|^X\s'",input.hrc_sites, hrc_subset)
        
        # assumes perl found in path
        subprocess.run(["perl",
                    f"{libdir}/HRC-1000G-check-bim.pl",
                    "-b", inTrunk+".bim",
                    "-f", freqTrunk+".frq",
                    "-r", hrc_subset,
                    "-c",  # indicate that we are not using the full chromosoe   
                    "-h"], # -h indicates HRC as refset
                    check=True, cwd=tmpMod5) # cwd so perl-script drops results on 'our' tmp dir
        # log found in  str(tmpMod5)+f"/LOG-{basename}-HRC.txt"
        subprocess.run([plinklocal,
                        "--bfile", inTrunk,
                        "--exclude", str(tmpMod5)+f"/Exclude-{basename}-HRC.txt",
                        "--out", outTrunk,
                        "--make-bed"], check=True)
        # Update chromosone
        subprocess.run([plinklocal,
                        "--bfile", outTrunk,
                        "--update-chr", str(tmpMod5)+f"/Chromosome-{basename}-HRC.txt",
                        "--out", outTrunk,
                        "--make-bed"], check=True)
        # Update map
        subprocess.run([plinklocal,
                        "--bfile", outTrunk,
                        "--update-map", str(tmpMod5)+f"/Position-{basename}-HRC.txt",
                        "--out", outTrunk,
                        "--make-bed"], check=True)
        # update strand
        subprocess.run([plinklocal,
                        "--bfile", outTrunk,
                        "--flip", str(tmpMod5)+f"/Strand-Flip-{basename}-HRC.txt",
                        "--out", outTrunk,
                        "--make-bed"], check=True)
        # finally
        subprocess.run([plinklocal,
                        "--bfile", outTrunk,
                        "--reference-allele", str(tmpMod5)+f"/Force-Allele1-{basename}-HRC.txt",
                        "--out", outTrunk,
                        "--make-bed"], check=True)
        

# rule hrc_verification_check:
# 	input:
# 		in_bedset=expand(base + 'mod5-shaping-preparation/tmp/me-errors-set-missing' + '{ext}', ext=['.bed','.bim','.fam']),
# 		hrc_sites=config['hrc_sites']
# 	output:
# 		out_bedset=expand(base + 'mod5-shaping-preparation/tmp/hrc-update-complete' + '{ext}', ext=['.bed','.bim','.fam']),
# 		exclsnps=base + 'mod5-shaping-preparation/rep/' + 'exclusions_hrccheck_snp.txt',
# 		stvars=base + 'mod5-shaping-preparation/rep/' + 'storedvars_hrccheck.txt'
# 	params:
# 		in_bedset=base + 'mod5-shaping-preparation/tmp/me-errors-set-missing',
# 		out_bedset=base + 'mod5-shaping-preparation/tmp/hrc-update-complete',
# 		out_freq=base + 'mod5-shaping-preparation/tmp/freq-for-hrc-check',
# 		out_path=base + 'mod5-shaping-preparation/tmp/',
# 	        hrc_check_tool=os.path.join(libdir, 'HRC-1000G-check-bim.pl')
# 	message: "Running Will Rayner HRC preparation and updating bedset"
# 	shell:
# 		"""
# 		set -e
# 		libdir={libdir}
# 		plinklocal={plinklocal}

# 		source {libdir}/functions.sh
# 		source {libdir}/plink_wrapper_functions.sh

# 		PIPELINELOG={runlog}
# 		STOREDVARS={output.stvars}
# 		EXCLUSIONSS={output.exclsnps}
# 		log "HRC VERIFICATION CHECK"

# 		# generate required frequency file for HRC check perl script
# 		$plinklocal \
# 			--bfile {params.in_bedset} \
# 			--freq \
# 			--out {params.out_freq}

# 		# change into output path for HRC check tool to dump files in correct folder
# 		cd {params.out_path}
		
# 		# run HRC checks
# 		perl {libdir}/HRC-1000G-check-bim.pl \
# 			-b {params.in_bedset}.bim \
# 			-f {params.out_freq}.frq \
# 			-r {input.hrc_sites} \
# 			-h
		
# 		log "HRC VERIFICATION UPDATE"

# 		# Update bedset with HRC verification lists
# 		bedbase=`basename {params.in_bedset}`

# 		# exclude markers
# 		report_nsnps ${{bedbase}} "START"
# 		plink_exclude_markers \
# 			{params.in_bedset} \
# 			{params.out_path}/Exclude-${{bedbase}}-HRC.txt \
# 			{params.out_path}/TEMP1 \
# 			"WR_EXCLUSIONS"

# 		# update chromosome
# 		$plinklocal \
# 			--bfile {params.out_path}/TEMP1 \
# 			--update-chr {params.out_path}/Chromosome-${{bedbase}}-HRC.txt \
# 			--make-bed \
# 			--out {params.out_path}/TEMP2
# 		store "HRC_TOCHANGECHR" `wc -l {params.out_path}/Chromosome-${{bedbase}}-HRC.txt`

# 		# update map
# 		$plinklocal \
# 			--bfile {params.out_path}/TEMP2 \
# 			--update-map {params.out_path}/Position-${{bedbase}}-HRC.txt \
# 			--make-bed \
# 			--out {params.out_path}/TEMP3 
# 		store "HRC_TOUPDATEPOS" `wc -l {params.out_path}/Position-${{bedbase}}-HRC.txt`
		
# 		# update strand / flip strand
# 		$plinklocal \
# 			--bfile {params.out_path}/TEMP3 \
# 			--flip {params.out_path}/Strand-Flip-${{bedbase}}-HRC.txt \
# 			--make-bed \
# 			--out {params.out_path}/TEMP4
# 		store "HRC_TOFLIPSTR" `wc -l {params.out_path}/Strand-Flip-${{bedbase}}-HRC.txt`

# 		# update reference-allele
# 		$plinklocal \
# 			--bfile {params.out_path}/TEMP4 \
# 			--reference-allele {params.out_path}/Force-Allele1-${{bedbase}}-HRC.txt \
# 			--make-bed \
# 			--out {params.out_bedset}
# 		store "HRC_TOFLIPAL" `wc -l {params.out_path}/Force-Allele1-${{bedbase}}-HRC.txt`

# 		# Logging for final report
# 		report_nsnps {params.out_bedset} "AFTER_WR"
# 		"""


rule_stem  = "rule_stem is only to be used in snakemake directives - have you used it in other code?"
