##
#
# This module runs a PCA with the 1 kg and clusters the samples by overlap with superpopulations in a PCA.
#
##

# Generate statistics on raw dataset before anything happens to the data

tmpMod2str = str(tmpMod2)
def get_all_mod2_output_fam_files(wildcards):
    return [f"{tmpMod2str}/{batch}/m2_output.fam" for batch in batches]

def get_all_mod2_output_bim_files(wildcards):
    return [f"{tmpMod2str}/{batch}/m2_output.bim" for batch in batches]

rule mod3_extend_count_tables:
    input:
        fam_files = get_all_mod2_output_fam_files,
        bim_files = get_all_mod2_output_bim_files,
        previous_samples_table = rules.mod2_extend_count_tables.output.samples_table,
        previous_variants_table = rules.mod2_extend_count_tables.output.variants_table,
        id_mapping = config["id_mapping"]
    output:
        samples_table = resultPath / "count_tables" / "mod3_samples",
        variants_table = resultPath / "count_tables" / "mod3_variants"
    params:
        mod = "mod3"
    conda:
        "envs/r_4.2.yaml"
    shell:
        """
        Rscript utils/extend_count_tables.R \
            {input.id_mapping} \
            {input.previous_samples_table} \
            {output.samples_table} \
            {params.mod} \
            {input.fam_files}
        Rscript utils/extend_count_tables.R \
            {input.id_mapping} \
            {input.previous_variants_table} \
            {output.variants_table} \
            {params.mod} \
            {input.bim_files}
        """

rule_stem = 'mod3_generate_start_stats'
rule mod3_generate_start_stats:
    input:
        bedset = rules.m2_output.output.bedset
    output:
        het = tmpMod3/"{batch}"/'mod3_start_het.het',
        hwe = tmpMod3/"{batch}"/'mod3_start_hwe.hwe',
        freq = tmpMod3/"{batch}"/'mod3_start_freq.frq',
        lmiss = tmpMod3/"{batch}"/'mod3_start_missing.lmiss',
        imiss = tmpMod3/"{batch}"/'mod3_start_missing.imiss',
    threads: 1
    run:
        try:
            # Plink base paths
            plink_input = mqc.plinkBase(input.bedset[0])
            plink_het_output = mqc.plinkBase(output.het)
            plink_hwe_output = mqc.plinkBase(output.hwe)
            plink_freq_output = mqc.plinkBase(output.freq)
            plink_miss_output = mqc.plinkBase(output.lmiss)

            # Heterozygocity rate
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", plink_input,
                    "--het",
                    "--out", plink_het_output
                ],
                check=True
            )

            # HWE
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", plink_input,
                    "--hardy",
                    "--out", plink_hwe_output
                ],
                check=True
            )

            # Frequencies
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", plink_input,
                    "--freq",
                    "--out", plink_freq_output
                ],
                check=True
            )

            # Missingness
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", plink_input,
                    "--missing",
                    "--out", plink_miss_output
                ],
                check=True
            )

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

# Reduce 1000 genome markers to the ones pruned in module 2
rule_stem = 'common_markers_moba_ref'
rule common_markers_moba_ref:
    input:
        bedset_ref = multiext(config["1000_genomes_stem"] ,'.bed','.bim','.fam'),
        bedset_moba = rules.m2_output.output.pruned_bedset
    output:
        bedset_ref = multiext(str(tmpMod3/"{batch}"/"pca_ref") ,'.bed','.bim','.fam'),
        bedset_moba = multiext(str(tmpMod3/"{batch}"/"pca_moba") ,'.bed','.bim','.fam'),
        marker_list = (tmpMod3/"{batch}"/rule_stem).with_suffix(".txt"),
        tri_alleles = tmpMod3/"{batch}"/(rule_stem + "_tri_alleles.missnp"),
        results_moba = report(
            (resultPath/"{batch}"/"pca_moba").with_suffix(".yaml"),
            category = "Module 3 1000Genomes prep"
        ),
    benchmark:
    
        (tmpMod3/"{batch}"/rule_stem).with_suffix(".benchmark")

    run:
        item_type = rule_info[rule]["rule type"]
        mqc.log(runlog, rule_info[rule]["QC test"])
        inTrunk_ref =  mqc.plinkBase(input.bedset_ref[0])
        inTrunk_moba =  mqc.plinkBase(input.bedset_moba[0])
        outTrunk_ref =  mqc.plinkBase(output.bedset_ref[0])
        outTrunk_moba =  mqc.plinkBase(output.bedset_moba[0])
        outTrunk_ref_temp = outTrunk_ref + "_temp"
        outTrunk_moba_temp = outTrunk_moba + "_temp"
        triallelesTrunk =  mqc.plinkBase(output.tri_alleles)

        # Common markers found in marker_list
        mqc.intersect_rsid(inTrunk_moba + ".bim", inTrunk_ref + ".bim",  output.marker_list)

        # Reduce both sets to the common markers
        subprocess.run(
            [
                plinklocal,
                "--bfile", inTrunk_ref,
                "--extract", output.marker_list,
                "--out", outTrunk_ref_temp,
                "--allow-extra-chr",
                "--make-bed"
            ],
            check = True
        )

        subprocess.run(
            [
                plinklocal,
                "--bfile", inTrunk_moba,
                "--extract", output.marker_list,
                "--out", outTrunk_moba_temp,
                "--make-bed"
            ],
            check = True
        )

        # alas these two are not identical enough -
        # discover tri-allele problems by dummy-merging
        # Note that we don't want to abort on plink-failure (as this will be)
        subprocess.run(
            [
                plinklocal,
                "--bfile", outTrunk_ref_temp,
                "--bmerge", outTrunk_moba_temp,
                "--out", triallelesTrunk
            ],
            check = False
        )

        # ... And then remove these markers from both sets
        subprocess.run(
            [
                plinklocal,
                "--bfile", outTrunk_ref_temp,
                "--exclude", output.tri_alleles,
                "--out", outTrunk_ref,
                "--make-bed"
            ],
            check = True
        )

        subprocess.run(
            [
                plinklocal,
                "--bfile", outTrunk_moba_temp,
                "--exclude", output.tri_alleles,
                "--out", outTrunk_moba,
                "--make-bed"
            ],
            check = True
        )

        print (f"checking {inTrunk_moba} -> {outTrunk_moba}")
        # Document the reduction for moba
        dropouts = mqc.checkUpdates(
            inTrunk_moba + ".bim",
            outTrunk_moba + ".bim",
            cols = [0, 1, 3, 4, 5],
            sanityCheck = "removal",
            fullList = False,
            allele_flip = True
        )

        dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
        dropouts["Rule"] = rule
        dropouts["Excluded markers"] = f"Common markers in {output.marker_list}, trialleles removed in {output.tri_alleles}"
        mqc.saveYamlResults(output.results_moba, dropouts)

# We would prefer to run the PCA on 1kg and project MoBa on the eigenvectors but merging is more robust and works just fine.
rule_stem = "pca_both"
rule pca_both:
    input:
        bedset_ref = rules.common_markers_moba_ref.output.bedset_ref,
        bedset_moba = rules.common_markers_moba_ref.output.bedset_moba,
    output:
        bedset = multiext(str(tmpMod3/"{batch}"/rule_stem), '.bed', '.bim', '.fam'),
        pcs = tmpMod3/"{batch}"/(rule_stem + ".pcs"),
        eigenvector = tmpMod3/"{batch}"/(rule_stem + ".vec"),
        snp_loadings = tmpMod3/"{batch}"/(rule_stem + ".load"),
        eigenvalues = tmpMod3/"{batch}"/(rule_stem + ".val"),
        variance_explained = tmpMod3/"{batch}"/(rule_stem + ".pve"),
    benchmark:
        (tmpMod3/"{batch}"/rule_stem).with_suffix(".benchmark")
    run:
        item_type = rule_info[rule]["rule type"]
        mqc.log(runlog, rule_info[rule]["QC test"])
        inTrunk_ref = mqc.plinkBase(input.bedset_ref[0])
        inTrunk_moba = mqc.plinkBase(input.bedset_moba[0])
        outTrunk = mqc.plinkBase(output.bedset[0])

        subprocess.run(
            [
                plinklocal,
                "--bfile", inTrunk_ref,
                "--bmerge", inTrunk_moba,
                "--out", outTrunk,
                "--make-bed"
            ],
            check = True
        )

        subprocess.run(
            [
                flashpca,
                "--bfile", outTrunk,
                "--outpc", output.pcs,
                "--outvec", output.eigenvector,
                "--outload", output.snp_loadings,
                "--outval", output.eigenvalues,
                "--outpve", output.variance_explained,
            ],
            check = True
        )

rule_stem = "plot_pca_both"
rule plot_pca_both:
    input:
        pcs = rules.pca_both.output.pcs,
        pop_map = config["1000_genomes_pop"],
    params:
        title = "\"Principal Component Analysys (PCA) in {batch} vs. 1 KG\""
    output:
        md_file = github_docs/"{batch}"/"pca_1kg_moba.md",
        cluster_file = tmpMod3/"{batch}"/"clusters",
        ceu_id_file = tmpMod3/"{batch}"/"ceu_core_ids"
    conda:
        "envs/plot_pca_both.yaml"
    threads: 1
    shell:
        """
        Rscript utils/pca/plot_pca_population_cluster_1kg.R \
            {input.pcs} \
            {input.pop_map} \
            {output.md_file} \
            {params.title} \
            {output.cluster_file} \
            {output.ceu_id_file}
        """


