rule_stem = "mod6_split_into_chromosomes"
rule mod6_split_into_chromosomes:
    input:
        bedset = rules.mod5_output.output.bedset
    output:
        bedset = multiext(str(tmpMod6 / "{batch}" / "mod6_split_into_chromosomes.chr{chr}"), ".bed", ".bim", ".fam")
    run:
        try:
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--chr", wildcards.chr,
                    "--make-bed",
                    "--out", outTrunk
                ]
            )
        except Exception as e:
            print(f"An exception occurred in rule {rule_stem}.")
            print(e)

rule mod6_create_vcf:
    input:
        bedset = rules.mod6_split_into_chromosomes.output.bedset
    output:
        vcf = str(tmpMod6 / "{batch}" / "mod6_create_vcf.chr{chr}.nofam.vcf")
    run:
        inTrunk = mqc.plinkBase(input.bedset[0])
        outTrunk = mqc.plinkBase(output.vcf)
        fam = str(input.bedset[2])
        bim = input.bedset[1]
        fam_orig = fam + ".orig"
        wo_fam_fam = str(inTrunk + ".wo_fam.fam")
        # Copy fam to fam_orig:
        cmd = f"cp {fam} {fam_orig}"
        subprocess.run(cmd, shell = True)
        # remove family information:
        # cmd = "awk '{OFS=""\t""}{$1=$3=$4=0;print$2,$3,$4,$5,$6}' " + fam + " > " + wo_fam_fam
        cmd = "awk '{OFS=\"\\t\"}{$1=$3=$4=0;print$2,$3,$4,$5,$6}' " + fam + " > " + wo_fam_fam
        subprocess.run(
            cmd, 
            shell = True
        )
        cmd = f"mv {wo_fam_fam} {fam}"
        subprocess.run(cmd, shell = True)
         # create vcf file
        cmd = f"{plinklocal} --bfile {inTrunk} --recode vcf --ref-allele {bim} 5 2 --no-fid --out {outTrunk}"
        subprocess.run(cmd, shell = True)
        # copy fam_orig to fam
        cmd = f"cp {fam_orig} {fam}"
        subprocess.run(cmd, shell = True)
