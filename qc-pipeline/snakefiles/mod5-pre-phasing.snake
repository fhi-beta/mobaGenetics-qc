# cull samples for faster debug. bypass by passing number_of_samples = 'all'
rule_stem = "mod5_cull_samples"
rule mod5_cull_samples:
    input:
        # bedset=multiext("/mnt/work/marc/qc/test_mod5_24.05.02/{batch}/m4_output_good_markers", ".bed", ".bim", ".fam")
        bedset=rules.m4_output_good_markers.output.m4_output_good_markers
    output:
        bedset=multiext(str(tmpMod5 / "{batch}" / "mod5_input_{number_of_samples}_samples"), ".bed", ".bim", ".fam")
    run:
        try:
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            if wildcards.number_of_samples.lower() == "all":
                subprocess.run(
                    [
                        plinklocal,
                        "--bfile", inTrunk,
                        "--make-bed",
                        "--out", outTrunk
                    ]
                )
            elif wildcards.number_of_samples.isdigit():
                samples_txt = f"{outTrunk}.first{wildcards.number_of_samples}samples.txt"
                input_bed = input.bedset[2]
                cmd = f"head -n {wildcards.number_of_samples} {input_bed}  > {samples_txt}"
                subprocess.run(cmd, shell=True, check=True)
                subprocess.run(
                    [
                        plinklocal,
                        "--bfile", inTrunk,
                        "--keep", samples_txt,
                        "--make-bed",
                        "--out", outTrunk
                    ]
                )
            else:
                raise Exception("number_of_samples must either be a digit or 'all'")
        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

rule_stem = 'mod5_merge_x'
rule mod5_merge_x:
    input:
        bedset=rules.mod5_cull_samples.output.bedset
    output:
        bedset=multiext(str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / rule_stem), ".bed", ".bim", ".fam")
    shell:
        outTrunk = mqc.plinkBase(output.bedset[0])
        subprocess.run(
            [
                plinklocal,
                "--bed", input.bedset[0],
                "--merge-x",
                "--make-bed",
                "--out", outTrunk
            ]
        )


rule_stem = 'mod5_exclude_duplicates'
rule mod5_exclude_duplicates:
    input:
        # bedset=multiext("/mnt/work/marc/qc/test_mod5_24.05.02/{batch}/m4_output_good_markers", ".bed", ".bim", ".fam")
        # bedset=rules.mod4point5_cull_samples.output.bedset # culled bedset for faster debug
        bedset=rules.mod5_cull_samples.output.bedset # culled bedset for faster debug
    output:
        bedset=multiext(str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / rule_stem), ".bed", ".bim", ".fam")
    run:
        try:
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            dupvar = outTrunk + ".dupvar"
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--list-duplicate-vars", "ids-only", "suppress-first",
                    "--out", outTrunk,
                ]
            )
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--exclude", dupvar,
                    "--make-bed",
                    "--out", outTrunk,
                ]
            )
        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)


rule_stem = "mod5_exclude_nonstandard_alleles"
rule mod5_exclude_nonstandard_alleles:
    input:
        bedset=rules.mod5_exclude_duplicates.output.bedset
    output:
        bedset=multiext(str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / rule_stem), ".bed", ".bim", ".fam")
    run:
        try:
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--snps-only", "just-acgt",
                    "--make-bed",
                    "--out", outTrunk,
                ]
            )
        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

rule_stem = "mod5_exclude_ambiguous_snps"
rule mod5_exclude_ambiguous_snps:
    input:
        bedset = rules.mod5_exclude_nonstandard_alleles.output.bedset
    output:
        bedset = multiext(str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / rule_stem), ".bed", ".bim", ".fam")
    run:
        try:
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            mqc.exclude_strand_ambigious_markers(inTrunk, outTrunk, plinklocal)
        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

rule_stem = "mod5_zero_out_mendelian_errors"
rule mod5_zero_out_mendelian_errors:
    input:
        bedset = rules.mod5_exclude_ambiguous_snps.output.bedset
    output:
        bedset = multiext(str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / rule_stem), ".bed", ".bim", ".fam")
    run:
        try:
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--me", "1", "1",
                    "--set-me-missing",
                    "--make-bed",
                    "--out", outTrunk
                ]
            )
            # Check if subjects have been removed:
            n_pre = mqc.line_count(inTrunk + ".fam")
            n_post = mqc.line_count(outTrunk + ".fam")
            if n_pre != n_post:
                print("Subjects removed when zeroing out Mendelian errors")
                # should this raise an exception?
                # raise Exception("Subjects removed when zeroing out Mendelian errors")
                
        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)


rule_stem = "mod5_missingness_and_hwe"
rule mod5_missingness_and_hwe:
    input:
        bedset = rules.mod5_zero_out_mendelian_errors.output.bedset
    output:
        bedset = multiext(str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / rule_stem), ".bed", ".bim", ".fam")
    run:
        try:
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--hwe", "1e-6",
                    "--geno", "0.02",
                    "--make-bed",
                    "--out", outTrunk
                ]    
            )
        except Exception as e:
            print(f"An exception occurred in rule {rule_stem}.")
            print(e)

rule_stem = "mod5_compute_allele_frequencies"
rule mod5_compute_allele_frequencies:
    input:
        bedset = rules.mod5_missingness_and_hwe.output.bedset
    output:
        bedset = multiext(str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / rule_stem), ".bed", ".bim", ".fam"),
        frq = tmpMod5 / "{batch}" / "{number_of_samples}_samples" / (rule_stem + ".frq")
    run:
        try:
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--freq",
                    "--make-bed",
                    "--out", outTrunk
                ]
            )
        except Exception as e:
            print(f"An exception occurred in rule {rule_stem}.")
            print(e)

# rule_stem must be same as for input bim file
rule mod5_hrc1000:
    input:
        bedset = rules.mod5_compute_allele_frequencies.output.bedset,
        frq = rules.mod5_compute_allele_frequencies.output.frq
    output:
        exclude = tmpMod5 / "{batch}" / "{number_of_samples}_samples" / ("Exclude-" + rule_stem + "-HRC.txt"),
        chromosome = tmpMod5 / "{batch}" / "{number_of_samples}_samples" / ("Chromosome-" + rule_stem + "-HRC.txt"),
        position = tmpMod5 / "{batch}" / "{number_of_samples}_samples" / ("Position-" + rule_stem + "-HRC.txt"),
        strand_flip = tmpMod5 / "{batch}" / "{number_of_samples}_samples" / ("Strand-Flip-" + rule_stem + "-HRC.txt"),
        force = tmpMod5 / "{batch}" / "{number_of_samples}_samples" / ("Force-Allele1-" + rule_stem + "-HRC.txt"),
        id = tmpMod5 / "{batch}" / "{number_of_samples}_samples" / ("ID-" + rule_stem + "-HRC.txt")
    run:
        try:
            subprocess.run(
                [
                    "perl", hrc1000g, 
                    "-b", input.bedset[1],
                    "-f", input.frq,
                    "-r", hrc_sites,
                    "-h"
                ]
            )
            
        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

rule_stem = "mod5_exclude"
rule mod5_exclude:
    input:
        exclude = rules.mod5_hrc1000.output.exclude,
        bedset = rules.mod5_compute_allele_frequencies.output.bedset
    output:
        bedset = multiext(str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / rule_stem), ".bed", ".bim", ".fam")
    run:
        try:
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--exclude", input.exclude,
                    "--make-bed",
                    "--out", outTrunk  
                ]
            )
        except Exception as e:
            print(f"An exception occurred in rule {rule_stem}.")
            print(e)

rule_stem = "mod5_update_chr"
rule mod5_update_chr:
    input:
        chromosome = rules.mod5_hrc1000.output.chromosome,
        bedset = rules.mod5_exclude.output.bedset
    output:
        bedset = multiext(str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / rule_stem), ".bed", ".bim", ".fam")
    run:
        try:
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--update-chr", input.chromosome,
                    "--make-bed",
                    "--out", outTrunk
                ]
            )
        except Exception as e:
            print(f"An exception occurred in rule {rule_stem}.")
            print(e)

rule_stem = "mod5_update_map"
rule mod5_update_map:
    input:
        position = rules.mod5_hrc1000.output.position,
        bedset = rules.mod5_update_chr.output.bedset
    output:
        bedset = multiext(str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / rule_stem), ".bed", ".bim", ".fam")
    run:
        try:
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--update-map", input.position,
                    "--make-bed",
                    "--out", outTrunk
                ]
            )
        except Exception as e:
            print(f"An exception occurred in rule {rule_stem}.")
            print(e)

rule_stem = "mod5_strand_flip"
rule mod5_strand_flip:
    input:
        strand_flip = rules.mod5_hrc1000.output.strand_flip,
        bedset = rules.mod5_update_map.output.bedset
    output:
        bedset = multiext(str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / rule_stem), ".bed", ".bim", ".fam")
    run:
        try:
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--flip", input.strand_flip,
                    "--make-bed",
                    "--out", outTrunk
                ]
            )
        except Exception as e:
            print(f"An exception occurred in rule {rule_stem}.")
            print(e)

rule_stem = "mod5_force_allele"
rule mod5_force_allele:
    input:
        force = rules.mod5_hrc1000.output.force,
        bedset = rules.mod5_strand_flip.output.bedset
    output:
        bedset = multiext(str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / rule_stem), ".bed", ".bim", ".fam")
    run:
        try:
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--a1-allele", input.force,
                    "--make-bed",
                    "--out", outTrunk
                ]
            )
        except Exception as e:
            print(f"An exception occurred in rule {rule_stem}.")
            print(e)

rule_stem = "mod5_update_name"
rule mod5_update_name:
    input:
        id = rules.mod5_hrc1000.output.id,
        bedset = rules.mod5_force_allele.output.bedset
    output:
        bedset = multiext(str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / rule_stem), ".bed", ".bim", ".fam")
    run:
        try:
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--update-name", input.id,
                    "--real-ref-alleles",
                    "--make-bed",
                    "--out", outTrunk
                ]
            )
        except Exception as e:
            print(f"An exception occurred in rule {rule_stem}.")
            print(e)

rule_stem = "mod5_remove_blacklisted_variants"
rule mod5_remove_blacklisted_variants:
    input:
        bedset = rules.mod5_update_name.output.bedset
    output:
        bedset = multiext(str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / rule_stem), ".bed", ".bim", ".fam")
    run:
        try:
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--exclude", blacklisted_variants,
                    "--make-bed",
                    "--out", outTrunk
                ]
            )
        except Exception as e:
            print(f"An exception occurred in rule {rule_stem}.")
            print(e)

rule mod5_rename_missing_ids:
    input:
        bedset = rules.mod5_remove_blacklisted_variants.output.bedset
    output:
        bedset = multiext(str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / "mod5_rename_missing_ids"), ".bed", ".bim", ".fam")
    shell:
        """
        input_full={input.bedset[0]}
        inTrunk="${{input_full%.bed}}"
        output_full={output.bedset[0]}
        outTrunk="${{output_full%.bed}}"
        {plink2local} --bfile $inTrunk --set-missing-var-ids @_#\$1:\$2 --make-bed --out $outTrunk
        """



# rule_stem = "mod5_remove_variants_with_missing_IDs"
# rule mod5_remove_variants_with_missing_IDs:
#     input:
#         bedset = rules.mod5_update_name.output.bedset
#     output:
#         bedset = multiext(str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / rule_stem), ".bed", ".bim", ".fam")
#     run:
#         try:
#             inTrunk = mqc.plinkBase(input.bedset[0])
#             outTrunk = mqc.plinkBase(output.bedset[0])
#             subprocess.run(
#                 [
#                     plinklocal,
#                     "--bfile", inTrunk,
#                     "--exclude", exclude_variants,
#                     "--make-bed",
#                     "--out", outTrunk
#                 ]
#             )
#         except Exception as e:
#             print(f"An exception occurred in rule {rule_stem}.")
#             print(e)

rule_stem = "mod5_output"
rule mod5_output:
    input:
        # bedset = rules.mod5_remove_variants_with_missing_IDs.output.bedset,
        bedset = rules.mod5_rename_missing_ids.output.bedset,
        sexcheck = rules.m4_output_good_markers.output.sexcheck
    output:
        bedset = multiext(str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / rule_stem), ".bed", ".bim", ".fam"),
        psam = str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / (rule_stem + ".psam")),
        missing = multiext(str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / rule_stem), ".imiss", ".lmiss"),
        het=str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / (rule_stem + ".het")),
        hwe=str(tmpMod5 / "{batch}" / "{number_of_samples}_samples" / (rule_stem + ".hwe")),
        md=str(github_docs / "{batch}"/"{number_of_samples}_samples"/ "pre_imputation_report" / "pre_imputation_report.md")
    run:
        try:
            # Exclude duplicates again
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            subprocess.run(
                [
                    plink2local,
                    "--bfile", inTrunk,
                    "--rm-dup", "force-first",
                    "--make-bed",
                    "--output-chr", "26",
                    "--out", outTrunk
                ]
            )
            # keep full original .psam file for later
            subprocess.run([
                plink2local,
                "--bfile", outTrunk,
                "--make-just-psam",
                "--out", outTrunk
            ])
            subprocess.run([
                plinklocal,
                "--bfile", outTrunk,
                "--missing",
                "--het",
                "--hardy",
                "--out", outTrunk
            ])
            batch_report.write_report(output.md, wildcards.batch, "mod5-pre-phasing", outTrunk, input.sexcheck)
        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)







