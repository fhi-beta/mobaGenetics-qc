##
#
# This module removes chromosome zero, filters based on clustering and information from genome studio, and removes duplicate SNPs.
#
##

from datetime import datetime

# Paths
raw_folder_path = Path(config['raw_folder'])

def getInitialBeds(batch):
    paths = list()
    for initial_batch in getInitialMerging(batch):
        paths.append(
            os.path.join(raw_folder_path, initial_batch, "raw-data", "bedset", initial_batch + ".bed")
        )
    return paths

rule_stem = 'initial_merge' # Note: at this stage, the batches merged need to have identical formatting, e.g. regarding alleles and chromosomes.
rule initial_merge:
    input:
        beds = lambda wildcards: getInitialBeds(wildcards.batch)
    output:
        bedset = multiext(str(tmpMod1/"{batch}"/rule_stem), '.bed', '.bim', '.fam'),
    threads: 1
    run:
        try:
            inTrunk = mqc.plinkBase(input.beds[0])
            outTrunk = mqc.plinkBase(output.bedset[0])

            if len(input.beds) > 1:

                lastTrunk = inTrunk

                for i in range(1, len(input.beds)):

                    batchTrunk = mqc.plinkBase(input.beds[i])

                    if i == len(input.beds) - 1:

                        tempTrunk = outTrunk

                    else:

                        tempTrunk = outTrunk + "_temp" + str(i)


                    print(f"merging {lastTrunk} with {batchTrunk} into {tempTrunk}")

                    subprocess.run(
                        [
                            plinklocal,
                            "--bfile", lastTrunk,
                            "--bmerge", batchTrunk,
                            "--out", tempTrunk,
                            "--make-bed"
                        ],
                        check=True
                    )

                    lastTrunk = tempTrunk

            else:

                mqc.copy_bedset(inTrunk, outTrunk)


        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

rule_stem = 'remove_chr0'
rule remove_chr0:
    input:
        bedset = rules.initial_merge.output.bedset
    output:
        bedset = multiext(str(tmpMod1/"{batch}"/rule_stem), '.bed', '.bim', '.fam'),
        results = report(
            resultPath/"{batch}"/(rule_stem + ".yaml"),
            category = "Module 1 Data preparation",
            caption = resultPath/"{batch}"/(rule_stem + ".rst")
        )
    threads: 1
    run:
        try:
            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog, rule_info[rule]["QC test"])
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])

            subprocess.run(
                [
                    plinklocal,
                    "--bfile",inTrunk,
                    "--not-chr", "0",
                    "--out", outTrunk,
                    "--make-bed"
                ],
                check=True
            )

            # Checking how many markers/chromosone 0 we removed  on this step
            # We turn of warning here as we know there might be duplicate markers to check for later
            dropouts = mqc.checkUpdates(
                inTrunk +".bim",
                outTrunk +".bim",
                cols = [0, 1, 3, 4, 5],
                indx = 1,
                sanityCheck = "none",
                fullList = True,
                allele_flip = True
            )

            dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
            dropouts["Rule"] = rule

            mqc.saveYamlResults(output.results, dropouts)
            mqc.log(runlog, f'{datetime.now().strftime("%Y-%m-%d_%H:%M:%S")} - (NSNP_CHR0_LOST) Batch {wildcards.batch}: Removed {dropouts["actionTakenCount"]} chromosone 0 out of {dropouts["in"]}, leaving {dropouts["out"]} markers\n')

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

# Convert the alleles for batches in A/B format
rule_stem = 'update_ab_alleles'
rule update_ab_alleles:
    input:
        bedset = rules.remove_chr0.output.bedset
    output:
        bedset = multiext(str(tmpMod1/"{batch}"/rule_stem), '.bed', '.bim', '.fam')
    threads: 1
    run:
        try:

            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])

            allele_mapping_file = getAbAlleleMappingFile(wildcards.batch)

            if allele_mapping_file != "None":

                tempTrunk = outTrunk + "_temp"

                subprocess.run(
                    [
                        plinklocal,
                        "--bfile", inTrunk,
                        "--update-alleles", allele_mapping_file,
                        "--out", tempTrunk,
                        "--make-bed"
                    ],
                    check=True
                )

                subprocess.run(
                    [
                        plinklocal,
                        "--bfile", tempTrunk,
                        "--extract", allele_mapping_file,
                        "--out", outTrunk,
                        "--make-bed"
                    ],
                    check=True
                )

                raise Exception("Alleles updated")

            else:

                mqc.copy_bedset(
                    inTrunk,
                    outTrunk
                )

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

# Convert the strand from top to forward
rule_stem = 'update_strand'
rule update_strand:
    input:
        bedset = rules.update_ab_alleles.output.bedset
    output:
        bedset = multiext(str(tmpMod1/"{batch}"/rule_stem), '.bed', '.bim', '.fam')
    threads: 1
    run:
        try:

            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])

            strand_mapping_file = getStrandMappingFile(wildcards.batch)

            if strand_mapping_file != "None":

                strand_mapping_table = pd.read_csv(
                    strand_mapping_file,
                    delimiter = '\t'
                )

                # Update chr
                strand_mapping_table_chr = strand_mapping_table.iloc[:, [0, 1]]
                mapping_file = outTrunk + "_mapping_chr"
                tempTrunkChr = outTrunk + "_tempChr"
                strand_mapping_table_chr.to_csv(
                    mapping_file,
                    sep = ' ',
                    index = False,
                    header = False
                )

                subprocess.run(
                    [
                        plinklocal,
                        "--bfile", inTrunk,
                        "--update-chr", mapping_file,
                        "--out", tempTrunkChr,
                        "--make-bed"
                    ],
                    check=True
                )

                # Update pos
                strand_mapping_table_pos = strand_mapping_table.iloc[:, [0, 2]]
                mapping_file = outTrunk + "_mapping_pos"
                tempTrunkPos = outTrunk + "_tempPos"
                strand_mapping_table_pos.to_csv(
                    mapping_file,
                    sep = ' ',
                    index = False,
                    header = False
                )

                subprocess.run(
                    [
                        plinklocal,
                        "--bfile", tempTrunkChr,
                        "--update-map", mapping_file,
                        "--out", tempTrunkPos,
                        "--make-bed"
                    ],
                    check=True
                )

                # Update flip
                strand_mapping_table_flip = strand_mapping_table[strand_mapping_table.iloc[:, 4].str.contains('-')].iloc[:, 0]
                mapping_file = outTrunk + "_flip"
                tempTrunkFlip = outTrunk + "_tempFlip"
                strand_mapping_table_pos.to_csv(
                    mapping_file,
                    sep = ' ',
                    index = False,
                    header = False
                )

                subprocess.run(
                    [
                        plinklocal,
                        "--bfile", tempTrunkPos,
                        "--flip", mapping_file,
                        "--out", tempTrunkFlip,
                        "--make-bed"
                    ],
                    check=True
                )

                # Exlude variants that are not in the mapping file
                subprocess.run(
                    [
                        plinklocal,
                        "--bfile", tempTrunkFlip,
                        "--extract", strand_mapping_file,
                        "--out", outTrunk,
                        "--make-bed"
                    ],
                    check=True
                )

                raise Exception("Strand updated")


            else:

                mqc.copy_bedset(
                    inTrunk,
                    outTrunk
                )

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

# Exclude blacklisted variants
rule_stem = 'black_list'
rule black_list:
    input:
        bedset = rules.update_strand.output.bedset
    output:
        bedset = multiext(str(tmpMod1/"{batch}"/rule_stem), '.bed', '.bim', '.fam')
    threads: 1
    run:
        try:

            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])

            black_list_files = getBlackListFiles(wildcards.batch)

            if len(black_list_files) > 0:

                previousTrunk = inTrunk

                for i in range(1, len(black_list_files)):

                    black_list_file = black_list_files[i]

                    if i == len(black_list_files) - 1:
                        tempTrunk = outTrunk
                    else:
                        tempTrunk = outTrunk + "_temp" + str(i)

                    subprocess.run(
                        [
                            plinklocal,
                            "--bfile", previousTrunk,
                            "--exclude", black_list_file,
                            "--out", tempTrunk,
                            "--make-bed"
                        ],
                        check=True
                    )

                    previousTrunk = tempTrunk

                raise Exception("blacklists applied")

            else:

                mqc.copy_bedset(
                    inTrunk,
                    outTrunk
                )

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)


# If this has not been done before, extract the pseudo-autosomal region of the X chromosome.
rule_stem = 'split_x'
rule split_x:
    input:
        bedset = rules.black_list.output.bedset
    output:
        bedset = multiext(str(tmpMod1/"{batch}"/rule_stem), '.bed', '.bim', '.fam')
    threads: 1
    run:
        try:

            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            freqTrunk = mqc.plinkBase(input.bedset[0]) + '_freq'

            freq_data = mqc.get_freq_data(
                inTrunk = inTrunk,
                outTrunk = freqTrunk,
                plinklocal = plinklocal
            )

            # print("*** Debug ***")
            # chromosomes = freq_data['CHR'].unique()
            # chromosomes_string = ','.join(map(str, chromosomes.flatten()))
            # print("Chromosomes: ", chromosomes_string)
            # print("*************")

            if not 25 in chromosomes:

                subprocess.run(
                    [
                        plinklocal,
                        "--bfile", inTrunk,
                        "--split-x", "b37",
                        "--out", outTrunk,
                        "--make-bed"
                    ],
                    check=True
                )

                mqc.log(runlog,f'{datetime.now().strftime("%Y-%m-%d_%H:%M:%S")} - (X chromosome split) Batch {wildcards.batch}\n')

            else:

                mqc.copy_bedset(
                    inTrunk,
                    outTrunk
                )

            print(inTrunk)
            freqTrunk = mqc.plinkBase(output.bedset[0]) + '_freq'
            freq_data = mqc.get_freq_data(
                inTrunk = outTrunk,
                outTrunk = freqTrunk,
                plinklocal = plinklocal
            )

            # print("*** Debug ***")
            # chromosomes = freq_data['CHR'].unique()
            # chromosomes_string = ','.join(map(str, chromosomes.flatten()))
            # print("Chromosomes: ", chromosomes_string)
            # print("*************")

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)


# Generate statistics on raw dataset before anything happens to the data
rule_stem = 'mod1_generate_start_stats'
rule mod1_generate_start_stats:
    input:
        bedset = rules.split_x.output.bedset
    output:
        het = tmpMod1/"{batch}"/'mod1_start_het.het',
        hwe = tmpMod1/"{batch}"/'mod1_start_hwe.hwe',
        freq = tmpMod1/"{batch}"/'mod1_start_freq.frq',
        lmiss = tmpMod1/"{batch}"/'mod1_start_missing.lmiss',
        imiss = tmpMod1/"{batch}"/'mod1_start_missing.imiss',
    threads: 1
    run:
        try:
            # Plink base paths
            plink_input = mqc.plinkBase(input.bedset[0])
            plink_het_output = mqc.plinkBase(output.het)
            plink_hwe_output = mqc.plinkBase(output.hwe)
            plink_freq_output = mqc.plinkBase(output.freq)
            plink_miss_output = mqc.plinkBase(output.lmiss)

            # Heterozygocity rate
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", plink_input,
                    "--het",
                    "--out", plink_het_output
                ],
                check=True
            )

            # HWE
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", plink_input,
                    "--hardy",
                    "--out", plink_hwe_output
                ],
                check=True
            )

            # Frequencies
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", plink_input,
                    "--freq",
                    "--out", plink_freq_output
                ],
                check=True
            )

            # Missingness
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", plink_input,
                    "--missing",
                    "--out", plink_miss_output
                ],
                check=True
            )

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)


# Check for duplicate markers, and remove all but one (keep best callrate)
rule_stem = 'remove_duplicate_markers'
rule remove_duplicate_markers:
    input:
        bedset = rules.split_x.output.bedset,
    output:
        bedset = multiext(str(tmpMod1/"{batch}"/rule_stem), '.bed', '.bim', '.fam'),
        excludeList = tmpMod1/"{batch}"/(rule_stem + ".txt"),
        resultDetails = resultPath/"{batch}"/(rule_stem + ".csv"),
        # plink hardcodes this
        plink_dup_list = tmpMod1/"{batch}"/"plink.dupvar",
        results = report(
            resultPath/"{batch}"/(rule_stem + ".yaml"),
            category = "Module 1 Data preparation",
            caption = resultPath/"{batch}"/(rule_stem + ".rst")
        )
    params:
        details = resultPath/"{batch}"/(rule_stem + ".yaml.details")
    threads: 1
    run:
        try:
            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog, rule_info[rule]["QC test"])
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])
            callRateTrunk = mqc.plinkBase(output.excludeList)
            batch_wd = os.path.join(tmpMod1, wildcards.batch)
            print(batch_wd)
            # Create a plink.dupvar file
            # Plink-bug (1.90b5.4): Puts plink.dupvar in snakemake directory, so we change the working directory.
            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--list-duplicate-vars"
                ],
                check = True,
                cwd = batch_wd
            )

            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--out", callRateTrunk,
                    "--missing"
                ],
                check = True
            )

            mqc.create_exclude_list(
                output.plink_dup_list,
                callRateTrunk + ".lmiss",
                output.resultDetails,
                output.excludeList
            )

            subprocess.run(
                [
                    plinklocal,
                    "--bfile", inTrunk,
                    "--exclude", output.excludeList,
                    "--out", outTrunk,
                    "--make-bed"
                ],
                check=True
            )

            dropouts = mqc.checkUpdates(
                inTrunk + ".bim",
                outTrunk + ".bim",
                cols = [0, 1, 3, 4, 5],
                sanityCheck = "removal",
                fullList = True,
                allele_flip = True
            )
            dropouts["Callrates"] = output.resultDetails

            dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
            dropouts["Rule"] = rule
            mqc.saveYamlResults(output.results, dropouts)
            mqc.log(runlog, f'{datetime.now().strftime("%Y-%m-%d_%H:%M:%S")} - Batch {wildcards.batch}: Due to duplicate markers, removed {dropouts["actionTakenCount"]} markers out of {dropouts["in"]}, leaving {dropouts["out"]} markers\n')

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

# If a snp_table was provided with the batch, remove markers on snp table metrics, otherwise leave as is.
rule_stem = 'remove_markers_cluster_sep'
rule remove_markers_cluster_sep:
    input:
        bedset = rules.remove_duplicate_markers.output.bedset,
        snptable = lambda wildcards: getSnpTable(wildcards.batch)
    output:
        bedset = multiext(str(tmpMod1/"{batch}"/rule_stem), '.bed', '.bim', '.fam'),
        results = report(
            resultPath/"{batch}"/(rule_stem + ".yaml"),
            category = "Module 1 Data preparation",
            caption = resultPath/"{batch}"/(rule_stem + ".rst")
        ),
        plot = report(
            resultPath/"{batch}"/(rule_stem + ".png"),
            category = "Module 1 Data preparation",
            caption = resultPath/"{batch}"/(rule_stem + ".rst")
        ),
        # in addition to the removal list .txt, a *removal.txt.samples is produced, sporting only the sample-list
        removal= tmpMod1/"{batch}"/(rule_stem + ".txt"),
        removal_markers = tmpMod1/"{batch}"/(rule_stem + ".markers.txt"),
    params:
        threshold = config['cluster_sep_thr']
    message: "mod1 Remove markers by cluster metrics"
    run:
        try:
            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog, rule_info[rule]["QC test"])
            inTrunk = mqc.plinkBase(input.bedset[0])
            outTrunk = mqc.plinkBase(output.bedset[0])

            column_name = getClusterSeparationColumn(wildcards.batch)

            if input.snptable != "utils/dummy":

                # identify markers for removal on cluster separation
                (removed, total) = mqc.extract_list(
                    input.snptable,
                    output.removal_markers,
                    output.removal,
                    colName = column_name,
                    sep = '\t',
                    condition = "<",
                    threshold = params.threshold,
                    key_cols = [0],
                    doc_cols = [0]
                )

                subprocess.run(
                    [
                        plinklocal,
                        "--bfile", inTrunk,
                        "--exclude", output.removal_markers,
                        "--out", outTrunk ,
                        "--make-bed"
                    ],
                    check = True
                )

                dropouts = mqc.checkUpdates(
                    inTrunk + ".bim",
                    outTrunk +".bim",
                    cols = [0, 1, 3, 4, 5],
                    sanityCheck = "removal",
                    fullList = True,
                    allele_flip = True
                )

                dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
                dropouts["Threshold"] = params.threshold
                dropouts["Rule"] = rule
                mqc.saveYamlResults(output.results, dropouts)

                mqc.log(runlog, f'{datetime.now().strftime("%Y-%m-%d_%H:%M:%S")} - Batch {wildcards.batch}: Removed {dropouts["actionTakenCount"]} markers(NSNP_CLUSTERSEP_LOST) out of {dropouts["in"]} (BEFORE_SNPTABLE), leaving {dropouts["out"]} markers. Treshhold {params.threshold}\n')

                print("Plotting to ", output.plot)

                mqc.plot_point_and_line(
                    dropouts,
                    input.snptable,
                    output.plot,
                    column_name,
                    separator = '\t',
                    ylabel = "Separation",
                    invert = False
                )

            else:

                # Nothing to do for this batch
                mqc.copy_bedset(inTrunk,outTrunk)

                dropouts = mqc.checkUpdates(
                    inTrunk + ".bim",
                    outTrunk +".bim",
                    cols = [0, 1, 3, 4, 5],
                    sanityCheck = "removal",
                    fullList = True,
                    allele_flip = True
                )
                dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
                dropouts["Threshold"] = params.threshold
                dropouts["Rule"] = rule
                mqc.saveYamlResults(output.results, dropouts)

                mqc.log(runlog, f'{datetime.now().strftime("%Y-%m-%d_%H:%M:%S")} - Batch {wildcards.batch}: Removed {dropouts["actionTakenCount"]} markers(NSNP_CLUSTERSEP_LOST) out of {dropouts["in"]} (BEFORE_SNPTABLE), leaving {dropouts["out"]} markers. Treshhold {params.threshold}\n')

                # Create empty output to document that no sample/marker have been removed
                open(output.removal_markers, "w+").close()
                open(output.removal, "w+").close()
                mqc.plot_text(
                    "No table for this batch",
                    output.plot
                )

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

rule_stem = 'remove_markers_gc_score'
rule remove_markers_gc_score:
    input:
        bedset = rules.remove_markers_cluster_sep.output.bedset,
        snptable = lambda wildcards: getSnpTable(wildcards.batch)
    output:
        bedset = multiext(str(tmpMod1/"{batch}"/rule_stem), '.bed', '.bim', '.fam'),
        results = report(
            resultPath/"{batch}"/(rule_stem + ".yaml"),
            category = "Module 1 Data preparation",
            caption = resultPath/"{batch}"/(rule_stem + ".rst")
        ),
        plot = report(
            resultPath/"{batch}"/(rule_stem + ".png"),
            category = "Module 1 Data preparation",
            caption = resultPath/"{batch}"/(rule_stem + ".rst")
        ),
        # in addition to the removal list, a *removal.txt.samples is produced, sporting only the sample-list
        removal= tmpMod1/"{batch}"/(rule_stem + ".txt"),
        removal_markers = tmpMod1/"{batch}"/(rule_stem + ".markers.txt"),
    params:
        threshold = config['10%_GC_score_thr']
    run:
        try:
            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog, rule_info[rule]["QC test"])

            inTrunk =  mqc.plinkBase(input.bedset[0])
            outTrunk =  mqc.plinkBase(output.bedset[0])

            if input.snptable != "utils/dummy":

                # identify markers for removal
                (removed, total) = mqc.extract_list(
                    input.snptable,
                    output.removal_markers,
                    output.removal,
                    colName = config["10%_GC_score_col_name"],
                    sep = '\t',
                    condition = "<",
                    threshold = params.threshold,
                    key_cols=[0],
                    doc_cols=[0]
                )
                subprocess.run(
                    [
                        plinklocal,
                        "--bfile", inTrunk,
                        "--exclude", output.removal_markers,
                        "--out", outTrunk,
                        "--make-bed"
                    ],
                    check = True
                )

                dropouts = mqc.checkUpdates(
                    inTrunk + ".bim",
                    outTrunk + ".bim",
                    cols = [0, 1, 3, 4, 5],
                    sanityCheck = "removal",
                    fullList = True,
                    allele_flip = True
                )
                dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
                dropouts["Threshold"] = params.threshold
                dropouts["Rule"] = rule
                mqc.saveYamlResults(output.results, dropouts)

                mqc.log(runlog, f'{datetime.now().strftime("%Y-%m-%d_%H:%M:%S")} - Batch {wildcards.batch}: Removed {dropouts["actionTakenCount"]} markers(NSNP_GC_LOST) out of {dropouts["in"]} (NSNP_BEFORE_GC), leaving {dropouts["out"]} markers. Treshhold {params.threshold}\n')

                mqc.plot_point_and_line(
                    dropouts,
                    input.snptable,
                    output.plot,
                    config["10%_GC_score_col_name"],
                    separator = '\t',
                    ylabel = "10% GC Score",
                    invert = False
                )

            else:

                # Nothing to do for this batch
                mqc.copy_bedset(inTrunk,outTrunk)

                dropouts = mqc.checkUpdates(
                    inTrunk + ".bim",
                    outTrunk +".bim",
                    cols = [0, 1, 3, 4, 5],
                    sanityCheck = "removal",
                    fullList = True,
                    allele_flip = True
                )
                dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
                dropouts["Threshold"] = params.threshold
                dropouts["Rule"] = rule
                mqc.saveYamlResults(output.results, dropouts)

                mqc.log(runlog, f'{datetime.now().strftime("%Y-%m-%d_%H:%M:%S")} - Batch {wildcards.batch}: Removed {dropouts["actionTakenCount"]} markers(NSNP_CLUSTERSEP_LOST) out of {dropouts["in"]} (BEFORE_SNPTABLE), leaving {dropouts["out"]} markers. Treshhold {params.threshold}\n')

                # Create empty output to document that no sample/marker have been removed
                open(output.removal_markers, "w+").close()
                open(output.removal, "w+").close()
                mqc.plot_text(
                    "No table for this batch",
                    output.plot
                )

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)


rule_stem = 'remove_markers_aa_theta_deviation'
rule remove_markers_aa_theta_deviation:
    input:
        bedset = rules.remove_markers_gc_score.output.bedset,
        snptable = lambda wildcards: getSnpTable(wildcards.batch)
    output:
        bedset = multiext(str(tmpMod1/"{batch}"/rule_stem), '.bed', '.bim', '.fam'),
        results = report(
            resultPath/"{batch}"/(rule_stem + ".yaml"),
            category = "Module 1 Data preparation",
            caption = resultPath/"{batch}"/(rule_stem + ".rst")
        ),
        plot = report(
            resultPath/"{batch}"/(rule_stem + ".png"),
            category = "Module 1 Data preparation",
            caption = resultPath/"{batch}"/(rule_stem + ".rst")
        ),
        # in addition to the removal list, a *removal.txt.samples is produced, sporting only the sample-list
        removal = tmpMod1/"{batch}"/(rule_stem + ".txt"),
        removal_markers = tmpMod1/"{batch}"/(rule_stem + ".markers.txt"),
    params:
        threshold = config['aa_theta_dev_thr']
    run:
        try:
            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog, rule_info[rule]["QC test"])
            inTrunk =  mqc.plinkBase(input.bedset[0])
            outTrunk =  mqc.plinkBase(output.bedset[0])

            if input.snptable != "utils/dummy":

                # identify markers for removal
                column_name = getAaThetaDevColumn(wildcards.batch)
                (removed,total) = mqc.extract_list(
                    input.snptable,
                    output.removal_markers,
                    output.removal,
                    colName = column_name,
                    sep = '\t',
                    condition = ">",
                    threshold = params.threshold,
                    key_cols = [0],
                    doc_cols = [0]
                )

                subprocess.run(
                    [
                        plinklocal,
                        "--bfile", inTrunk,
                        "--exclude", output.removal_markers,
                        "--out", outTrunk,
                        "--make-bed"
                    ],
                    check = True
                )

                dropouts = mqc.checkUpdates(
                    inTrunk+".bim",
                    outTrunk+".bim",
                    cols = [0, 1, 3, 4, 5],
                    sanityCheck = "removal",
                    fullList = True,
                    allele_flip = True
                )
                dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
                dropouts["Threshold"] = params.threshold
                dropouts["Rule"] = rule

                mqc.saveYamlResults(output.results, dropouts)
                mqc.log(runlog, f'{datetime.now().strftime("%Y-%m-%d_%H:%M:%S")} - Batch {wildcards.batch}: Removed {dropouts["actionTakenCount"]} markers(NSNP_AATHETADEV_LOST) out of {dropouts["in"]} (NSNP_GC_LOST), leaving {dropouts["out"]} markers. Treshhold {params.threshold}\n')

                mqc.plot_point_and_line(
                    dropouts,
                    input.snptable,
                    output.plot,
                    column_name,
                    separator = '\t',
                    ylabel = "AA-\u03B8 deviation",
                    invert = False
                )

            else:

                # Nothing to do for this batch
                mqc.copy_bedset(inTrunk,outTrunk)

                dropouts = mqc.checkUpdates(
                    inTrunk + ".bim",
                    outTrunk +".bim",
                    cols = [0, 1, 3, 4, 5],
                    sanityCheck = "removal",
                    fullList = True,
                    allele_flip = True
                )
                dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
                dropouts["Threshold"] = params.threshold
                dropouts["Rule"] = rule
                mqc.saveYamlResults(output.results, dropouts)

                mqc.log(runlog, f'{datetime.now().strftime("%Y-%m-%d_%H:%M:%S")} - Batch {wildcards.batch}: Removed {dropouts["actionTakenCount"]} markers(NSNP_CLUSTERSEP_LOST) out of {dropouts["in"]} (BEFORE_SNPTABLE), leaving {dropouts["out"]} markers. Treshhold {params.threshold}\n')

                # Create empty output to document that no sample/marker have been removed
                open(output.removal_markers, "w+").close()
                open(output.removal, "w+").close()
                mqc.plot_text(
                    "No table for this batch",
                    output.plot
                )

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

rule_stem = 'm1_output'
rule m1_output:
    input:
        # Start of pipe
        bedset_first = rules.remove_chr0.input.bedset,
        # Note that this is actually the output of module 1, this rule is just a report rule
        bedset_last = rules.remove_markers_aa_theta_deviation.output.bedset,
    output:
        bedset = multiext(str(tmpMod1/"{batch}"/rule_stem), '.bed', '.bim', '.fam'),
        # Category is sorted as written below.
        # We use - as prefix to force final reports to be sorted first.
        report_markers = report(
            resultPath/"{batch}"/(rule_stem + ".markers.yaml"),
            category = "- Module 1 Data conversion recap",
            caption = resultPath/"{batch}"/(rule_stem + ".markers.rst")
        ),
        report_samples = report(
            resultPath/"{batch}"/(rule_stem + ".samples.yaml"),
            category = "- Module 1 Data conversion recap",
            caption = resultPath/"{batch}"/(rule_stem + ".samples.rst")
        ),
    run:
        try:
            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog, rule_info[rule]["QC test"])
            firstTrunk =  mqc.plinkBase(input.bedset_first[0])
            lastTrunk =  mqc.plinkBase(input.bedset_last[0])
            outTrunk =  mqc.plinkBase(output.bedset[0])
            docs = "For more documentation see https://github.com/folkehelseinstituttet/mobaGenetics-qc/wiki/Module1 . In the html file see info on individual module steps through the section for results of Module 1 Data preparation"

            # Create a dummy bedset we can refer to later that clearly show module1 output
            for i in ['.bed','.bim','.fam']:
                copyfile(lastTrunk+i, outTrunk+i)

            # report markers
            dropouts = mqc.checkUpdates(
                firstTrunk + ".bim",
                outTrunk + ".bim",
                cols = [0, 1, 3, 4, 5],
                sanityCheck = "removal",
                fullList = True,
                allele_flip = True
            )
            dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
            dropouts["Rule"] = rule
            dropouts["Documentation details"] = docs

            mqc.saveYamlResults(output.report_markers, dropouts)

            # report samples
            dropouts = mqc.checkUpdates(
                firstTrunk + ".fam",
                outTrunk + ".fam",
                cols = [0, 1],
                sanityCheck = "update",
                fullList = True
            )
            dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
            dropouts["Rule"] = rule
            dropouts["Documentation details"] = docs

            mqc.saveYamlResults(output.report_samples, dropouts)

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)


