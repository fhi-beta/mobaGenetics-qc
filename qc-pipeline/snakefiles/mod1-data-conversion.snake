# Rule updates raw bedset with biobank provided pedigree information and gender
# Sample IDs are updated to SentrixIDs
import sys
sys.path.append('../lib')  # in order to find our local packages
import mobaQcTools as mqc  # local moba package
import yaml

rule update_sample_ids:
    input:
        in_bedset=expand(config['raw_bed_stem'] + '{ext}', ext=['.bed','.bim','.fam']),
        recode=config['recode_ids']
    output:
        out_bedset=expand(str(base  / 'mod1-data-preparation/tmp/rawbed-id-updated') + '{ext}', ext=['.bed','.bim','.fam']),
        results = report(resultPath/"sampleIdUpdated.txt",category="Module 1 Data Conversion")
    run:
        mqc.log(runlog, "*** Module 1 Data Conversion ***\n")
        mqc.log(runlog, "Updating sample ids: \n")
        inTrunk = mqc.plinkBase(input.in_bedset[0])
        outTrunk = mqc.plinkBase(output.out_bedset[0])


        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--update-ids", input.recode,
                "--out", outTrunk ,
                "--make-bed"        ])

        (kept, total) = mqc.countCsvDiff(outTrunk+".fam",inTrunk+".fam",[0,1])
        updated = total - kept
        mqc.log(runlog,f"Sample id: Updated {updated} samples (NIND_NOTUPDATEDID) out of {total} (NIND_TOUPDATEID)\n")
        mqc.resultLog(output.results, f"Sample id: Updated {updated} samples out of {total}\n")

rule update_parents:
    input:
        in_bedset=rules.update_sample_ids.output.out_bedset,
        recode=config['recode_parents']
    output:
        out_bedset=expand(str(base/'mod1-data-preparation/tmp/rawbed-parents-updated') + '{ext}', ext=['.bed','.bim','.fam']),
        results = report(resultPath/"parentsUpdated.txt",category="Module 1 Data Conversion")
    run:
        mqc.log(runlog, "Update parents: \n")
        inTrunk =  mqc.plinkBase(input.in_bedset[0])
        outTrunk =  mqc.plinkBase(output.out_bedset[0])
        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--update-parents", input.recode,
                "--out", outTrunk ,
                "--make-bed"
        ])
        # Checking how many of the original samples we still have
        (kept, total) = mqc.countCsvDiff(outTrunk+".fam",inTrunk+".fam",[1,2,3])
        updated = total - kept

        mqc.log(runlog,f"Unchanged {kept} samples parents (NIND_NOTUPDATEDPAR) out of {total} (NIND_TOUPDATEPAR)\n")
        mqc.resultLog(output.results, f"Updated parental information: Updated {updated} samples with one ore more parentes out of {total}\n")

rule update_sex:
    input:
        in_bedset=rules.update_parents.output.out_bedset,
        recode = config['recode_sex']
    output:
        out_bedset = expand(str(base/'mod1-data-preparation/tmp/rawbed-sex-updated') + '{ext}', ext=['.bed','.bim','.fam']),
        results = report(resultPath/"sexUpdated.txt",category="Module 1 Data Conversion")
        
    run:
        mqc.log(runlog, "Update sex: \n")
        inTrunk =  mqc.plinkBase(input.in_bedset[0])
        outTrunk =  mqc.plinkBase(output.out_bedset[0])

        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--update-sex", input.recode,
                "--out", outTrunk ,
                "--make-bed"
        ])
        # Checking how many of the original samples we still have
        (kept,total) = mqc.countCsvDiff(outTrunk+".fam",inTrunk+".fam",[1,4])
        updated = total - kept
        mqc.log(runlog,f"Unchanged {kept} samples sex (NIND_NOTUPDATEDSEX) out of {total} (NIND_TOUPDATESEX)\n")
        mqc.resultLog(output.results, f"Sex update:  {updated} out of {total} had sex updated\n")
        

# Remove markers on snp table metrics
rule remove_markers_snptable:
    input:
        in_bedset = rules.update_sex.output.out_bedset,
        snptable=config['snptable']
    output:
        out_bedset=expand(str(base/'mod1-data-preparation/tmp/snptable-markers-excluded') + '{ext}', ext=['.bed','.bim','.fam']),
        results = report(resultPath/"snptable_removal.txt",category="Module 1 Data Conversion"),
        # in addition to the removal list, a *removal.txt.samples is produced, sporting only the sample-list
        removal= base / 'mod1-data-preparation/tmp/clustersep-removal.txt',
        removal_markers = base / 'mod1-data-preparation/tmp/clustersep-removal.samples.txt',
    message: "mod1 Remove markers by cluster metrics" 
    run:
        mqc.log(runlog, "Remove snp table metrics (CLUSTERSEP)\n")
        inTrunk =  mqc.plinkBase(input.in_bedset[0])
        outTrunk =  mqc.plinkBase(output.out_bedset[0])

        treshold = float(config['cluster_sep_thr'])
        # identify markers for removal on cluster separation
        (removed,total) = mqc.extractSampleList(input.snptable, 
                output.removal_markers, output.removal, 
                colName="Cluster Sep$", condition = "<", treshold = treshold, 
                cols = {0} )

        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--exclude", output.removal_markers,
                "--out", outTrunk ,
                "--make-bed"
        ])

        mqc.log(runlog, f"Removed {removed} markers (NSNP_CLUSTERSEP_LOST) out of {total} (BEFORE_SNPTABLE). Treshhold {treshold}\n")
        mqc.resultLog(output.results, f"Cluster separation: Removed {removed} markers out of {total}. Treshhold {treshold}\n")

        
rule remove_markers_gc_score:
    input:
        in_bedset = rules.remove_markers_snptable.output.out_bedset,
        snptable=config['snptable']
    output:
        out_bedset=expand(str(base/'mod1-data-preparation/tmp/gcscore_removal') + '{ext}', ext=['.bed','.bim','.fam']),
        # Note that there also will be a more complete result file called <results.full>
        results = report(resultPath/"gcscore10p_removal.yaml" ,category="Module 1 Data Conversion"),
        plot = report(resultPath/"gcscore10p_hist.png",category="Module 1 Data Conversion"),
        # in addition to the removal list, a *removal.txt.samples is produced, sporting only the sample-list
        removal= base / 'mod1-data-preparation/tmp/gc10_removal.txt',
        removal_markers = base / 'mod1-data-preparation/tmp/gc10_removal.samples.txt',
    run:
        mqc.log(runlog, "Removing markers based on 10% GC score\n")

        # Supersimple plot-test
        mqc.plotHist(input.snptable, output.plot, "10% GC")

        inTrunk =  mqc.plinkBase(input.in_bedset[0])
        outTrunk =  mqc.plinkBase(output.out_bedset[0])

        treshold = float(config['10%GC_score_thr'])
        # identify markers for removal 
        (removed,total) = mqc.extractSampleList(input.snptable, 
                output.removal_markers, output.removal, 
                colName="10% GC", condition = "<", treshold = treshold, 
                cols = {0} )

        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--exclude", output.removal_markers,
                "--out", outTrunk ,
                "--make-bed"
        ])

        dropouts = mqc.checkDropouts(inTrunk+".bim",outTrunk+".bim",cols = [0,1], fullList = True) 
        dropouts["QC test"] = "GC 10% score"
        dropouts["Description"] = "(Possibly Documentation/reference to the test)"
        dropouts["Threshold"] = treshold
        dropouts["Snakemake rule"] = "remove_markers_gc_score"
        # Writing the full output (samples included) to details directory
        outfile = output.results + ".removedSamples"
        with open(outfile, 'w') as file:
            yaml.dump(dropouts, file)
        mqc.log(runlog, f'Removed {dropouts["missingCount"]} markers(NSNP_GC_LOST) out of {dropouts["in"]} (NSNP_BEFORE_GC), leaving {dropouts["out"]} markers. Treshhold {treshold}\n')
        # A shorter result version, without samples
        dropouts["missing"] = []
        with open(output.results, 'w') as file:
            yaml.dump(dropouts, file)

rule remove_markers_aa_theta_dev:
    input:
        in_bedset = rules.remove_markers_gc_score.output.out_bedset,
        snptable=config['snptable']
    output:
        out_bedset=expand(str(base/'mod1-data-preparation/tmp/aa_theta_removal') + '{ext}', ext=['.bed','.bim','.fam']),
        results = report(resultPath/"aa_theta_removal.txt",category="Module 1 Data Conversion"),
        # in addition to the removal list, a *removal.txt.samples is produced, sporting only the sample-list
        removal= base / 'mod1-data-preparation/tmp/aa_theta_removal.txt',
        removal_markers = base / 'mod1-data-preparation/tmp/aa_theta_removal.samples.txt',
    run:
        mqc.log(runlog, "Removing markers based on AA theta dev\n")
        inTrunk =  mqc.plinkBase(input.in_bedset[0])
        outTrunk =  mqc.plinkBase(output.out_bedset[0])

        treshold = float(config['aa_theta_dev_thr'])
        # identify markers for removal 
        (removed,total) = mqc.extractSampleList(input.snptable, 
                output.removal_markers, output.removal, 
                colName="AA T Dev", condition = ">", treshold = treshold, 
                cols = {0} )

        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--exclude", output.removal_markers,
                "--out", outTrunk ,
                "--make-bed"
        ])

        # Checking how many markers we lost on this step
        (kept,total) = mqc.countCsvDiff(inTrunk+".bim",outTrunk+".bim",[0,1])
        lost = total - kept

        mqc.log(runlog, f"Removed {lost} markers (NSNP_AATHETADEV_LOST) out of {total} (NSNP_GC_LOST). Treshhold {treshold}\n")
        mqc.resultLog(output.results, f"AA theta dev: Removed {lost} markers out of {total}. Treshhold {treshold}\n")

# Remove duplicated/triplicated markers from dataset
# NB: removal list uses naming scheme from original bim file and has to be executed before
# conversion to rsID
rule remove_duplicate_markers:
    input:
        in_bedset = rules.remove_markers_aa_theta_dev.output.out_bedset,
        dup_remove_list=config['duplicated_markers_list']
    output:
        out_bedset=expand(str(base/'mod1-data-preparation/tmp/dup_markers_removed') + '{ext}', ext=['.bed','.bim','.fam']),
        results = report(resultPath/"dup_markers_removed.txt",category="Module 1 Data Conversion"),
    run:
        mqc.log(runlog, "Removing duplicate markers\n")
        inTrunk =  mqc.plinkBase(input.in_bedset[0])
        outTrunk =  mqc.plinkBase(output.out_bedset[0])

        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--exclude", input.dup_remove_list,
                "--out", outTrunk,
                "--make-bed"
        ])

        # Checking how many markers we lost on this step
        (kept,total) = mqc.countCsvDiff(inTrunk+".bim",outTrunk+".bim",[0,1])
        updated = total - kept
        nrDups = mqc.lineCount(input.dup_remove_list)

        mqc.log(runlog, f"Removed {updated} markers (NSNP_DUPLICATEMARKERS_LOST) out of {total}. File {input.dup_remove_list} contained {nrDups} lines/samples\n")
        mqc.resultLog(output.results, f"Duplicate markers: Removed {updated} markers out of {total}. File {input.dup_remove_list} contained {nrDups} lines\n")


# updates both rsid and removes chromosone 0
rule fix_technical_markers:
    input:
        in_bedset = rules.remove_duplicate_markers.output.out_bedset,
        recode_rsid=config['recode_rsid']
    output:
        out_bedset=expand(str(base/'mod1-data-preparation/tmp/chr0_removed') + '{ext}', ext=['.bed','.bim','.fam']),
        results = report(resultPath/"fix_technical_markers.txt",category="Module 1 Data Conversion")
    run:
        mqc.log(runlog, "Updating techincal markers (SNP->rsID + chromosome 0)\n")
        inTrunk =  mqc.plinkBase(input.in_bedset[0])
        outTrunk =  mqc.plinkBase(output.out_bedset[0])
        # since we will perform two operations, we need a temporary trunk
        rsidTrunk = str(Path(outTrunk).parent/"rsid_update")

        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--update-name", input.recode_rsid,
                "--out", rsidTrunk,
                "--make-bed"
        ])

        # Checking how many markers we updated on this step
        (kept,total) = mqc.countCsvDiff(inTrunk+".bim",rsidTrunk+".bim",[0,1])
        updated = total - kept
        mqc.log(runlog, f"rsid updates (NSNP_RSID_UPDATE_LOST): Updated {updated} markers out of {total} \n")
        mqc.resultLog(output.results, f"SNPs to rsID updates: Updated {updated} markers out of {total} \n")

        subprocess.run([plinklocal,
                "--bfile",rsidTrunk,
                "--not-chr", "0", 
                "--out", outTrunk,
                "--make-bed"
        ])

        # Checking how many markers we updated on this step
        (kept,total) = mqc.countCsvDiff(rsidTrunk+".bim",outTrunk+".bim",[0,1])
        updated = total - kept
        mqc.log(runlog, f"(NSNP_CHR0_LOST) Chromosone 0 removed: Removed {updated} markers out of {total}\n")
        mqc.resultLog(output.results, f"Chromosone 0 removed: Removed {updated} markers out of {total}\n",mode="a")

