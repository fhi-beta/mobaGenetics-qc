# Rule updates raw bedset with biobank provided pedigree information and gender
# Sample IDs are updated to SentrixIDs

rule_stem ='remove_chr0'
rule remove_chr0:
    input:
        bedset=expand(config['raw_bed_stem'] + '{ext}', ext=['.bed','.bim','.fam']),
    output:
        bedset=expand(str(tmpMod1/rule_stem)
                          + '{ext}', ext=['.bed','.bim','.fam']),
        results = report((resultPath/rule_stem).with_suffix(".yaml"),
                         category="Module 1 Data preparation",
                         caption=(resultPath/rule_stem).with_suffix(".rst"))

    run:
        item_type = rule_info[rule]["rule type"]
        mqc.log(runlog, "Updating techincal markers (Removing chromosome 0)\n")
        inTrunk =  mqc.plinkBase(input.bedset[0])
        outTrunk =  mqc.plinkBase(output.bedset[0])

        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--not-chr", "0", 
                "--out", outTrunk,
                "--make-bed"
        ])

        # Checking how many markers/chromosone 0 we removed  on this step
        # We turn of warning here as we know there might be duplicate markers to check for later
        dropouts = mqc.checkUpdates(inTrunk+".bim", outTrunk+".bim", cols=[0,1,3,4,5], indx=1,
                                    sanityCheck="none", fullList=True, ) 

        dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
        dropouts["Rule"] = rule

        mqc.saveYamlResults(output.results, dropouts)
        mqc.log(runlog, f'(NSNP_CHR0_LOST) Removed {dropouts["actionTakenCount"]} chromosone 0 out of {dropouts["in"]}, leaving {dropouts["out"]} markers\n')



rule_stem ='sampleIdUpdated'
rule update_sample_ids:
    input:
        bedset=rules.remove_chr0.output.bedset,
        recode=config['recode_ids']
    output:
        bedset=expand(str(tmpMod1/rule_stem) + '{ext}', ext=['.bed','.bim','.fam']),
        results = report((resultPath/rule_stem).with_suffix(".yaml"),
                         category="Module 1 Data preparation",
                         caption=(resultPath/rule_stem).with_suffix(".rst"))
    run:
        item_type = rule_info[rule]["rule type"]
        mqc.log(runlog, "*** Module 1 Data preparation ***\n")
        mqc.log(runlog, "Updating sample ids: \n")
        inTrunk = mqc.plinkBase(input.bedset[0])
        outTrunk = mqc.plinkBase(output.bedset[0])


        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--update-ids", input.recode,
                "--out", outTrunk ,
                "--make-bed"        ])
        updated = mqc.checkUpdates(inTrunk+".fam",outTrunk+".fam",cols=[0,1], indx=1,
                                   sanityCheck="updated", fullList=True, mapFile=input.recode, mapIndx=1) 
        updated.update(rule_info[rule])   # Metainfo and documentation about the rule
        updated["Rule"] = rule
        mqc.saveYamlResults(output.results, updated)
        mqc.log(runlog,f'Sample id: Updated {updated["actionTakenCount"]} samples (NIND_NOTUPDATEDID) out of {updated["in"]} (NIND_TOUPDATEID)\n')

rule_stem = 'parents-updated'
rule update_parents:
    input:
        bedset=rules.update_sample_ids.output.bedset,
        recode=config['recode_parents']
    output:
        bedset=expand(str(tmpMod1/rule_stem) + '{ext}', ext=['.bed','.bim','.fam']),
        results = report((resultPath/rule_stem).with_suffix(".yaml"),
                         category="Module 1 Data preparation",
                         caption=(resultPath/rule_stem).with_suffix(".rst"))
    run:
        item_type = rule_info[rule]["rule type"]    
        mqc.log(runlog, "Update parents: \n")
        inTrunk =  mqc.plinkBase(input.bedset[0])
        outTrunk =  mqc.plinkBase(output.bedset[0])
        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--update-parents", input.recode,
                "--out", outTrunk ,
                "--make-bed"
        ])
        updated= mqc.checkUpdates(inTrunk+".fam",outTrunk+".fam",cols=[1,2,3], sanityCheck = "updated",
                                   fullList = True, mapFile=input.recode)
        updated.update(rule_info[rule])   # Metainfo and documentation about the rule
        updated["Rule"] = rule

        mqc.saveYamlResults(output.results, updated)
        mqc.log(runlog,f'Sample id: Updated {updated["actionTakenCount"]} samples (NIND_NOTUPDATEDPAR) out of {updated["in"]} (NIND_TOUPDATEPAR)\n')


rule_stem = 'sex-updated'
rule update_sex:
    input:
        bedset=rules.update_parents.output.bedset,
        recode = config['recode_sex']
    output:
        bedset = expand(str(tmpMod1/rule_stem) + '{ext}', ext=['.bed','.bim','.fam']),
        results = report((resultPath/rule_stem).with_suffix(".yaml"),
                         category="Module 1 Data preparation",
                         caption=(resultPath/rule_stem).with_suffix(".rst"))        
        
    run:
        item_type = rule_info[rule]["rule type"]
        mqc.log(runlog, "Update sex: \n")
        inTrunk =  mqc.plinkBase(input.bedset[0])
        outTrunk =  mqc.plinkBase(output.bedset[0])

        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--update-sex", input.recode,
                "--out", outTrunk ,
                "--make-bed"
        ])
        # Checking how many of the original samples we still have
        updated = mqc.checkUpdates(inTrunk+".fam",outTrunk+".fam",cols = [1,4], indx=1, sanityCheck = "updated",
                                   fullList = True, mapFile=input.recode, mapIndx=1)
        updated.update(rule_info[rule])   # Metainfo and documentation about the rule
        updated["Rule"] = rule


        mqc.saveYamlResults(output.results, updated)
        mqc.log(runlog,f'Sex updated: Updated {updated["actionTakenCount"]} samples (NIND_NOTUPDATEDPAR) out of {updated["in"]} (NIND_TOUPDATEPAR)\n')


# Check for duplicate markers, and remove all but one (keep best callrate)
# The code here is copied and reused in remove_dup_markers_1kg
# This rule could be smarter in the case no duplicate markers are found
rule_stem = 'remove_duplicate_markers'
rule remove_duplicate_markers:
    input:
        bedset = rules.update_sex.output.bedset,
    output:
        bedset=expand(str(tmpMod1/rule_stem) + '{ext}', ext=['.bed','.bim','.fam']),
        excludeList = (tmpMod1/rule_stem).with_suffix(".txt"),
        resultDetails = (resultPath/rule_stem).with_suffix(".csv"),
        plink_dup_list = (tmpMod1/rule_stem).with_suffix(".plinkdups"),
        results = report((resultPath/rule_stem).with_suffix(".yaml"),
                         category="Module 1 Data preparation",
                         caption=(resultPath/rule_stem).with_suffix(".rst"))
    run:
        item_type = rule_info[rule]["rule type"]
        inTrunk = mqc.plinkBase(input.bedset[0])
        outTrunk = mqc.plinkBase(output.bedset[0])
        callRateTrunk = mqc.plinkBase(output.excludeList)
        # Create a plink.dupvar file
        subprocess.run([plinklocal,
                        "--bfile",inTrunk,
                        "--list-duplicate-vars"
        ])
        # Unfortunately, the result is placed in cwd, we want it with the other tmp files 
        dup_file_old = Path(os.getcwd())/'plink.dupvar'
        dup_file_old.rename(output.plink_dup_list)
        dup_file = output.plink_dup_list
        
        subprocess.run([plinklocal,
                        "--bfile", inTrunk,
                        "--out", callRateTrunk,
                        "--missing"
        ])

        mqc.create_exclude_list(dup_file, callRateTrunk+".lmiss",
                                output.resultDetails, output.excludeList)

        subprocess.run([plinklocal,
                        "--bfile",inTrunk,
                        "--exclude", output.excludeList,
                        "--out", outTrunk,
                        "--make-bed"
        ])
        # We are here checking only the snp-id. It should be unique
        dropouts = mqc.checkUpdates(inTrunk+".bim",outTrunk+".bim",cols = [1], sanityCheck = "removal",
                                    fullList = False) 
        dropouts["Detailed results"] = output.resultDetails
        dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
        dropouts["Rule"] = rule
        mqc.saveYamlResults(output.results, dropouts)
        mqc.log(runlog, f'Due to duplicate markers, removed {dropouts["actionTakenCount"]} markers out of {dropouts["in"]}, leaving {dropouts["out"]} markers\n')


# Remove markers on snp table metrics
rule_stem = 'clustersep_removal'
rule remove_markers_cluster_sep:
    input:
        bedset = rules.remove_duplicate_markers.output.bedset,
        snptable=config['snptable']
    output:
        bedset=expand(str(tmpMod1/rule_stem) + '{ext}', ext=['.bed','.bim','.fam']),
        results = report((resultPath/rule_stem).with_suffix(".yaml"),
                         category="Module 1 Data preparation",
                         caption=(resultPath/rule_stem).with_suffix(".rst")),
        plot = report((resultPath/rule_stem).with_suffix(".png"),category="Module 1 Data preparation",
                                 caption=(resultPath/rule_stem).with_suffix(".rst")),
        # in addition to the removal list, a *removal.txt.samples is produced, sporting only the sample-list
        removal= (tmpMod1/rule_stem).with_suffix(".txt"), 
        removal_markers = (tmpMod1/rule_stem).with_suffix(".markers.txt"),
    params:
        treshold = config['cluster_sep_thr']
    message: "mod1 Remove markers by cluster metrics" 
    run:
        item_type = rule_info[rule]["rule type"]
        mqc.log(runlog, "Remove snp table metrics (CLUSTERSEP)\n")
        inTrunk =  mqc.plinkBase(input.bedset[0])
        outTrunk =  mqc.plinkBase(output.bedset[0])

        # identify markers for removal on cluster separation
        (removed,total) = mqc.extractSampleList(input.snptable, 
                output.removal_markers, output.removal, 
                colName=config['cluster_sep_col_name'], condition = "<", treshold = params.treshold, 
                                                        cols = {0}, sep='\t' )

        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--exclude", output.removal_markers,
                "--out", outTrunk ,
                "--make-bed"
        ])

        dropouts = mqc.checkUpdates(inTrunk+".bim",outTrunk+".bim",cols = [0,1],
                                    sanityCheck = "removal", fullList = True)
        dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
        dropouts["Treshold"] = params.treshold
        dropouts["Rule"] = rule
        mqc.saveYamlResults(output.results, dropouts)
        
        mqc.log(runlog, f'Removed {dropouts["actionTakenCount"]} markers(NSNP_CLUSTERSEP_LOST) out of {dropouts["in"]} (BEFORE_SNPTABLE), leaving {dropouts["out"]} markers. Treshhold {params.treshold}\n')
        # The following has a huge potential for speedup (using round as in mqc.dotplot()
        mqc.plot_point_and_line(dropouts, input.snptable, output.plot,
                                config["cluster_sep_col_name"], separator='\t',
                                ylabel="Separation", invert=False)

        
rule_stem = 'gcscore_removal'
rule remove_markers_gc_score:
    input:
        bedset = rules.remove_markers_cluster_sep.output.bedset,
        snptable=config['snptable']
    output:
        bedset=expand(str(tmpMod1/rule_stem) + '{ext}', ext=['.bed','.bim','.fam']),
        results = report((resultPath/rule_stem).with_suffix(".yaml"),
                         category="Module 1 Data preparation",
                         caption=(resultPath/rule_stem).with_suffix(".rst")),
        plot = report((resultPath/rule_stem).with_suffix(".png"),category="Module 1 Data preparation",
                                 caption=(resultPath/rule_stem).with_suffix(".rst")),
        # in addition to the removal list, a *removal.txt.samples is produced, sporting only the sample-list
        removal= (tmpMod1/rule_stem).with_suffix(".txt"),
        removal_markers = (tmpMod1/rule_stem).with_suffix(".markers.txt"),
    params:
        treshold = config['10%_GC_score_thr']
    run:
        item_type = rule_info[rule]["rule type"]     
        mqc.log(runlog, "Removing markers based on 10% GC score\n")

        inTrunk =  mqc.plinkBase(input.bedset[0])
        outTrunk =  mqc.plinkBase(output.bedset[0])
        # identify markers for removal 
        (removed,total) = mqc.extractSampleList(input.snptable, 
                output.removal_markers, output.removal, 
                colName=config["10%_GC_score_col_name"], condition = "<", treshold = params.treshold, 
                                                cols = {0}, sep ='\t' )

        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--exclude", output.removal_markers,
                "--out", outTrunk ,
                "--make-bed"])
    

        dropouts = mqc.checkUpdates(inTrunk+".bim",outTrunk+".bim",cols = [0,1], sanityCheck = "removal", fullList = True) 
        dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
        dropouts["Treshold"] = params.treshold
        dropouts["Rule"] = rule
        mqc.saveYamlResults(output.results, dropouts)

        mqc.log(runlog, f'Removed {dropouts["actionTakenCount"]} markers(NSNP_GC_LOST) out of {dropouts["in"]} (NSNP_BEFORE_GC), leaving {dropouts["out"]} markers. Treshhold {params.treshold}\n')

        mqc.plot_point_and_line(dropouts, input.snptable, output.plot,
                                config["10%_GC_score_col_name"], separator='\t',
                                ylabel="10% GC Score", invert=False)


rule_stem = 'aa_theta_removal'
rule remove_markers_aa_theta_dev:
    input:
        bedset = rules.remove_markers_gc_score.output.bedset,
        snptable=config['snptable']
    output:
        bedset=expand(str(tmpMod1/rule_stem) + '{ext}', ext=['.bed','.bim','.fam']),
        results = report((resultPath/rule_stem).with_suffix(".yaml"),
                         category="Module 1 Data preparation",
                         caption=(resultPath/rule_stem).with_suffix(".rst")),
        plot = report((resultPath/rule_stem).with_suffix(".png"),category="Module 1 Data preparation",
                                 caption=(resultPath/rule_stem).with_suffix(".rst")),
        # in addition to the removal list, a *removal.txt.samples is produced, sporting only the sample-list
        removal= (tmpMod1/rule_stem).with_suffix(".txt"),
        removal_markers = (tmpMod1/rule_stem).with_suffix(".markers.txt"),
    params:
        treshold = config['aa_theta_dev_thr']
    run:
        item_type = rule_info[rule]["rule type"]
        mqc.log(runlog, "Removing markers based on AA theta dev\n")
        inTrunk =  mqc.plinkBase(input.bedset[0])
        outTrunk =  mqc.plinkBase(output.bedset[0])

        # identify markers for removal 
        (removed,total) = mqc.extractSampleList(input.snptable, 
                output.removal_markers, output.removal, 
                colName=config["aa_theta_dev_col_name"], condition = ">", treshold = params.treshold, 
                                                cols = {0},  sep ='\t')

        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--exclude", output.removal_markers,
                "--out", outTrunk ,
                "--make-bed"
        ])


        dropouts = mqc.checkUpdates(inTrunk+".bim",outTrunk+".bim",cols = [0,1], sanityCheck = "removal", fullList = True)
        dropouts.update(rule_info[rule])   # Metainfo and documentation about the rule
        dropouts["Treshold"] = params.treshold
        dropouts["Rule"] = rule

        mqc.saveYamlResults(output.results, dropouts)
        mqc.log(runlog, f'Removed {dropouts["actionTakenCount"]} markers(NSNP_AATHETADEV_LOST) out of {dropouts["in"]} (NSNP_GC_LOST), leaving {dropouts["out"]} markers. Treshhold {params.treshold}\n')
                     
        mqc.plot_point_and_line(dropouts, input.snptable, output.plot,
                                config["aa_theta_dev_col_name"], separator='\t',
                                ylabel="AA-\u03B8 deviation", invert=False)



# Note that for historical reason, this is placed at the end of module1, since we earlier could not do this
# due to the 'duplicate marker' being a list. The list used old ids.
# It would be clearner now -after testing, to do this early in the pipe ...
# Should you move this, make sure the first mod2 rule gets new input ...
rule_stem ='update_rsids'
rule update_rsids:
    input:
        bedset=rules.remove_markers_aa_theta_dev.output.bedset,
        recode=config['recode_rsid']   # some business logic will be imposed here, producing ouput.recode
    output:
        recode = (tmpMod1/rule_stem).with_suffix(".txt"),
        bedset=expand(str(tmpMod1/rule_stem) + '{ext}', ext=['.bed','.bim','.fam']),
        results = report((resultPath/rule_stem).with_suffix(".yaml"),
                         category="Module 1 Data preparation",
                         caption=(resultPath/rule_stem).with_suffix(".rst"))
    run:
        item_type = rule_info[rule]["rule type"]
        mqc.log(runlog, "*** Module 1 Data preparation ***\n")
        mqc.log(runlog, "Updating rsids: \n")
        inTrunk = mqc.plinkBase(input.bedset[0])
        outTrunk = mqc.plinkBase(output.bedset[0])

        mqc.fix_rsid_map(input.recode, output.recode)
        # Note: We don't care about whether there is a header or not in the recode file as
        # long as the headers do not match ids ...
        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--update-name", output.recode, 
                "--out", outTrunk ,
                "--make-bed" ])
        # Comparing only the rsid field, it will not be unique after the remap
        # See rules.yaml for more info
        updated = mqc.checkUpdates(inTrunk+".bim",outTrunk+".bim",cols=[1], indx=1,
                                   sanityCheck="none", fullList=True, mapFile=output.recode, mapIndx=1) 
        updated.update(rule_info[rule])   # Metainfo and documentation about the rule
        updated["Rule"] = rule
        mqc.saveYamlResults(output.results, updated)
        mqc.log(runlog,f'Marker id: Updated {updated["actionTakenCount"]} markers (RSID_UPDATE) out of {updated["in"]} (NIND_TOUPDATEID)\n')
