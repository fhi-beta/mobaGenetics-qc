# Rule updates raw bedset with biobank provided pedigree information and gender
# Sample IDs are updated to SentrixIDs
import sys
sys.path.append('../lib')  # in order to find our local packages
import mobaQcTools as mqc  # local moba package

rule update_sample_ids:
    input:
        in_bedset=expand(config['raw_bed_stem'] + '{ext}', ext=['.bed','.bim','.fam']),
        recode=config['recode_ids']
    output:
        out_bedset=expand(str(base  / 'mod1-data-preparation/tmp/rawbed-id-updated') + '{ext}', ext=['.bed','.bim','.fam']),
        results = report(resultPath/"sampleIdUpdated.txt",category="Module 1 Data Conversion")
    run:
        mqc.log(runlog, "*** Module 1 Data Conversion ***\n")
        mqc.log(runlog, "Updating sample ids: \n")
        inTrunk = mqc.plinkBase(input.in_bedset[0])
        outTrunk = mqc.plinkBase(output.out_bedset[0])


        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--update-ids", input.recode,
                "--out", outTrunk ,
                "--make-bed"        ])

        (kept, total) = mqc.countCsvDiff(outTrunk+".fam",inTrunk+".fam",[0,1])
        mqc.log(runlog,f"Unchanged {kept} samples parents (NIND_NOTUPDATEDID) out of {total} (NIND_TOUPDATEID)\n")
        mqc.resultLog(output.results, f"Unchanged {kept} samples out of {total}\n")

rule update_parents:
    input:
        in_bedset=rules.update_sample_ids.output.out_bedset,
        recode=config['recode_parents']
    output:
        out_bedset=expand(str(base/'mod1-data-preparation/tmp/rawbed-parents-updated') + '{ext}', ext=['.bed','.bim','.fam']),
        results = report(resultPath/"parentsUpdated.txt",category="Module 1 Data Conversion")
    run:
        mqc.log(runlog, "Update parents: \n")
        inTrunk =  mqc.plinkBase(input.in_bedset[0])
        outTrunk =  mqc.plinkBase(output.out_bedset[0])
        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--update-parents", input.recode,
                "--out", outTrunk ,
                "--make-bed"
        ])
        # Checking how many of the original samples we still have
        (kept, total) = mqc.countCsvDiff(outTrunk+".fam",inTrunk+".fam",[1,2,3])
        mqc.log(runlog,f"Unchanged {kept} samples parents (NIND_NOTUPDATEDPAR) out of {total} (NIND_TOUPDATEPAR)\n")
        mqc.resultLog(output.results, f"Unchanged {kept} samples out of {total}\n")

rule update_sex:
    input:
        in_bedset=rules.update_parents.output.out_bedset,
        recode = config['recode_sex']
    output:
        out_bedset = expand(str(base/'mod1-data-preparation/tmp/rawbed-sex-updated') + '{ext}', ext=['.bed','.bim','.fam']),
        results = report(resultPath/"sexUpdated.txt",category="Module 1 Data Conversion")
        
    run:
        mqc.log(runlog, "Update sex: \n")
        inTrunk =  mqc.plinkBase(input.in_bedset[0])
        outTrunk =  mqc.plinkBase(output.out_bedset[0])

        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--update-sex", input.recode,
                "--out", outTrunk ,
                "--make-bed"
        ])
        # Checking how many of the original samples we still have
        (kept,total) = mqc.countCsvDiff(outTrunk+".fam",inTrunk+".fam",[1,4])
        mqc.log(runlog,f"Unchanged {kept} samples sex (NIND_NOTUPDATEDSEX) out of {total} (NIND_TOUPDATESEX)\n")
        mqc.resultLog(output.results, f"Unchanged {kept} samples out of {total}\n")
        

# Remove markers on snp table metrics
rule remove_markers_snptable:
    input:
        in_bedset = rules.update_sex.output.out_bedset,
        snptable=config['snptable']
    output:
        out_bedset=expand(str(base/'mod1-data-preparation/tmp/snptable-markers-excluded') + '{ext}', ext=['.bed','.bim','.fam']),
        results = report(resultPath/"snptable_removal.txt",category="Module 1 Data Conversion"),
        # in addition to the removal list, a *removal.txt.samples is produced, sporting only the sample-list
        removal= base / 'mod1-data-preparation/tmp/clustersep-removal.txt',
        removal_samples = base / 'mod1-data-preparation/tmp/clustersep-removal.samples.txt',
    message: "mod1 Remove markers by cluster metrics" 
    run:
        mqc.log(runlog, "Remove snp table metrics (CLUSTERSEP)\n")
        inTrunk =  mqc.plinkBase(input.in_bedset[0])
        outTrunk =  mqc.plinkBase(output.out_bedset[0])

        treshold = float(config['cluster_sep_thr'])
        # identify markers for removal on cluster separation
        (removed,total) = mqc.extractSampleList(input.snptable, 
                output.removal_samples, output.removal, 
                colName="Cluster Sep$", condition = "<", treshold = treshold, 
                cols = {0} )

        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--exclude", output.removal_samples,
                "--out", outTrunk ,
                "--make-bed"
        ])

        mqc.log(runlog, f"Removed {removed} samples (NSNP_CLUSTERSEP_LOST) out of {total} (BEFORE_SNPTABLE). Treshhold {treshold}\n")
        mqc.resultLog(output.results, f"Cluster separation: Removed {removed} samples out of {total}. Treshhold {treshold}\n")

        
rule remove_markers_gc_score:
    input:
        in_bedset = rules.remove_markers_snptable.output.out_bedset,
        snptable=config['snptable']
    output:
        out_bedset=expand(str(base/'mod1-data-preparation/tmp/gcscore_removal') + '{ext}', ext=['.bed','.bim','.fam']),
        results = report(resultPath/"gcscore10p_removal.txt",category="Module 1 Data Conversion"),
        # in addition to the removal list, a *removal.txt.samples is produced, sporting only the sample-list
        removal= base / 'mod1-data-preparation/tmp/gc10_removal.txt',
        removal_samples = base / 'mod1-data-preparation/tmp/gc10_removal.samples.txt',
    run:
        mqc.log(runlog, "Removing markers based on 10% GC score\n")
        inTrunk =  mqc.plinkBase(input.in_bedset[0])
        outTrunk =  mqc.plinkBase(output.out_bedset[0])

        treshold = float(config['10%GC_score_thr'])
        # identify markers for removal 
        (removed,total) = mqc.extractSampleList(input.snptable, 
                output.removal_samples, output.removal, 
                colName="10% GC", condition = "<", treshold = treshold, 
                cols = {0} )

        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--exclude", output.removal_samples,
                "--out", outTrunk ,
                "--make-bed"
        ])

        # Checking how many markers we lost on this step
        (kept,total) = mqc.countCsvDiff(inTrunk+".bim",outTrunk+".bim",[0,1])
        lost = total - kept

        mqc.log(runlog, f"Removed {lost} samples (NSNP_GC_LOST) out of {total} (NSNP_BEFORE_GC). Treshhold {treshold}\n")
        mqc.resultLog(output.results, f"10% GC Score: Removed {lost} samples out of {total}. Treshhold {treshold}\n")

        

        # # identify markers for removal on AA theta dev
        # awk -F '\t' 'NR==1{{for(i=1; i<=NF; i++){{ if($i~/AA T Dev/){{ col=i}}}}}} $col>0.04{{print $1, $col}}' {input.snptable} > {output.aa_theta_dev_removal}
        # cut -f1 -d' ' {output.aa_theta_dev_removal} > {params.tmp_path}/aa_theta_dev_removal_list
	# plink_exclude_markers \
	# 	{params.tmp_path}/snptable_gc \
	# 	{params.tmp_path}/aa_theta_dev_removal_list \
	# 	{params.out_bedset} \
	# 	"AATHETADEV"


rule remove_markers_aa_theta_dev:
    input:
        in_bedset = rules.remove_markers_gc_score.output.out_bedset,
        snptable=config['snptable']
    output:
        out_bedset=expand(str(base/'mod1-data-preparation/tmp/aa_theta_removal') + '{ext}', ext=['.bed','.bim','.fam']),
        results = report(resultPath/"aa_theta_removal.txt",category="Module 1 Data Conversion"),
        # in addition to the removal list, a *removal.txt.samples is produced, sporting only the sample-list
        removal= base / 'mod1-data-preparation/tmp/aa_theta_removal.txt',
        removal_samples = base / 'mod1-data-preparation/tmp/gc10_removal.samples.txt',

        # aa_theta_dev_removal=base / 'mod1-data-preparation/tmp/aa-theta-dev-removal.txt',
	# excl_snps=base / 'mod1-data-preparation/rep/' / 'exclusions_clustering_snp.txt',
	# stvars=base / 'mod1-data-preparation/rep/' / 'storedvars_clustering.txt'
    run:
        mqc.log(runlog, "Removing markers based on AA theta dev\n")
        inTrunk =  mqc.plinkBase(input.in_bedset[0])
        outTrunk =  mqc.plinkBase(output.out_bedset[0])

        treshold = float(config['aa_theta_dev_thr'])
        # identify markers for removal 
        (removed,total) = mqc.extractSampleList(input.snptable, 
                output.removal_samples, output.removal, 
                colName="AA T Dev", condition = ">", treshold = treshold, 
                cols = {0} )

        subprocess.run([plinklocal,
                "--bfile",inTrunk,
                "--exclude", output.removal_samples,
                "--out", outTrunk ,
                "--make-bed"
        ])

        # Checking how many markers we lost on this step
        (kept,total) = mqc.countCsvDiff(inTrunk+".bim",outTrunk+".bim",[0,1])
        lost = total - kept

        mqc.log(runlog, f"Removed {lost} samples (NSNP_AATHETADEV_LOST) out of {total} (NSNP_GC_LOST). Treshhold {treshold}\n")
        mqc.resultLog(output.results, f"AA theta dev: Removed {lost} samples out of {total}. Treshhold {treshold}\n")



# Remove duplicated/triplicated markers from dataset
# NB: removal list uses naming scheme from original bim file and has to be executed before
# # conversion to rsID
# rule remove_duplicate_markers:
#     input:
#         in_bedset=expand(base + 'mod1-data-preparation/tmp/snptable-markers-excluded' + '{ext}', ext=['.bed','.bim','.fam']),
#         dup_remove_list=config['duplicated_markers_list']
#     output:
#         out_bedset=expand(base + 'mod1-data-preparation/tmp/dup-markers-removed' + '{ext}', ext=['.bed','.bim','.fam']),
# 	excl_snps=base + 'mod1-data-preparation/rep/' + 'exclusions_duplicates_snp.txt',
# 	stvars=base + 'mod1-data-preparation/rep/' + 'storedvars_duplicates.txt'
#     params:
#         in_bedset=base + 'mod1-data-preparation/tmp/snptable-markers-excluded',
#         out_bedset=base + 'mod1-data-preparation/tmp/dup-markers-removed',
#         runlog=runlog
#     message: "mod1 Remove duplicated/triplicated markers from dataset"
#     shell:
#         """
# 	set -e
# 	plinklocal={plinklocal}

# 	PIPELINELOG={runlog}
# 	STOREDVARS={output.stvars}
# 	EXCLUSIONSS={output.excl_snps}

# 	source {libdir}/functions.sh

#         log "REMOVE DUPLICATE MARKERS"
        
#         # identify duplicate markers for removal
#         DUP_LIST_N=`wc -l {input.dup_remove_list}`
#         log "Number of markers in duplicate marker removal list: ${{DUP_LIST_N}}"
        
#         # remove markers
#         $plinklocal \
#             --bfile {params.in_bedset} \
#             --exclude {input.dup_remove_list} \
#             --make-bed \
#             --out {params.out_bedset} 

# 	report_lostsnps {params.in_bedset} {params.out_bedset} "DUPLICATEMARKERS"
#         """

# rule fix_technical_markers:
#     input:
#         in_bedset=expand(base + 'mod1-data-preparation/tmp/dup-markers-removed' + '{ext}', ext=['.bed','.bim','.fam']),
#         recode_rsid=config['recode_rsid']
#     output:
#         out_bedset=expand(base + 'mod1-data-preparation/tmp/chr0-removed' + '{ext}', ext=['.bed','.bim','.fam']),
# 	excl_snps=base + 'mod1-data-preparation/rep/' + 'exclusions_markerfix_snp.txt',
# 	stvars=base + 'mod1-data-preparation/rep/' + 'storedvars_markerfix.txt'
#     params:
#         in_bedset=base + 'mod1-data-preparation/tmp/dup-markers-removed',
#         out_bedset=base + 'mod1-data-preparation/tmp/chr0-removed',
# 	outdir=base + 'mod1-data-preparation/tmp'
#     message: "mod1 fix_technical_markers"
#     shell:
#         """
# 	set -e
# 	plinklocal={plinklocal}

# 	PIPELINELOG={runlog}
# 	STOREDVARS={output.stvars}
# 	EXCLUSIONSS={output.excl_snps}

# 	source {libdir}/functions.sh

# 	report_nsnps {params.in_bedset} "BEFORE_RSID_UPDATE"
	
# 	# Updates marker info to Illumina provided rsID conversion file
#         log "UPDATE RSIDs"
#         $plinklocal \
#             --bfile {params.in_bedset} \
#             --update-name {input.recode_rsid} \
#             --make-bed \
#             --out {params.outdir}/rsid-updated
	
# 	report_lostsnps {params.in_bedset} {params.outdir}/rsid-updated "RSID_UPDATE"

# 	# Remove technical (chr 0) markers
#         log "REMOVE TECHNICAL MARKERS (CHR 0)"
#         $plinklocal \
#             --bfile {params.outdir}/rsid-updated \
#             --not-chr 0 \
#             --make-bed \
#             --out {params.out_bedset}

# 	report_lostsnps {params.outdir}/rsid-updated {params.out_bedset} "CHR0"
#         """
