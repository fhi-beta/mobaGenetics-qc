batches = batches_debug # remove in prod!
tmpMod6str = str(tmpMod6)
def get_vcf_batch_files_to_merge(wildcards):
    return [f"{tmpMod6str}/{batch}/{wildcards.number_of_samples}_samples/mod6_impute.chr{wildcards.chr}.imputed.vcf.gz" for batch in batches]

def get_index_files_for_chr(wildcards):
    return [f"{tmpMod6str}/{batch}/{wildcards.number_of_samples}_samples/mod6_impute.chr{wildcards.chr}.imputed.vcf.gz.tbi" for batch in batches]

rule mod7_merge_batches:
    input:
        vcfs = get_vcf_batch_files_to_merge,
        index = get_index_files_for_chr
    output:
        merged_vcf = str(tmpMod7 / "{number_of_samples}_samples" / "mod7_merge_batches_chr{chr}.vcf.gz")
    log:
        # str(tmpMod7 / "{number_of_samples}_samples" / "mod7_merge_batches.log")
        str(tmpMod7 / "{number_of_samples}_samples" / "mod7_merge_batches_chr{chr}.log")
    conda:
        "envs/bcf_tabix.yaml"
    shell:
        """
        echo "Output file: {output.merged_vcf}" > {log}
        echo "Merge started $(date '+%Y-%m-%d %H:%M:%S')" >> {log}
        bcftools merge {input.vcfs} -o {output.merged_vcf}
        echo "Merge finished $(date '+%Y-%m-%d %H:%M:%S')" >> {log}
        echo "Merged files:" >> {log}
        for file in {input.vcfs}; do echo "$file" >> {log}; done
        """

rule mod7_index_batch_merge:
    input:
        merged_vcf = rules.mod7_merge_batches.output.merged_vcf
    output:
        index = str(tmpMod7 / "{number_of_samples}_samples" / "mod7_merge_batches_chr{chr}.vcf.gz.tbi"),
    conda:
        "envs/bcf_tabix.yaml"
    shell:
        """
        tabix -p vcf {input.merged_vcf}
        """


rule mod7_convert_chrs_to_pgen:
    input:
        merged_vcf = rules.mod7_merge_batches.output.merged_vcf,
        index = rules.mod7_index_batch_merge.output.index
    output:
        pgensets = multiext(str(tmpMod7 / "{number_of_samples}_samples" / "mod7_convert_chrs_to_pgen.chr{chr}"), ".pgen", ".pvar", ".psam")
    threads: 2
    run:
        outTrunk = mqc.plinkBase(output.pgensets[0])
        subprocess.run(
            [
                plink2local,
                "--vcf", input.merged_vcf,
                "--make-pgen",
                "--out", outTrunk
            ]
        )

chrs = chrs_debug # remove in prod!
def chr_pgens_to_merge(wildcards):
    tmpMod7str = str(tmpMod7)
    return [f"{tmpMod7str}/{wildcards.number_of_samples}_samples/mod7_convert_chrs_to_pgen.chr{chr}.pgen" for chr in chrs]

batches = batches_debug # remove in prod!
def get_pre_imputation_fam_files(wildcards):
    tmpMod5str = str(tmpMod5)
    return [f"{tmpMod5str}/{batch}/{wildcards.number_of_samples}_samples/mod5_output.fam" for batch in batches]

rule mod7_merge:
    input:
        pgens = chr_pgens_to_merge
    output:
        pgenset = multiext(str(tmpMod7 / "{number_of_samples}_samples" / "mod7_output"), ".pgen", ".pvar", ".psam")
    run:
        out_trunk = mqc.plinkBase(output.pgenset[0])
        mqc.merge_pgensets(input.pgens, out_trunk, plink2local)
        new_psam = output.pgenset[2]
        original_psam = outTrunk + ".original.psam"
        os.rename(new_psam, original_psam)
        mqc.restore_family_information(input.fam_files, batches, original_psam, new_psam)



# chrs = chrs_debug # remove in prod!
# tmpMod7str = str(tmpMod7)
# def get_chr_vcf_files_to_merge(wildcards):
#     return [f"{tmpMod7str}/{wildcards.number_of_samples}_samples/mod7_merge_batches_chr{chr}.vcf.gz" for chr in chrs]

# def get_chr_index_files(wildcards):
#     return [f"{tmpMod7str}/{wildcards.number_of_samples}_samples/mod7_merge_batches_chr{chr}.vcf.gz.tbi" for chr in chrs]
    
# rule mod7_merge_chrs:
#     input:
#         chr_vcfs = get_chr_vcf_files_to_merge,
#         index = get_chr_index_files
#     log:
#         str(tmpMod7 / "{number_of_samples}_samples" / "mod7_merge_chrs.log")
#     output:
#         merged_vcf = str(tmpMod7 / "{number_of_samples}_samples" / "mod7_merge_chrs.vcf.gz")
#     conda:
#         "envs/bcf_tabix.yaml"
#     shell:
#         """
#         echo "Output file: {output.merged_vcf}" > {log}
#         echo "Merge started $(date '+%Y-%m-%d %H:%M:%S')" >> {log}
#         bcftools concat {input.chr_vcfs} -o {output.merged_vcf}
#         echo "Merge finished $(date '+%Y-%m-%d %H:%M:%S')" >> {log}
#         echo "Merged files:" >> {log}
#         for file in {input.chr_vcfs}; do echo "$file" >> {log}; done
#         """
# batches = batches_debug # remove in prod!
# def get_pre_imputation_fam_files(wildcards):
#     tmpMod5str = str(tmpMod5)
#     return [f"{tmpMod5str}/{batch}/{wildcards.number_of_samples}_samples/mod5_output.fam" for batch in batches]

# rule mod7_output:
#     input:
#         merged_vcf = rules.mod7_merge_chrs.output.merged_vcf,
#         fam_files = get_pre_imputation_fam_files
#     output:
#         pgenset = multiext(str(tmpMod7 / "{number_of_samples}_samples" / "mod7_output"), ".pgen", ".pvar", ".psam")
#         #pgenset = multiext(str(tmpMergeTest / "{number_of_samples}_samples" / "mod7_output"), ".pgen", ".pvar", ".psam")
#     run:
#         outTrunk = mqc.plinkBase(output.pgenset[0])
#         new_psam = output.pgenset[2]
#         original_psam = outTrunk + ".original.psam"
#         subprocess.run(
#             [
#                 plink2local,
#                 "--vcf", input.merged_vcf,
#                 "--make-pgen",
#                 "--out", outTrunk
#             ]
#         )
#         os.rename(new_psam, original_psam)
#         mqc.restore_family_information(input.fam_files, batches, original_psam, new_psam)
    # shell:
    #     """
    #     output_full={output.pgenset[0]}
    #     outTrunk="${{output_full%.pgen}}"
    #     {plink2local} --vcf {input.merged_vcf} --make-pgen --out $outTrunk
    #     """




# def get_batch_vcf_files_to_merge(wildcards):
#     # tmpMod6str = str(tmpMod6Archive)
#     tmpMod6str = str(tmpMergeTest)
#     return [f"{tmpMod6str}/{batch}/{wildcards.number_of_samples}_samples/mod6_output.vcf.gz" for batch in batches]
#     #return [f"{tmpMod6str}/{batch}/{wildcards.number_of_samples}_samples/mod6_merge_chrs.vcf.gz" for batch in batches]

# rule mod7_merge_batches:
#     input:
#         vcfs = get_batch_vcf_files_to_merge
#     output:
#         # merged_vcf = str(tmpMod7 / "{number_of_samples}_samples" / "mod7_merge_batches.vcf.gz")
#         merged_vcf = str(tmpMergeTest / "{number_of_samples}_samples" / "mod7_merge_batches.vcf.gz")
#     log:
#         # str(tmpMod7 / "{number_of_samples}_samples" / "mod7_merge_batches.log")
#         str(tmpMergeTest / "{number_of_samples}_samples" / "mod7_merge_batches.log")
#     conda:
#         "envs/bcf_tabix.yaml"
#     shell:
#         """
#         echo "Output file: {output.merged_vcf}" > {log}
#         echo "Merge started $(date '+%Y-%m-%d %H:%M:%S')" >> {log}
#         bcftools merge {input.vcfs} -o {output.merged_vcf}
#         echo "Merge finished $(date '+%Y-%m-%d %H:%M:%S')" >> {log}
#         echo "Merged files:" >> {log}
#         for file in {input.vcfs}; do echo "$file" >> {log}; done
#         """

# rule mod7_output:
#     input:
#         merged_vcf = rules.mod7_merge_batches.output.merged_vcf
#     output:
#         # pgenset = multiext(str(tmpMod7 / "{number_of_samples}_samples" / "mod7_output"), ".pgen", ".pvar", ".psam")
#         pgenset = multiext(str(tmpMergeTest / "{number_of_samples}_samples" / "mod7_output"), ".pgen", ".pvar", ".psam")
#     shell:
#         """
#         output_full={output.pgenset[0]}
#         outTrunk="${{output_full%.pgen}}"
#         {plink2local} --vcf {input.merged_vcf} --make-pgen --out $outTrunk
#         """




# # merge is not implemented in plink 2 yet, so this rule doesn't work
# batches = batches_debug
# def batch_pgens_to_merge(wildcards):
#     tmpMod6str = str(tmpMod6)
#     return [f"{tmpMod6str}/{batch}/{n_samples}_samples/mod6_output.pgen" for batch in batches]

# rule mod7_merge:
#     input:
#         pgens = batch_pgens_to_merge
#     output:
#         pgenset = multiext(str(tmpMod7 / "all_samples" / "mod7_output"), ".pgen", ".pvar", ".psam")
#     run:
#         out_trunk = mqc.plinkBase(output.pgenset[0])
#         # merge batches:
#         mqc.merge_pgensets(input.pgens, out_trunk, plink2local)
