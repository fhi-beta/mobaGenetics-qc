
batches = batches_debug # remove in prod!

def get_batch_vcf_files_to_merge(wildcards):
    # tmpMod6str = str(tmpMod6Archive)
    tmpMod6str = str(tmpMergeTest)
    return [f"{tmpMod6str}/{batch}/{wildcards.number_of_samples}_samples/mod6_output.vcf.gz" for batch in batches]
    #return [f"{tmpMod6str}/{batch}/{wildcards.number_of_samples}_samples/mod6_merge_chrs.vcf.gz" for batch in batches]

rule mod7_merge_batches:
    input:
        vcfs = get_batch_vcf_files_to_merge
    output:
        # merged_vcf = str(tmpMod7 / "{number_of_samples}_samples" / "mod7_merge_batches.vcf.gz")
        merged_vcf = str(tmpMergeTest / "{number_of_samples}_samples" / "mod7_merge_batches.vcf.gz")
    log:
        # str(tmpMod7 / "{number_of_samples}_samples" / "mod7_merge_batches.log")
        str(tmpMergeTest / "{number_of_samples}_samples" / "mod7_merge_batches.log")
    conda:
        "envs/bcf_tabix.yaml"
    shell:
        """
        echo "Output file: {output.merged_vcf}" > {log}
        echo "Merge started $(date '+%Y-%m-%d %H:%M:%S')" >> {log}
        bcftools merge {input.vcfs} -o {output.merged_vcf}
        echo "Merge finished $(date '+%Y-%m-%d %H:%M:%S')" >> {log}
        echo "Merged files:" >> {log}
        for file in {input.vcfs}; do echo "$file" >> {log}; done
        """

rule mod7_output:
    input:
        merged_vcf = rules.mod7_merge_batches.output.merged_vcf
    output:
        # pgenset = multiext(str(tmpMod7 / "{number_of_samples}_samples" / "mod7_output"), ".pgen", ".pvar", ".psam")
        pgenset = multiext(str(tmpMergeTest / "{number_of_samples}_samples" / "mod7_output"), ".pgen", ".pvar", ".psam")
    shell:
        """
        output_full={output.pgenset[0]}
        outTrunk="${{output_full%.pgen}}"
        {plink2local} --vcf {input.merged_vcf} --make-pgen --out $outTrunk
        """




# # merge is not implemented in plink 2 yet, so this rule doesn't work
# batches = batches_debug
# def batch_pgens_to_merge(wildcards):
#     tmpMod6str = str(tmpMod6)
#     return [f"{tmpMod6str}/{batch}/{n_samples}_samples/mod6_output.pgen" for batch in batches]

# rule mod7_merge:
#     input:
#         pgens = batch_pgens_to_merge
#     output:
#         pgenset = multiext(str(tmpMod7 / "all_samples" / "mod7_output"), ".pgen", ".pvar", ".psam")
#     run:
#         out_trunk = mqc.plinkBase(output.pgenset[0])
#         # merge batches:
#         mqc.merge_pgensets(input.pgens, out_trunk, plink2local)
