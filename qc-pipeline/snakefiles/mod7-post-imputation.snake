rule mod7_filter:
    input:
        chromosome_file = rules.mod6_generate_chromosome_file.output.chromosome_file,
        imputed_vcf = rules.mod6_impute.output.imputed_vcf,
        index = rules.mod6_index.output.index
    output:
        filtered_vcf = str(tmpMod7 / "{batch}" / "mod7_filter.chr{chr}.vcf.gz")
    conda:
        "envs/bcf_tabix.yaml"
    params:
        dr2_threshold = config['post_imputation_dr2_threshold']
    shell:
        """
        mapfile -t chromosomes < {input.chromosome_file}
        if [[ ! " ${{chromosomes[@]}} " =~ " {wildcards.chr} " ]]; then
            echo "Chromosome {wildcards.chr} not in chromosome list for {wildcards.batch}, bypassing mod7_filter"
            touch {output.filtered_vcf}
        else
            bcftools view -i 'INFO/DR2>={params.dr2_threshold}' {input.imputed_vcf} -o {output.filtered_vcf}
            tabix -p vcf {output.filtered_vcf}
        fi 
        """
    
rule mod7_format_phased_dosage:
    input:
        chromosome_file = rules.mod6_generate_chromosome_file.output.chromosome_file,
        filtered_vcf = rules.mod7_filter.output.filtered_vcf
    output:
        formatted_vcf = str(tmpMod7 / "{batch}" / "mod7_format.chr{chr}.vcf.gz")
    conda:
        "envs/bcf_tabix.yaml"
    shell:
        """
        mapfile -t chromosomes < {input.chromosome_file}
        if [[ ! " ${{chromosomes[@]}} " =~ " {wildcards.chr} " ]]; then
            echo "Chromosome {wildcards.chr} not in chromosome list for {wildcards.batch}, bypassing mod7_format_phased_dosage"
            touch {output.formatted_vcf}
        else
            zcat {input.filtered_vcf}  | awk 'BEGIN {{OFS="\\t"}} \
    /^##FORMAT=<ID=(AP1|AP2|DS)/ {{next}} \
    /^##FORMAT=<ID=GT/ {{print; print "##FORMAT=<ID=HDS,Number=.,Type=Float,Description=\\"Phased dosage\\">"; next}} \
    /^#/ {{print; next}} \
    {{split($9, fmt, ":"); \
     if (fmt[1]=="GT" && fmt[2]=="DS" && fmt[3]=="AP1" && fmt[4]=="AP2") {{ \
         $9="GT:HDS"; \
         for (i=10; i<=NF; i++) {{ \
             split($i, vals, ":"); \
             if (length(vals[1]) == 1) {{ \
                 $i=vals[1]":"vals[3]; \
             }} else {{ \
                 $i=vals[1]":"vals[3]","vals[4]; \
             }} \
         }} \
     }} \
     print}}' | bgzip > {output.formatted_vcf}
        fi 
        """

rule mod7_index_format:
    input:
        chromosome_file = rules.mod6_generate_chromosome_file.output.chromosome_file,
        formatted_vcf = rules.mod7_format_phased_dosage.output.formatted_vcf
    output:
        index = str(tmpMod7 / "{batch}" / "mod7_format.chr{chr}.vcf.gz.tbi")
    conda:
        "envs/bcf_tabix.yaml"
    shell:
        """
        mapfile -t chromosomes < {input.chromosome_file}
        if [[ ! " ${{chromosomes[@]}} " =~ " {wildcards.chr} " ]]; then
            echo "Chromosome {wildcards.chr} not in chromosome list for {wildcards.batch}, bypassing mod7_index_format"
            touch {output.index}
        else
            tabix -p vcf {input.formatted_vcf}
        fi 
        """

tmpMod6str = str(tmpMod6)
tmpMod7str = str(tmpMod7)

def get_batches_with_chromosome(chr):
    batches_with_chromosome = []
    for batch in batches:
        chromosome_file = f"{tmpMod6str}/{batch}/chromosomes.txt"
        if mqc.chromosome_in_file(chromosome_file, chr):
            batches_with_chromosome.append(batch)
    return batches_with_chromosome

def get_vcf_batch_files_to_merge(wildcards):
    batches_with_chromosome = get_batches_with_chromosome(wildcards.chr)
    return [f"{tmpMod7str}/{batch}/mod7_format.chr{wildcards.chr}.vcf.gz" for batch in batches_with_chromosome]

tmpMod7str = str(tmpMod7)
def get_index_batch_files_to_merge(wildcards):
    batches_with_chromosome = get_batches_with_chromosome(wildcards.chr)
    return [f"{tmpMod7str}/{batch}/mod7_format.chr{wildcards.chr}.vcf.gz.tbi" for batch in batches_with_chromosome]

rule mod7_merge_batches:
    input:
        vcfs = get_vcf_batch_files_to_merge,
        index = get_index_batch_files_to_merge
    output:
        merged_vcf = str(tmpMod7 / "mod7_merge_batches_chr{chr}.vcf.gz")
    log:
        # str(tmpMod7 / "{number_of_samples}_samples" / "mod7_merge_batches.log")
        str(tmpMod7  / "mod7_merge_batches_chr{chr}.log")
    conda:
        "envs/bcf_tabix.yaml"
    shell:
        """
        echo "Output file: {output.merged_vcf}" > {log}
        echo "Merge started $(date '+%Y-%m-%d %H:%M:%S')" >> {log}
        bcftools merge {input.vcfs} -o {output.merged_vcf}
        echo "Merge finished $(date '+%Y-%m-%d %H:%M:%S')" >> {log}
        echo "Merged files:" >> {log}
        for file in {input.vcfs}; do echo "$file" >> {log}; done
        """

# Plink2 does not support phased dosages for multiallelic variants yet, so they are removed for now
rule mod7_remove_multiallelic_variants:
    input:
        merged_vcf = rules.mod7_merge_batches.output.merged_vcf
        # index = rules.mod7_index_batch_merge.output.index
    output:
        vcf = str(tmpMod7 / "mod7_remove_multiallelic_variants.chr{chr}.vcf.gz")
    conda:
        "envs/bcf_tabix.yaml"
    shell:
        """
        bcftools norm -m + {input.merged_vcf} | bcftools view -m2 -M2 -o {output.vcf}
        """

# Post-imputation phasing (work in progress...)

rule mod7_fill_ac:
    input:
        vcf = rules.mod7_remove_multiallelic_variants.output.vcf
    output:
        bcf = str(tmpMod7 / "mod7_fill_ac.chr{chr}.bcf")
    conda:
        "envs/bcf_tabix.yaml"
    shell:
        """
        bcftools +fill-AN-AC {input.vcf} -o {output.bcf}
        tabix {output.bcf}
        """

def get_map_chr(wildcards):
    if wildcards.chr == "PAR1":
        return "X_par1"
    elif wildcards.chr == "PAR2":
        return "X_par2"
    else:
        return wildcards.chr


rule mod7_chunks:
    input:
        bcf = rules.mod7_fill_ac.output.bcf
    output:
        chunks_file = str(tmpMod7 / "mod7_chunks.chr{chr}")
    params:
        map_chr=get_map_chr
    conda:
        "envs/glimpse.yaml"
    threads: 1
    shell:
        """
        mapfile={mapfiles}/shapeit/chr{params.map_chr}.b37.gmap.gz
        GLIMPSE2_chunk --input {input.bcf} --map $mapfile --region {params.map_chr} --sequential --threads {threads} --output {output.chunks}
        """


# def create_shapeit_fam_file(expected_relationships_file, shapeit_fam_file):
#     with open(expected_relationships_file, 'r') as infile, open(shapeit_fam_file, 'w') as outfile:
#         header = infile.readline()
#         for line in infile:
#             columns = line.strip().split()
#             if len(columns) >= 3:
#                 reordered_columns = [columns[0], columns[2], columns[1]]
#                 outfile.write('\t'.join(reordered_columns) + '\n')


rule mod7_expected_relationships_shapeit:
    input:
        expected_relationships = config['expected_relationships']
    output:
        shapeit_fam = str(tmpMod7 / "shapeit_fam")
    shell:
        """
        awk 'NR>1 {print $1 "\t" $3 "\t" $2}' {input.expected_relationships} > {output.shapeit_fam}
        """
    


def get_chunks(chunk_file):
    chunks = []
    with open(chunk_file) as f:
        for line in f:
            cols = line.split("\t")
            chunks.append(cols[2])
    return chunks

def get_phased_chunks_files(wildcards):
    chunks = get_chunks(str(tmpMod7 / f"mod7_chunks.chr{wildcards.chr}"))
    phased_chunks = []
    for i in range(len(chunks)):
        phased_chunk = str(tmpMod7 / f"mod7_phasing.chr{wildcards.chr}.chunk{i}.bcf")
        phased_chunks.append(phased_chunk)
    return phased_chunks

def get_shapeit_fam(wildcards):
    return str(tmpMod7 / "shapeit_fam")

rule mod7_phasing:
    input:
        bcf = rules.mod7_fill_ac.output.bcf,
        chunks_file = rules.mod7_chunks.output.chunks_file,
        shapeit_fam = get_shapeit_fam
    output:
        phased_chunks_list=str(tmpMod7 / "mod7_phasing_phased_chunks_list.chr{chr}")
    params:
        map_chr=get_map_chr
    conda:
        "envs/shapeit_5.yaml"
    threads: 15 #30
    run:
        # if not os.path.exists(shapeit_fam):
        #     create_shapeit_fam_file(config['expected_relationships'], shapeit_fam)
        chunks = get_chunks(input.chunks_file)
        phased_chunks = []
        mapfile=f"{mapfiles}/shapeit/chr{params.map_chr}.b37.gmap.gz"
        for i in range(len(chunks)):
            chunk = chunks[i]
            phased_chunk = str(tmpMod7 / f"mod7_phasing.chr{wildcards.chr}.chunk{i}.bcf")
            phased_chunk_log=mqc.plinkBase(phased_chunk) + ".log"
            phased_chunks.append(phased_chunk)
            cmd=f"SHAPEIT5_phase_common --input {input.bcf} --pedigree {input.shapeit_fam} --region {chunk} --map {mapfile} --output-format bcf --output {phased_chunk} --thread {threads} --log {phased_chunk_log}"
            shell(cmd)
        with open(output.phased_chunks_list, 'w') as file_out:
            for phased_chunk in phased_chunks:
                file_out.write(f"{phased_chunk}\n")



rule mod7_ligate:
    input:
        phased_chunks = rules.mod7_phasing.output.phased_chunks_list
    output:
        ligated_bcf = str(tmpMod7 / "mod7_ligate.chr{chr}.bcf")
    log:
        str(tmpMod7 / "mod7_ligate.chr{chr}.log")
    threads: 30 # 32
    conda:
        "envs/shapeit_5.yaml"
    shell:
        """
        SHAPEIT5_ligate --input {input.phased_chunks} --pedigree {shapeit_fam} --output {output.ligates_bcf} --thread {threads} --log {log}
        """
    



# Convert to pgen

def get_pre_imputation_fam_files(wildcards):
    tmpMod5str = str(tmpMod5)
    return [f"{tmpMod5str}/{batch}/mod5_output.fam" for batch in batches]

rule mod7_update_sex_file:
    input:
        fams = get_pre_imputation_fam_files
    output:
        sex_file = str(tmpMod7 / "mod7_update_sex_file.txt")
    threads: 24
    run:
        mqc.create_update_sex_file(input.fams, output.sex_file, threads)


rule mod7_convert_chrs_to_pgen:
    input:
        vcf = rules.mod7_remove_multiallelic_variants.output.vcf,
        sex_file = rules.mod7_update_sex_file.output.sex_file
    output:
        pgensets = multiext(str(tmpMod7 / "mod7_convert_chrs_to_pgen.chr{chr}"), ".pgen", ".pvar", ".psam")
    threads: config['mod7_convert_chrs_to_pgen_threads']
    run:
        outTrunk = mqc.plinkBase(output.pgensets[0])
        subprocess.run(
            [
                plink2local,
                "--vcf", input.vcf, "dosage=HDS",
                "--update-sex", input.sex_file,
                "--memory", config['mod7_convert_chrs_to_pgen_mem'],
                "--set-hh-missing", "keep-dosage",
                "--split-par", "b37",
                "--make-pgen",
                "--out", outTrunk
            ]
        )

tmpMod7str = str(tmpMod7)
def chrX_pgens_to_merge(wildcards):
    return [f"{tmpMod7str}/mod7_convert_chrs_to_pgen.chr{chr}.pgen" for chr in ['PAR1', 'X', 'PAR2']]

rule mod7_merge_X:
    input:
        pgens = chrX_pgens_to_merge
    output:
        pgenset = multiext(str(tmpMod7 / "mod7_merge_X"), ".pgen", ".pvar", ".psam")
    run:
        out_trunk = mqc.plinkBase(output.pgenset[0])
        mqc.merge_pgensets(input.pgens, out_trunk, plink2local, 1, pgenlist_file = "merge_x_list")

rule mod7_sort_x:
    input:
        pgenset = rules.mod7_merge_X.output.pgenset
    output:
        pgenset = multiext(str(tmpMod7 / "mod7_sort_X"), ".pgen", ".pvar", ".psam")
    run:
        in_trunk = mqc.plinkBase(input.pgenset[0])
        out_trunk = mqc.plinkBase(output.pgenset[1])
        subprocess.run([
            "plink2",
            "--pfile", in_trunk,
            "--sort-vars",
            "--make-pgen",
            "--out", out_trunk
        ])



def chr_pgens_to_merge(wildcards):
    chrs_to_merge = [f"{tmpMod7str}/mod7_convert_chrs_to_pgen.chr{chr}.pgen" for chr in list([str(i) for i in range(1,23)])]
    chrs_to_merge.append(f"{tmpMod7str}/mod7_sort_X.pgen")
    return chrs_to_merge

rule mod7_merge:
    input:
        pgens = chr_pgens_to_merge
    output:
        pgenset = multiext(str(tmpMod7 / "mod7_merge"), ".pgen", ".pvar", ".psam")
    threads: 32
    run:
        out_trunk = mqc.plinkBase(output.pgenset[0])
        mqc.merge_pgensets(input.pgens, out_trunk, plink2local, threads)


rule mod7_rename_missing_ids:
    input:
        pgenset = rules.mod7_merge.output.pgenset
        #pgenset = multiext("/mnt/work/qc_genotypes/pipeOut_dev/2024.08.29/mod7-post-imputation/all_samples/mod7_output", ".pgen", ".pvar", ".psam")
    output:
        pgenset = multiext(str(tmpMod7 / "mod7_rename_missing_ids"), ".pgen", ".pvar", ".psam")
    shell:
        """
        input_full={input.pgenset[0]}
        inTrunk="${{input_full%.pgen}}"
        output_full={output.pgenset[0]}
        outTrunk="${{output_full%.pgen}}"
        {plink2local} --pfile $inTrunk --set-missing-var-ids @_#_\$1:\$2 --make-pgen --out $outTrunk
        """



