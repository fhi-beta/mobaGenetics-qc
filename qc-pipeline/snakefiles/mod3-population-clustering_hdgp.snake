##
#
# This module runs a PCA with the HDGP and clusters the samples by overlap with superpopulations in a PCA.
#
##

# Convert to plink2
rule_stem = 'mod3_hdgp_convert_plink2'
rule mod3_hdgp_convert_plink2:
    input:
        bedset_plink1 = rules.m2_output.output.pruned_bedset
    output:
        bedset_plink2 = multiext(str(tmpMod3/"{batch}"/rule_stem), '.pgen', '.pvar', '.psam')
    threads: 8
    run:
        try:

            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog, rule_info[rule]["QC test"])
            inTrunk =  mqc.plinkBase(input.bedset_plink1[0])
            outTrunk =  mqc.plinkBase(output.bedset_plink2[0])

            subprocess.run(
                [
                    "plink2",
                    "--bfile", inTrunk,
                    "--out", outTrunk,
                    "--threads", str(threads),
                    "--make-pgen"
                ],
                check = True
            )

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)


# Match to HGDP
rule_stem = 'mod3_hdgp_match_hgdp'
rule mod3_hdgp_match_hgdp:
    input:
        plink2_files = rules.mod3_hdgp_convert_plink2.output.bedset_plink2,
    params:
        loadings_file = "/mnt/archive/snpQc/pc_loadings/hgdp_tgp_pca_covid19hgi_snps_loadings.rsid.plink.tsv",
        frequency_file = "/mnt/archive/snpQc/pc_loadings/hgdp_tgp_pca_covid19hgi_snps_loadings.rsid.plink.afreq",
        proxies_cache_stem = "/mnt/archive/snpQc/pc_loadings/proxies_cache",
        proxies_db = "/mnt/archive/topld/db/ld_db"
    output:
        loadings_export_file = tmpMod3/"{batch}"/(rule_stem + "_loadings"),
        frequencies_export_file = tmpMod3/"{batch}"/(rule_stem + "_frequencies"),
        variants_export_file = tmpMod3/"{batch}"/(rule_stem + "_variants")
    conda:
        "envs/r_4.2.yaml"
    threads: 32
    shell:
        """
        echo Rscript utils/pca/match_hgdp.R \
            {input.plink2_files[2]} \
            {params.loadings_file} \
            {params.frequency_file} \
            {params.proxies_cache_stem} \
            {params.proxies_db} \
            {output.loadings_export_file} \
            {output.frequencies_export_file} \
            {output.variants_export_file}
        """

# Filter to common ids
rule_stem = 'mod3_hdgp_filter_ids'
rule mod3_hdgp_filter_ids:
    'filter variants and keep only those that can be used for the PCA'
    input:
        plink2_files = rules.mod3_hdgp_convert_plink2.output.bedset_plink2,
        common_ids = rules.mod3_hdgp_match_hgdp.output.variants_export_file
    output:
        plink_filtered = multiext(str(tmpMod3/"{batch}"/rule_stem), '.pgen', '.pvar', '.psam')
    threads: 24
    run:
        try:

            item_type = rule_info[rule]["rule type"]
            mqc.log(runlog, rule_info[rule]["QC test"])
            inTrunk =  mqc.plinkBase(input.plink2_files[0])
            outTrunk =  mqc.plinkBase(output.plink_filtered[0])

            subprocess.run(
                [
                    "plink2",
                    "--pfile", inTrunk,
                    "--extract", input.common_ids,
                    "--out", outTrunk,
                    "--threads", str(threads),
                    "--make-pfile"
                ],
                check = True
            )

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)


# Compute scores
rule_stem = 'mod3_hdgp_compute_scores'
rule mod3_hdgp_compute_scores:
    'compute the PC scores'
    input:
        plink_filtered = rules.mod3_hdgp_filter_ids.output.plink_filtered,
        loading_file = rules.mod3_hdgp_match_hgdp.output.loadings_export_file,
        frequencies_file = rules.mod3_hdgp_match_hgdp.output.frequencies_export_file,
    params:
        score_stem = str(tmpMod3/"{batch}"/'pc_scores')
    output:
        score_file = str(tmpMod3/"{batch}"/'pc_scores.sscore')
    conda:
        "envs/plink_2.yaml"
    threads: 24
    shell:
        """
        plink2 \
            --pfile {params.plink_renamed_stem} \
            --score {input.loading_file} variance-standardize cols=-scoreavgs,+scoresums list-variants header-read \
            --score-col-nums 3-22 \
            --read-freq {input.frequencies_file} \
            --out {params.score_stem}
        """
