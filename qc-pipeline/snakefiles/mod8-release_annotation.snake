##
#
# This module generates documentation on qualtity, familial relatedness, sex assignment, and PCA analysis on the merged set of genotypes.
#
##


mod7_output = "/mnt/work/qc_genotypes/pipeOut_dev/2024.09.04/mod7-post-imputation/all_samples/mod7_rename_missing_ids"
r2_table = "/mnt/work/qc_genotypes/pipeOut_dev/2024.09.04/mod7-post-imputation/all_samples/mod7_dr2.txt"
best_hits_table = "/mnt/work/qc_genotypes/pipeOut_dev/2024.09.04/mod7-post-imputation/all_samples/mod7_best_snps.txt"

rule_stem = 'mod8_marker_filter'
rule mod8_marker_filter:
    'Select common markers genotyped or with best imputation scores, filter by mac and geno rate'
    input:
        pgenset = [mod7_output + ".pgen"], # rules.mod7_rename_missing_ids.output.pgenset,
        r2_table = r2_table, # rules.summarize_dr2.output.r2,
        best_snps = best_hits_table # rules.summarize_dr2.output.top_snps
    output:
        pgenset_r2 = multiext(str(tmpMod8/rule_stem) + "_r2", ".pgen", ".pvar", ".psam"),
        pgenset_best_snps = multiext(str(tmpMod8/rule_stem) + "_best_snps", ".pgen", ".pvar", ".psam")
    params:
        mac_threshold = config['merged_set_mac_thr'],
        geno_threshold = config['merged_set_geno_thr'],
        info_threshold = config['merged_set_info_thr']
    run:
        try:

            id_file = tmpMod8/"ids_08"
            print(f"Extracting markers with overall r2 >= {params.info_threshold}.")
            r2_data = pd.read_csv(r2_table, sep = "\t")
            snp_08 = r2_data[r2_data['COMBINED'] >= params.info_threshold]
            snp_08['ID'].to_csv(id_file, index = False, header = False)

            inTrunk =  mqc.plinkBase(input.pgenset[0])
            outTrunk_r2 =  mqc.plinkBase(output.pgenset_r2[0])
            outTrunk_best_snps =  mqc.plinkBase(output.pgenset_best_snps[0])

            subprocess.run(
                [
                    plink2local,
                    "--pfile", inTrunk,
                    "--extract", id_file,
                    "--max-alleles", "2",
                    "--mac", str(params.mac_threshold),
                    "--geno", str(params.geno_threshold),
                    "--out", outTrunk_r2,
                    "--make-pgen"
                ],
                check=True
            )

            subprocess.run(
                [
                    plink2local,
                    "--pfile", inTrunk,
                    "--extract", input.best_snps,
                    "--max-alleles", "2",
                    "--mac", str(params.mac_threshold),
                    "--geno", str(params.geno_threshold),
                    "--out", outTrunk_best_snps,
                    "--make-pgen"
                ],
                check=True
            )

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)


rule_stem = 'mod8_generate_best_snps_stats'
rule mod8_generate_best_snps_stats:
    'Generate statistics on the filtered snps'
    input:
        pgenset = rules.mod8_marker_filter.output.pgenset_best_snps
    output:
        het = tmpMod8/'mod8_best_snps.het',
        hardy = tmpMod8/'mod8_best_snps.hardy',
        afreq = tmpMod8/'mod8_best_snps.afreq',
        smiss = tmpMod8/'mod8_best_snps.smiss',
        vmiss = tmpMod8/'mod8_best_snps.vmiss',
    threads: 1
    run:
        try:
            # Plink base paths
            plink_input = mqc.plinkBase(input.pgenset[0])
            plink_het_output = mqc.plinkBase(output.het)
            plink_hwe_output = mqc.plinkBase(output.hardy)
            plink_freq_output = mqc.plinkBase(output.afreq)
            plink_miss_output = mqc.plinkBase(output.smiss)

            # Heterozygocity rate
            subprocess.run(
                [
                    plink2local,
                    "--pfile", plink_input,
                    "--het",
                    "--out", plink_het_output
                ],
                check=True
            )

            # HWE
            subprocess.run(
                [
                    plink2local,
                    "--pfile", plink_input,
                    "--hardy",
                    "--out", plink_hwe_output
                ],
                check=True
            )

            # Frequencies
            subprocess.run(
                [
                    plink2local,
                    "--pfile", plink_input,
                    "--freq",
                    "--out", plink_freq_output
                ],
                check=True
            )

            # Missingness
            subprocess.run(
                [
                    plink2local,
                    "--pfile", plink_input,
                    "--missing",
                    "--out", plink_miss_output
                ],
                check=True
            )

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

rule_stem = 'mod8_check_sex'
rule mod8_check_sex:
    'Sex imputation. Currently not supported in plink2, running in plink1.'
    input:
        pgenset_r2 = multiext(str(tmpMod8/"mod8_marker_filter") + "_r2", ".pgen", ".pvar", ".psam")
    output:
        sex_check = tmpMod8/(rule_stem + ".sexcheck")
    run:
        try:

            x_fixed = False # Currently the sex chromosomes are not available, so we take the sex check results prior to imputation

            if x_fixed:

                plink_input = mqc.plinkBase(input.pgenset[0])
                plink1_input = plink_input + "_plink1"
                ouput_file = mqc.plinkBase(output.sex_check)

                subprocess.run(
                    [
                        plink2local,
                        "--pfile", plink_input,
                        "--make-bed",
                        "--out", plink1_input
                    ],
                )

                subprocess.run(
                    [
                        plinklocal,
                        "--bfile", plink1_input,
                        "--check-sex", "ycount",
                        "--out", ouput_file
                    ],
                    check = True
                )

            else:

                sex_checks = []

                for batch in batches:
                    print(f"Importing sex_check for batch {batch}.")
                    file = f"/mnt/work/qc_genotypes/pipeOut_dev/2024.07.01/mod2-genetic-relationship/{batch}/m2_output.sexcheck"
                    sex_check = pd.read_table(file, delim_whitespace=True)
                    sex_checks.append(sex_check)

                merged_df = pd.concat(sex_checks, ignore_index = True)

                merged_df.to_csv(output.sex_check ,index = False)

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)


rule_stem = 'mod8_prune_markers'
rule mod8_prune_markers:
    'Prune markers for LD'
    input:
        pgenset = rules.mod8_marker_filter.output.pgenset_r2,
        high_ld_regions_hg19 = high_ld_regions_hg19
    output:
        pgenset = multiext(str(tmpMod8/rule_stem), ".pgen", ".pvar", ".psam"),
        pruned_list = tmpMod8/(rule_stem + ".prune.in")
    params:
        prune_cmd = config["prune_cmd"]
    run:
        try:
            inTrunk = mqc.plinkBase(input.pgenset[0])
            outTrunk = mqc.plinkBase(output.pgenset[0])

            subprocess.run(
                [
                    plink2local,
                    "--pfile", inTrunk,
                    "--autosome",
                    "--exclude", "range", input.high_ld_regions_hg19
                ] + params.prune_cmd.split() + [
                    "--out", outTrunk
                ],
                check = True
            )

            subprocess.run(
                [
                    plink2local,
                    "--pfile", inTrunk,
                    "--extract", output.pruned_list,
                    "--out", outTrunk,
                    "--make-pgen"
                ],
                check = True
            )

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)


rule_stem = 'mod8_pedigree_ibd_estimate'
rule mod8_pedigree_ibd_estimate:
    'IBD estimation. Requires conversion to plink1.'
    input:
        pgenset = rules.mod8_prune_markers.output.pgenset,
    output:
        king_relatedness = tmpMod8/(rule_stem + ".kin0")
    threads: 24
    run:
        try:
            plink_input = mqc.plinkBase(input.pgenset[0])
            plink_input_1 = mqc.plinkBase(input.pgenset[0]) + "_plink1"
            outTrunk = mqc.plinkBase(output.king_relatedness)

            # Convert to plink1
            subprocess.run(
                [
                    plink2local,
                    "--pfile", plink_input,
                    "--make-bed",
                    "--out", plink_input_1
                ],
            )

            # Make FIDs unique to skip within-family computation
            fam_file = plink_input_1 + ".fam"
            fam_data = pd.read_csv(fam_file, sep = "\t", names =["fid", "iid", "mid", "pid", "sex", "pheno"])
            fam_data['fid'] = fam_data['iid']
            fam_data.to_csv(fam_file, index = False, header = False, sep = "\t")

            # King relatedness analysis
            subprocess.run(
                [
                    kinglocal,
                    "-b", plink_input_1 + ".bed",
                    "--related",
                    "--cpus", str(threads),
                    "--prefix", outTrunk
                ],
                check = True
            )

        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)


rule_stem = 'mod8_psam_reconstruction'
rule mod8_psam_reconstruction:
    input:
        psam_all_markers = mod7_output + ".psam", #rules.mod7_rename_missing_ids.output.pgenset[2],
        king_relatedness = rules.mod8_pedigree_ibd_estimate.output.king_relatedness,
        sex_check = rules.mod8_check_sex.output.sex_check,
        expected_relationships = config['expected_relationships'],
        birth_year = config['birth_year']
    params:
        title = "\"Psam file reconstruction\""
    output:
        updated_psam = tmpMod8/(rule_stem + ".psam"),
        pedigree_sample_exclusion = tmpMod8/(rule_stem + "_pedigree_sample_exclusion"),
        mismatch_information = tmpMod8/"mismatch_information.gz",
        mismatch_relationship = tmpMod8/"mismatch_relationship.gz",
        md_file = github_docs/(rule_stem + ".md")
    conda:
        "envs/r_4.2.yaml"
    threads: 1
    shell:
        """
        Rscript utils/pedigree/simple_psam_reconstruction.R \
            {input.king_relatedness} \
            {input.sex_check} \
            {input.expected_relationships} \
            {input.birth_year} \
            {input.psam_all_markers} \
            {output.updated_psam} \
            {output.pedigree_sample_exclusion} \
            {output.mismatch_information} \
            {output.mismatch_relationship} \
            {output.md_file} \
            {params.title}
        """


rule_stem = 'mod8_exclude_conflictual_relationships'
rule mod8_exclude_conflictual_relationships:
    input:
        pgenset_all_markers = [mod7_output + ".pgen"], #rules.mod7_rename_missing_ids.output.pgenset,
        pgenset_pruned_markers = rules.mod8_prune_markers.output.pgenset,
        pedigree_sample_exclusion = rules.mod8_psam_reconstruction.output.pedigree_sample_exclusion,
        updated_psam = rules.mod8_psam_reconstruction.output.updated_psam
    output:
        pgenset_all_markers =  multiext(str(tmpMod8/rule_stem), ".pgen", ".pvar", ".psam"),
        pgenset_pruned_markers = multiext(str(tmpMod8/(rule_stem + "_pruned")), ".pgen", ".pvar", ".psam")
    run:
        try:
            inTrunk_all_markers = mqc.plinkBase(input.pgenset_all_markers[0])
            outTrunk_all_markers = mqc.plinkBase(output.pgenset_all_markers[0])
            inTrunk_pruned_markers = mqc.plinkBase(input.pgenset_pruned_markers[0])
            outTrunk_pruned_markers = mqc.plinkBase(output.pgenset_pruned_markers[0])

            subprocess.run(
                [
                    plink2local,
                    "--pfile", inTrunk_all_markers,
                    "--remove", input.pedigree_sample_exclusion,
                    "--out", outTrunk_all_markers,
                    "--make-pgen"
                ],
                check = True
            )

            subprocess.run(
                [
                    plink2local,
                    "--pfile", inTrunk_pruned_markers,
                    "--remove", input.pedigree_sample_exclusion,
                    "--out", outTrunk_pruned_markers,
                    "--make-pgen"
                ],
                check = True
            )

            # Update psam
            copyfile(input.updated_psam, outTrunk_all_markers + ".psam")
            copyfile(input.updated_psam, outTrunk_pruned_markers + ".psam")


        except Exception as e:
                    print(f"An exception occurred in rule {rule}.")
                    print(e)


# Reduce 1000 genome markers to the intersection with pruned markers
rule_stem = 'mod8_common_markers_moba_ref'
rule mod8_common_markers_moba_ref:
    input:
        bedset_ref = multiext(config["1000_genomes_stem"] ,'.bed','.bim','.fam'),
        pgenset_moba = rules.mod8_exclude_conflictual_relationships.output.pgenset_pruned_markers
    output:
        bedset_ref = multiext(str(tmpMod8/"pca_ref") ,'.bed','.bim','.fam'),
        bedset_moba = multiext(str(tmpMod8/"pca_moba") ,'.bed','.bim','.fam'),
        tri_alleles = tmpMod8/(rule_stem + "_tri_alleles.missnp"),
        marker_list = tmpMod8/(rule_stem + ".txt")
    benchmark:
        tmpMod8/(rule_stem + ".benchmark")

    run:
        inTrunk_ref =  mqc.plinkBase(input.bedset_ref[0])
        inTrunk_moba =  mqc.plinkBase(input.pgenset_moba[0])
        outTrunk_ref =  mqc.plinkBase(output.bedset_ref[0])
        outTrunk_moba =  mqc.plinkBase(output.bedset_moba[0])
        inTrunk_moba_1 = mqc.plinkBase(input.pgenset_moba[0]) + "_plink1"
        outTrunk_ref_temp = outTrunk_ref + "_temp"
        outTrunk_moba_temp = outTrunk_moba + "_temp"
        triallelesTrunk =  mqc.plinkBase(output.tri_alleles)

        # At this stage, 1KG is in plink1 format, MoBa plink2, we convert everything to plink1 for PCA
        subprocess.run(
            [
                plink2local,
                "--pfile", inTrunk_moba,
                "--make-bed",
                "--out", inTrunk_moba_1
            ],
        )


        # Common markers found in marker_list
        mqc.intersect_rsid(inTrunk_moba_1 + ".bim", inTrunk_ref + ".bim",  output.marker_list)

        # Reduce both sets to the common markers
        subprocess.run(
            [
                plinklocal,
                "--bfile", inTrunk_ref,
                "--extract", output.marker_list,
                "--out", outTrunk_ref_temp,
                "--allow-extra-chr",
                "--make-bed"
            ],
            check = True
        )

        subprocess.run(
            [
                plinklocal,
                "--bfile", inTrunk_moba_1,
                "--extract", output.marker_list,
                "--out", outTrunk_moba_temp,
                "--make-bed"
            ],
            check = True
        )

        # alas these two are not identical enough -
        # discover tri-allele problems by dummy-merging
        # Note that we don't want to abort on plink-failure (as this will be)
        subprocess.run(
            [
                plinklocal,
                "--bfile", outTrunk_ref_temp,
                "--bmerge", outTrunk_moba_temp,
                "--out", triallelesTrunk
            ],
            check = False
        )

        # ... And then remove these markers from both sets
        subprocess.run(
            [
                plinklocal,
                "--bfile", outTrunk_ref_temp,
                "--exclude", output.tri_alleles,
                "--out", outTrunk_ref,
                "--make-bed"
            ],
            check = True
        )

        subprocess.run(
            [
                plinklocal,
                "--bfile", outTrunk_moba_temp,
                "--exclude", output.tri_alleles,
                "--out", outTrunk_moba,
                "--make-bed"
            ],
            check = True
        )

# We would prefer to run the PCA on 1kg and project MoBa on the eigenvectors but merging is more robust and works just fine.
rule_stem = "mod8_pca_both"
rule mod8_pca_both:
    input:
        bedset_ref = rules.mod8_common_markers_moba_ref.output.bedset_ref,
        bedset_moba = rules.mod8_common_markers_moba_ref.output.bedset_moba,
    output:
        bedset = multiext(str(tmpMod8/rule_stem), '.bed', '.bim', '.fam'),
        pcs = tmpMod8/(rule_stem + ".pcs"),
        eigenvector = tmpMod8/(rule_stem + ".vec"),
        snp_loadings = tmpMod8/(rule_stem + ".load"),
        eigenvalues = tmpMod8/(rule_stem + ".val"),
        variance_explained = tmpMod8/(rule_stem + ".pve"),
    benchmark:
        tmpMod8/(rule_stem + ".benchmark")
    run:
        inTrunk_ref = mqc.plinkBase(input.bedset_ref[0])
        inTrunk_moba = mqc.plinkBase(input.bedset_moba[0])
        outTrunk = mqc.plinkBase(output.bedset[0])

        subprocess.run(
            [
                plinklocal,
                "--bfile", inTrunk_ref,
                "--bmerge", inTrunk_moba,
                "--out", outTrunk,
                "--make-bed"
            ],
            check = True
        )

        subprocess.run(
            [
                flashpca,
                "--bfile", outTrunk,
                "--outpc", output.pcs,
                "--outvec", output.eigenvector,
                "--outload", output.snp_loadings,
                "--outval", output.eigenvalues,
                "--outpve", output.variance_explained,
            ],
            check = True
        )

rule_stem = "mod8_plot_pca_both"
rule mod8_plot_pca_both:
    input:
        pcs = rules.mod8_pca_both.output.pcs,
        pop_map = config["1000_genomes_pop"],
    params:
        title = "\"Principal Component Analysys (PCA) vs. 1 KG\""
    output:
        md_file = github_docs/"pca_1kg_moba.md",
        cluster_file = tmpMod8/"clusters",
        ceu_id_file = tmpMod8/"ceu_core_ids"
    conda:
        "envs/plot_pca_both.yaml"
    threads: 1
    shell:
        """
        Rscript utils/pca/plot_pca_population_cluster_1kg.R \
            {input.pcs} \
            {input.pop_map} \
            {output.md_file} \
            {params.title} \
            {output.cluster_file} \
            {output.ceu_id_file}
        """

rule_stem = "release_md"
rule release_md:
    input:
        pca_md_file = github_docs/"pca_1kg_moba.md",
        relatedness_md_file = github_docs/"mod8_psam_reconstruction.md"
    params:
        docs_folder = github_docs,
        version = config['release']
    output:
        release_md_file = github_docs/"readme.md"
    conda:
        "envs/plot_pca_both.yaml"
    threads: 1
    shell:
        """
        Rscript utils/documentation/release_documentation.R \
            {params.version} \
            {params.docs_folder} \
            "readme.md"
        """

rule_stem = 'release_folder'
rule release_folder:
    input:
        pgenset_all_markers = rules.mod8_exclude_conflictual_relationships.output.pgenset_all_markers,
        r2_table = r2_table, # rules.summarize_dr2.output.r2,
        best_snps = best_hits_table, # rules.summarize_dr2.output.top_snps
        pcs = tmpMod8/(rule_stem + ".pcs"),
        eigenvector = tmpMod8/(rule_stem + ".vec"),
        snp_loadings = tmpMod8/(rule_stem + ".load"),
        eigenvalues = tmpMod8/(rule_stem + ".val"),
        variance_explained = tmpMod8/(rule_stem + ".pve"),
        cluster_file = tmpMod8/"clusters",
        ceu_id_file = tmpMod8/"ceu_core_ids",
        king_relatedness = rules.mod8_pedigree_ibd_estimate.output.king_relatedness,
        sex_check = rules.mod8_check_sex.output.sex_check,
    params:
        version = config['release']
    output:
        pgenset_all_markers =  multiext(str(release_folder / release_base_name), ".pgen", ".pvar", ".psam"),
        r2_table = release_folder/"snp"/("snp_r2_" + config['release']),
        best_snps = release_folder/"snp"/("reference_500k_snps_" + config['release']),
        pcs = release_folder/"pca"/(release_base_name + ".pcs"),
        eigenvector = release_folder/"pca"/(release_base_name + ".vec"),
        snp_loadings = release_folder/"pca"/(release_base_name + ".load"),
        eigenvalues = release_folder/"pca"/(release_base_name + ".val"),
        variance_explained = release_folder/"pca"/(release_base_name + ".pve"),
        cluster_file = release_folder/"pca"/(release_base_name + "_clusters"),
        ceu_id_file = release_folder/"pca"/(release_base_name + "_ceu_core_ids"),
        king_relatedness = release_folder/"kinship"/(release_base_name + ".kin0"),
        sex_check = release_folder/"sex_check"/(release_base_name + ".sex_check"),
        readme = release_folder/"readme.md"
    run:
        try:

            # Housekeeping
            if not os.path.exists(release_folder/"snp"):
                os.makedirs(release_folder/"snp")

            if not os.path.exists(release_folder/"pca"):
                os.makedirs(release_folder/"pca")

            if not os.path.exists(release_folder/"kinship"):
                os.makedirs(release_folder/"kinship")

            if not os.path.exists(release_folder/"sex_check"):
                os.makedirs(release_folder/"sex_check")

            # Readme
            with open(file_path,'w') as file:
                file.write("## MoBa Genotypes")
                file.write(f"This folder contains genotype files from the [Norwegian Mother, Father and Child Cohort Study (MoBa)](https://www.fhi.no/en/studies/moba/), release version {params.version}")
                file.write(f"The genotypes have been quality controlled, imputed, and formatted prior to release. Associated code and documentation can be found at our [repository](https://github.com/fhi-beta/mobaGenetics-qc).")
                file.write(f"Please note that filtering of variants and samples has been kept to a minimum. You will find tables next to the genotypes providing information on markers and samples to further filter the data set to your needs.")
                file.write(f"For questions, feedback, and assistance please contact the [Genetics and Bioinformatics department of the Norwegian Institute of Public Health](https://www.fhi.no/om/organisasjon/genetikk-og-bioinformatikk/). You can also reach out to us via [Slack](https://join.slack.com/t/mobagen/shared_invite/zt-2r90hzo82-HNllFHDugSxJeknpJ9jT0w).")

                file.write(f"### Expected content")
                file.write(f"- {os.path.basename(output.pgenset_all_markers)}(.pgen, .pvar, .psam): Phased and imputed genotypes in plink2 format. For details on the format please refer to the [plink documentation](https://www.cog-genomics.org/plink/2.0/formats#pgen).")
                file.write(f"- snp/{os.path.basename(output.best_snps)}: List of 500k autosomal SNPs with high imputation r2 and pruned for LD.")
                file.write(f"- snp/{os.path.basename(output.r2_table)}: Table of imputation r2.")
                file.write(f"- pca/{os.path.basename(output.pcs)}: PCs as computed by flashPCA using high quality pruned autosomal markers.")
                file.write(f"- pca/{os.path.basename(output.eigenvector)}: Eigen vectoes as computed by flashPCA using high quality pruned autosomal markers.")
                file.write(f"- pca/{os.path.basename(output.snp_loadings)}: SNP loadings as computed by flashPCA using high quality pruned autosomal markers.")
                file.write(f"- pca/{os.path.basename(output.eigenvalues)}: Eigen values as computed by flashPCA using high quality pruned autosomal markers.")
                file.write(f"- pca/{os.path.basename(output.variance_explained)}: Variance explained as computed by flashPCA using high quality pruned autosomal markers.")
                file.write(f"- pca/{os.path.basename(output.cluster_file)}: Sample clustering in the PCA with superpopulations from the 1000 genomes project.")
                file.write(f"- pca/{os.path.basename(output.ceu_id_file)}: Identifiers of samples of short distance in the PCA to the CEU cluster.")
                file.write(f"- kinship/{os.path.basename(output.king_relatedness)}: Kinship analysis as computed by king using high quality pruned autosomal markers.")
                file.write(f"- sex_check/{os.path.basename(output.sex_check)}: Sex check computed by plink on sex markers prior to imputation. Warning: the presence of variants on the sex chromosomes varies between genotyping batches.")
                file.write(f"- {os.path.basename(output.readme)}: Description of the folder content.")

                file.write(f"")
                file.write(f"We hope that this release will be useful to you. All our wishes of success in your research.")
                file.write(f"Made with love by the [Genetics and Bioinformatics department of the Norwegian Institute of Public Health](https://www.fhi.no/om/organisasjon/genetikk-og-bioinformatikk/).")

            # r2 table
            copyfile(input.r2_table, output.r2_table)

            # List of top SNPs
            copyfile(input.best_snps, output.best_snps)

            # PCA files
            copyfile(input.pcs, output.pcs)
            copyfile(input.eigenvector, output.eigenvector)
            copyfile(input.snp_loadings, output.snp_loadings)
            copyfile(input.eigenvalues, output.eigenvalues)
            copyfile(input.variance_explained, output.variance_explained)
            copyfile(input.cluster_file, output.cluster_file)
            copyfile(input.ceu_id_file, output.ceu_id_file)

            # Kinship files
            copyfile(input.king_relatedness, output.king_relatedness)

            # Sex check files
            copyfile(input.sex_check, output.sex_check)

            # Genotypes
            for extension in ['.pgen', '.pvar', '.psam']:
                copyfile(input.pgenset_all_markers + extension,output.pgenset_all_markers + extension)


        except Exception as e:
            print(f"An exception occurred in rule {rule}.")
            print(e)

