###
# Quality Control pipeline for Illumina Infinium Human methylation Beadchips; 450k and EPIC
# Adapted from bhklab - illuminaEPICmethylation
# by Christopher Eeles and Joanna Pryzbyl
# and
# earlier work by Haakon E. Nustad and Christian Magnus Page within the START project group
# 


# 0. Load parameters, settings etc

# Is replaced by command line argument such as --configfile input/met003.yaml
# configfile: 'config.yaml'

# Unpack config dictionary to local environment
# is this part necessary?
nthread = config['nthread']
analysis_name = config['analysis_name']
data_type = config['data_type']
detection_pvalue = config['detection_pvalue']
bisulphite_conversion_rate = config['bisulphite_conversion_rate']

plate_data_dir = config['plate_data_dir']


# 1. Build RGSet

rule build_rgset:
    input:
        script="scripts/1_buildRGSet.R",
        plates=plate_data_dir # we send the whole directory to minfi
    output:
        rgset=f'processed_data/1_{analysis_name}_RGset.rds'
    log:
        "logs/1_buildRGSet.Rout"
    shell:
        "Rscript --vanilla {input.script} {input.plates} {output.rgset} >& {log}"

# 2. Filter probes from RGSet
rule filter_probes_rgset:
    input:
        script="scripts/2_filterRGSet.R",
        rgset=rules.build_rgset.output.rgset,
        cross_hybridizing=f'input/cross_hybridizing_{data_type}.txt'
    params:
        filter_cross_hybridizing=config['filter_cross_hybridizing'],
        filter_polymorphic_CpGs=config['filter_polymorphic_CpGs'],
        detection_p=detection_pvalue,
        frac_poor_quality=config['frac_poor_quality']
    output:
        probes_removed=f'qc_results/2_{analysis_name}_probes_removed.csv',
        rgset_filtered_probes=f'processed_data/2_{analysis_name}_RGSet_filtered_probes.rds',
        SNPbetas=f'qc_results/2_{analysis_name}_SNP_Betas.rds'
    log:
        "logs/2_filterRGSet.Rout"
    shell:
        "Rscript --vanilla {input.script} {input.rgset} {input.cross_hybridizing} {params.filter_cross_hybridizing} {params.filter_polymorphic_CpGs} {params.detection_p} {params.frac_poor_quality} {output.probes_removed} {output.SNPbetas} {output.rgset_filtered_probes} >& {log}"


# 3. Add PCA plot as part of report

rule make_control_probe_PCA:
    input:
        script="scripts/3_makeControlProbePCA.R",
        rgset=rules.filter_probes_rgset.output.rgset_filtered_probes
    output:
        PCA_plot=f'plots/3_{analysis_name}_control_probe_PCA_plot.pdf', 
        control_probe_PCA=f'qc_results/3_{analysis_name}_control_probe_PCA.rds',
        NA_control_probe=f'qc_results/3_{analysis_name}_filtered_NA_control_probes.csv',
        boxplot=f'plots/3_{analysis_name}_boxplot_control_probes.pdf'
    log:
        "logs/3_makeControlProbePCA.Rout"
    shell:
        "Rscript --vanilla {input.script} {input.rgset} {output.PCA_plot} {output.control_probe_PCA} {output.NA_control_probe} {output.boxplot} >& {log}"


# 4. Filter out samples with less than 90% CpG probes detected 
qc_path1 = f'qc_results/4_{analysis_name}_RGSet'
qc_step1 = f'detectionP{detection_pvalue}'

rule filter_samples_rgset:
    input:
        script="scripts/4_dropSamples.R",
        rgset=rules.filter_probes_rgset.output.rgset_filtered_probes,
        NA_control_probes=rules.make_control_probe_PCA.output.NA_control_probe
    params:
        detection_pvalue=detection_pvalue,
        bisulphite_conversion_rate=bisulphite_conversion_rate
    output:
        detectionPvalues=f'{qc_path1}_detection_pvalues.csv',
        probeQC=f'{qc_path1}_num_probes_with_proportion_failed_samples_p{detection_pvalue}.csv',
        sampleQC=f'{qc_path1}_probes_failed_per_sample_p{detection_pvalue}.csv',
        bisulphiteQC=f'{qc_path1}_bisulphite_conversions.csv',
        rgset_filtered=f'processed_data/4_{analysis_name}_RGSet_filtered_probes_and_samples.rds',
        dropped_sample_sheet=f'{qc_path1}_dropped_samples.csv'
    log:
        "logs/4_dropSamples.Rout"
    shell:
        "Rscript --vanilla {input.script} {input.rgset} {input.NA_control_probes} {params.detection_pvalue} {params.bisulphite_conversion_rate} {output.detectionPvalues} {output.probeQC} {output.sampleQC} {output.bisulphiteQC} {output.rgset_filtered} {output.dropped_sample_sheet} >& {log}"

# ---- 5. Preprocess RGChannelSet to MethylSet

# Read in relevant configuration
preprocess_methods = config['preprocess_methods']

rule preprocess_to_methylset:
    input:
        script="scripts/5_preprocessToMethylSet.R",
        rgset=rules.filter_samples_rgset.output.rgset_filtered
    params:
        preprocess_methods=preprocess_methods
    output:
        methylsets=expand('processed_data/5_{analysis_name}_MethylSet_{preprocess_method}.rds',
            analysis_name=analysis_name, preprocess_method=preprocess_methods)
    log:
        "logs/5_preprocessToMethylSet.Rout"
    shell:
        "Rscript --vanilla {input.script} {input.rgset} {params.preprocess_methods} {output.methylsets} >& {log}"

# ---- 6. Visual the Raw RGSet vs Each Preprocessing Method with QC Metrics

preprocess_string = '_vs_'.join(preprocess_methods)
comparisons = f'rgSet_vs_{preprocess_string}'

rule plot_density_preprocessed_vs_rgset:
    input:
        script="scripts/6_plotDensityPreprocessedVsRGSet.R", 
        methylsets=rules.preprocess_to_methylset.output.methylsets,
        rgset=rules.filter_samples_rgset.output.rgset_filtered
    params:
        plot_titles=preprocess_methods
    output:
        plots=f'plots/6_{analysis_name}_{comparisons}_density_plots.pdf'
    log:
        "logs/6_plotDensityPreprocessedVsRGSet.Rout"
    shell:
        "Rscript --vanilla {input.script} {input.methylsets} {input.rgset} {params.plot_titles} {output.plots} >& {log}"

selected_preprocess_method = config['selected_preprocess_method']
selected_methylset_file_name = f'{analysis_name}_MethylSet_{selected_preprocess_method}'


# ---- 7. Filter out samples that failed manual QC
discarded_samples = config['discarded_samples']

rule filter_samples_failed_manual_qc:
    input:
        script="scripts/7_filterSamplesManualQC.R",
        methylset=f'processed_data/5_{selected_methylset_file_name}.rds',
        discarded_samples=discarded_samples,
        filtered_samples=rules.filter_samples_rgset.output.dropped_sample_sheet
    output:
        methylset=f'processed_data/7_{selected_methylset_file_name}_filtered_manual_qc.rds',
        removed_samples=f'qc_results/7_{analysis_name}_filtered_samples.csv'
    log:
        "logs/7_filterSamplesManualQC.Rout"
    shell:
        "Rscript --vanilla {input.script} {input.methylset} {input.discarded_samples} {input.filtered_samples} {output.methylset} {output.removed_samples} >& {log}"


# 8. Make QC plot for selected preprocessing method
rule make_qc_plot:
    input:
        script="scripts/8_makeQCPlot.R",
        methylset=rules.filter_samples_failed_manual_qc.output.methylset,
        filtered_samples=rules.filter_samples_failed_manual_qc.output.removed_samples
    output:
        qc_plot=f'plots/8_{selected_methylset_file_name}_qc_plot.pdf',
        filtered_methset=f'processed_data/8_{analysis_name}_filtered_methset.rds',
        filtered_sample_list=f'qc_results/8_{analysis_name}_filtered_samples.csv'
    log:
        "logs/8_makeQCPlot.Rout"
    shell:
        "Rscript --vanilla {input.script} {input.methylset} {input.filtered_samples} {output.qc_plot} {output.filtered_methset} {output.filtered_sample_list} >& {log}"


# 9. Estimate cell type proportions

rule estimate_cell_type_proportions:
    input:
        script="scripts/9_estimateCellTypeProportions.R",
        rgset=rules.filter_samples_rgset.output.rgset_filtered
    params:
        cell_type=config['cell_type'],
        selected_preprocess_method=selected_preprocess_method
    output:
        cellcounts=f'qc_results/9_{analysis_name}_estimated_cell_proportions.csv'
    log:
        "logs/9_estimateCellTypeProportions.Rout"
    shell:
        "Rscript --vanilla {input.script} {input.rgset} {params.cell_type} {params.selected_preprocess_method} {output.cellcounts} >& {log}"


# ---- 10. Convert GenomicMethylSet to GenomicRatioSet and add annotations

rule convert_gmset_to_grset:
    input:
        script="scripts/10_convertGMSetToGRSet.R",
        methylset=rules.make_qc_plot.output.filtered_methset
    output:
        ratioset=f'processed_data/10_{analysis_name}_{selected_preprocess_method}_GenomicRatioSet.rds'
    log:
        'logs/10_convertGMSetToGRSet.Rout'
    shell:
        "Rscript --vanilla {input.script} {input.methylset} {output.ratioset} >& {log}"


# ---- 11. Sex prediction and removement of discordant gender/predicted sex samples
rule filter_discordant_sex_samples:
    input:
        script="scripts/11_predictSex.R",
        ratioset=rules.convert_gmset_to_grset.output.ratioset
    output:
        filtered_ratioset=f'processed_data/11_{analysis_name}_{selected_preprocess_method}_GenomicRatioSet_filter_sex_disc.rds',
        added_pheno=f'qc_results/11_{analysis_name}_added_sex_prediction_to_pheno.csv'
    log:
        "logs/11_predictSex.Rout"
    shell:
        "Rscript --vanilla {input.script} {input.ratioset} {output.filtered_ratioset} {output.added_pheno} >& {log}"        


# ---- 12. Separate sex chromosomes

rule separate_sex_chromosomes:
    input:
        script="scripts/12_separateSexChromosomesInGRSet.R",
        ratioset=rules.filter_discordant_sex_samples.output.filtered_ratioset
    output:
        ratioset_no_sex_chr=f'processed_data/12_{analysis_name}_{selected_preprocess_method}_GenomicRatioSet_filter_probes_without_sex_chr.rds',
        beta_matrix_sex_chr=f'processed_data/12_{analysis_name}_{selected_preprocess_method}_beta_matrix_sex_chr.rds'
    log:
        'logs/12_separateSexChromosomesInGRSet.Rout'
    shell:
        "Rscript --vanilla {input.script} {input.ratioset} {output.ratioset_no_sex_chr} {output.beta_matrix_sex_chr} >& {log}"

# ---- 13. Do BMIQ on beta values from GenomicRatioSet

selected_data_type = config['data_type']

rule bmiq_on_grset:
    input:
        script="scripts/13_bmiqGRSet.R",
        ratioset_no_sex_chr=rules.separate_sex_chromosomes.output.ratioset_no_sex_chr
    output:
        bmiqed_data=f'processed_data/13_{analysis_name}_{selected_data_type}_bmiqed_beta_values.rds',
        raw_data=f'processed_data/13_{analysis_name}_{selected_data_type}_beta_values.rds'
    log:
        'logs/13_bmiqGRSet.Rout'
    shell:
        "Rscript --vanilla {input.script} {input.ratioset_no_sex_chr} {output.bmiqed_data} {output.raw_data} >& {log}"


# ---- 14. Plot density after BMIQ
rule plot_density_after_bmiq:
    input:
        script="scripts/14_plotDensityAfterBMIQ.R",
        methylsets=rules.preprocess_to_methylset.output.methylsets,
        rgset=rules.filter_samples_rgset.output.rgset_filtered,
        bmiqed_data=rules.bmiq_on_grset.output.bmiqed_data
    params:
        plot_titles=preprocess_methods
    output:
        plots=f'plots/14_{analysis_name}_BMIQ_density_plots.pdf'
    log:
        "logs/14_plotDensityAfterBMIQ.Rout"
    shell:
        "Rscript --vanilla {input.script} {input.methylsets} {input.rgset} {input.bmiqed_data} {params.plot_titles} {output.plots} >& {log}"

# ---- 15. Plot histogram of differences
rule plot_histogram_of_differences:
    input:
        script="scripts/15_histogram_of_differences.R",
        rgset=rules.filter_samples_rgset.output.rgset_filtered,
        methset=rules.preprocess_to_methylset.output.methylsets,
        bmiqed=rules.bmiq_on_grset.output.bmiqed_data
    output:
        plot=f'plots/15_{analysis_name}_histogram_of_differences.pdf'
    log:
        "logs/15_histogram_of_differences.Rout"
    shell:
        "Rscript --vanilla {input.script} {input.rgset} {input.methset} {input.bmiqed} {output.plot} >& {log}"

rule first_part:
    input:
        f'plots/3_{analysis_name}_control_probe_PCA_plot.pdf',
        f'qc_results/3_{analysis_name}_control_probe_PCA.rds',
        f'plots/3_{analysis_name}_boxplot_control_probes.pdf'

rule second_part:
    input:
        f'plots/6_{analysis_name}_{comparisons}_density_plots.pdf'

rule third_part:
    input:
        f'plots/8_{selected_methylset_file_name}_qc_plot.pdf',
        f'qc_results/9_{analysis_name}_estimated_cell_proportions.csv',
        f'plots/14_{analysis_name}_BMIQ_density_plots.pdf',
        f'plots/15_{analysis_name}_histogram_of_differences.pdf'

