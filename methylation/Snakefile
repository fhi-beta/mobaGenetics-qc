###
# Quality Control pipeline for Illumina Infinium Human methylation Beadchips; 450k and EPIC
# Adapted from bhklab - illuminaEPICmethylation
# by Christopher Eeles and Joanna Pryzbyl
# and
# earlier work by Haakon E. Nustad and Christian Magnus Page within the START project group
# 


# 0. Load parameters, settings etc

configfile: 'config.yaml'

# Unpack config dictionary to local environment
# is this part necessary?
nthread = config['nthread']
analysis_name = config['analysis_name']
data_type = config['data_type']
detection_pvalue = config['detection_pvalue']
bisulphite_conversion_rate = config['bisulphite_conversion_rate']

plate_data_dir = config['plate_data_dir']


# 1. Build RGSet

rule build_rgset:
    input:
        script="scripts/1_buildRGSet.R",
        plates=plate_data_dir # we send the whole directory to minfi
    params:
        renv=config['renv']
    output:
        rgset=f'processed_data/{analysis_name}_1_RGset.rds'
    log:
        "logs/1_buildRGSet.Rout"
    shell:
        "Rscript --vanilla {input.script} {params.renv} {input.plates} {output.rgset} >& {log}"

# 2. Filter probes from RGSet
rule filter_probes_rgset:
    input:
        script="scripts/2_filterRGSet.R",
        rgset=rules.build_rgset.output.rgset,
        cross_hybridizing=f'input/cross_hybridizing_{data_type}.txt'
    params:
        filter_cross_hybridizing=config['filter_cross_hybridizing'],
        filter_polymorphic_CpGs=config['filter_polymorphic_CpGs'],
        detection_p=detection_pvalue,
        frac_poor_quality=config['frac_poor_quality'],
        renv=config['renv']
    output:
        probes_removed=f'qc_results/{analysis_name}_2_probes_removed.csv',
        rgset_filtered_probes=f'processed_data/{analysis_name}_2_RGSet_filtered_probes.rds',
        SNPbetas=f'qc_results/{analysis_name}_2_SNP_Betas.rds'
    log:
        "logs/2_filterRGSet.Rout"
    shell:
        "Rscript --vanilla {input.script} {params.renv} {input.rgset} {input.cross_hybridizing} {params.filter_cross_hybridizing} {params.filter_polymorphic_CpGs} {params.detection_p} {params.frac_poor_quality} {output.probes_removed} {output.SNPbetas} {output.rgset_filtered_probes} >& {log}"


# 3. Add PCA plot as part of report

rule make_control_probe_PCA:
    input:
        script="scripts/3_makeControlProbePCA.R",
        rgset=rules.filter_probes_rgset.output.rgset_filtered_probes
    params:
        renv=config['renv']
    output:
        PCA_plot=f'plots/{analysis_name}_3_control_probe_PCA_plot.pdf', 
        control_probe_PCA=f'qc_results/{analysis_name}_3_control_probe_PCA.rds',
        NA_control_probe=f'qc_results/{analysis_name}_3_filtered_NA_control_probes.csv',
        boxplot=f'plots/{analysis_name}_3_boxplot_control_probes.pdf'
    log:
        "logs/3_makeControlProbePCA.Rout"
    shell:
        "Rscript --vanilla {input.script} {params.renv} {input.rgset} {output.PCA_plot} {output.control_probe_PCA} {output.NA_control_probe} {output.boxplot} >& {log}"


# 4. Filter out samples with less than 90% CpG probes detected 
qc_path1 = f'qc_results/{analysis_name}_4'
qc_step1 = f'detectionP{detection_pvalue}'

rule filter_samples_rgset:
    input:
        script="scripts/4_dropSamples.R",
        rgset=rules.filter_probes_rgset.output.rgset_filtered_probes,
        NA_control_probes=rules.make_control_probe_PCA.output.NA_control_probe
    params:
        detection_pvalue=detection_pvalue,
        bisulphite_conversion_rate=bisulphite_conversion_rate,
        renv=config['renv']
    output:
        detectionPvalues=f'{qc_path1}_detection_pvalues.csv',
        probeQC=f'{qc_path1}_num_probes_with_proportion_failed_samples_p{detection_pvalue}.csv',
        sampleQC=f'{qc_path1}_probes_failed_per_sample_p{detection_pvalue}.csv',
        bisulphiteQC=f'{qc_path1}_bisulphite_conversions.csv',
        rgset_filtered=f'processed_data/{analysis_name}_4_RGSet_filtered_probes_and_samples.rds',
        dropped_sample_sheet=f'{qc_path1}_dropped_samples.csv'
    log:
        "logs/4_dropSamples.Rout"
    shell:
        "Rscript --vanilla {input.script} {params.renv} {input.rgset} {input.NA_control_probes} {params.detection_pvalue} {params.bisulphite_conversion_rate} {output.detectionPvalues} {output.probeQC} {output.sampleQC} {output.bisulphiteQC} {output.rgset_filtered} {output.dropped_sample_sheet} >& {log}"

# ---- 5. Preprocess RGChannelSet to MethylSet

# Read in relevant configuration
preprocess_methods = config['preprocess_methods']

rule preprocess_to_methylset:
    input:
        script="scripts/5_preprocessToMethylSet.R",
        rgset=rules.filter_samples_rgset.output.rgset_filtered
    params:
        preprocess_methods=preprocess_methods,
        renv=config['renv']
    output:
        methylsets=expand('processed_data/{analysis_name}_5_MethylSet_{preprocess_method}.rds',
            analysis_name=analysis_name, preprocess_method=preprocess_methods)
    log:
        "logs/5_preprocessToMethylSet.Rout"
    shell:
        "Rscript --vanilla {input.script} {params.renv} {input.rgset} {params.preprocess_methods} {output.methylsets} >& {log}"

# ---- 6. Visual the Raw RGSet vs Each Preprocessing Method with QC Metrics

preprocess_string = '_vs_'.join(preprocess_methods)
comparisons = f'rgSet_vs_{preprocess_string}'

rule plot_density_preprocessed_vs_rgset:
    input:
        script="scripts/6_plotDensityPreprocessedVsRGSet.R", 
        methylsets=rules.preprocess_to_methylset.output.methylsets,
        rgset=rules.filter_samples_rgset.output.rgset_filtered
    params:
        plot_titles=preprocess_methods,
        renv=config['renv']
    output:
        plots=f'plots/{analysis_name}_6_{comparisons}_density_plots.pdf'
    log:
        "logs/6_plotDensityPreprocessedVsRGSet.Rout"
    shell:
        "Rscript --vanilla {input.script} {params.renv} {input.methylsets} {input.rgset} {params.plot_titles} {output.plots} >& {log}"

selected_preprocess_method = config['selected_preprocess_method']
selected_methylset_file_name = f'{analysis_name}_5_MethylSet_{selected_preprocess_method}'
selected_methylset = f'{analysis_name}_7_MethylSet_{selected_preprocess_method}'

# ---- 7. Filter out samples that failed manual QC
discarded_samples = config['discarded_samples']

rule filter_samples_failed_manual_qc:
    input:
        script="scripts/7_filterSamplesManualQC.R",
        methylset=f'processed_data/{selected_methylset_file_name}.rds',
        discarded_samples=discarded_samples,
        filtered_samples=rules.filter_samples_rgset.output.dropped_sample_sheet
    params:
        renv=config['renv']
    output:
        methylset=f'processed_data/{selected_methylset}_filtered_manual_qc.rds',
        removed_samples=f'qc_results/{analysis_name}_7_filtered_samples.csv'
    log:
        "logs/7_filterSamplesManualQC.Rout"
    shell:
        "Rscript --vanilla {input.script} {params.renv} {input.methylset} {input.discarded_samples} {input.filtered_samples} {output.methylset} {output.removed_samples} >& {log}"


# 8. Make QC plot for selected preprocessing method
rule make_qc_plot:
    input:
        script="scripts/8_makeQCPlot.R",
        methylset=rules.filter_samples_failed_manual_qc.output.methylset,
        filtered_samples=rules.filter_samples_failed_manual_qc.output.removed_samples
    params:
        renv=config['renv']
    output:
        qc_plot=f'plots/{analysis_name}_8_qc_plot.pdf',
        filtered_methset=f'processed_data/{analysis_name}_8_filtered_methset.rds',
        filtered_sample_list=f'qc_results/{analysis_name}_8_filtered_samples.csv'
    log:
        "logs/8_makeQCPlot.Rout"
    shell:
        "Rscript --vanilla {input.script} {params.renv} {input.methylset} {input.filtered_samples} {output.qc_plot} {output.filtered_methset} {output.filtered_sample_list} >& {log}"


# 9. Estimate cell type proportions

rule estimate_cell_type_proportions:
    input:
        script="scripts/9_estimateCellTypeProportions.R",
        rgset=rules.filter_samples_rgset.output.rgset_filtered
    params:
        cell_type=config['cell_type'],
        selected_preprocess_method=selected_preprocess_method,
        renv=config['renv']
    output:
        cellcounts=f'qc_results/{analysis_name}_9_estimated_cell_proportions.csv'
    log:
        "logs/9_estimateCellTypeProportions.Rout"
    shell:
        "Rscript --vanilla {input.script} {params.renv} {input.rgset} {params.cell_type} {params.selected_preprocess_method} {output.cellcounts} >& {log}"


# ---- 10. Convert GenomicMethylSet to GenomicRatioSet and add annotations

rule convert_gmset_to_grset:
    input:
        script="scripts/10_convertGMSetToGRSet.R",
        methylset=rules.make_qc_plot.output.filtered_methset
    params:
        renv=config['renv']
    output:
        ratioset=f'processed_data/{analysis_name}_10_{selected_preprocess_method}_GenomicRatioSet.rds'
    log:
        'logs/10_convertGMSetToGRSet.Rout'
    shell:
        "Rscript --vanilla {input.script} {params.renv} {input.methylset} {output.ratioset} >& {log}"


# ---- 11. Sex prediction and removement of discordant gender/predicted sex samples
rule filter_discordant_sex_samples:
    input:
        script="scripts/11_predictSex.R",
        ratioset=rules.convert_gmset_to_grset.output.ratioset
    params:
        renv=config['renv']
    output:
        filtered_ratioset=f'processed_data/{analysis_name}_11_{selected_preprocess_method}_GenomicRatioSet_filter_sex_disc.rds',
        added_pheno=f'qc_results/{analysis_name}_11_added_sex_prediction_to_pheno.csv'
    log:
        "logs/11_predictSex.Rout"
    shell:
        "Rscript --vanilla {input.script} {params.renv} {input.ratioset} {output.filtered_ratioset} {output.added_pheno} >& {log}"        


# ---- 12. Separate sex chromosomes

rule separate_sex_chromosomes:
    input:
        script="scripts/12_separateSexChromosomesInGRSet.R",
        ratioset=rules.filter_discordant_sex_samples.output.filtered_ratioset
    params:
        renv=config['renv']
    output:
        ratioset_no_sex_chr=f'processed_data/{analysis_name}_12_{selected_preprocess_method}_GenomicRatioSet_filter_probes_without_sex_chr.rds',
        beta_matrix_sex_chr=f'processed_data/{analysis_name}_12_{selected_preprocess_method}_beta_matrix_sex_chr.csv',
        beta_matrix_sex_chr_rds=f'processed_data/{analysis_name}_12_{selected_preprocess_method}_beta_matrix_sex_chr.rds'
    log:
        'logs/12_separateSexChromosomesInGRSet.Rout'
    shell:
        "Rscript --vanilla {input.script} {params.renv} {input.ratioset} {output.ratioset_no_sex_chr} {output.beta_matrix_sex_chr} {output.beta_matrix_sex_chr_rds} >& {log}"

# ---- 13. Do BMIQ on beta values from GenomicRatioSet

selected_data_type = config['data_type']

rule bmiq_on_grset:
    input:
        script="scripts/13_bmiqGRSet.R",
        ratioset_no_sex_chr=rules.separate_sex_chromosomes.output.ratioset_no_sex_chr
    params:
        renv=config['renv']
    output:
        bmiqed_data=f'processed_data/{analysis_name}_13_bmiqed_beta_values.csv',
        bmiqed_data_rds=f'processed_data/{analysis_name}_13_bmiqed_beta_values.rds',
        raw_data=f'processed_data/{analysis_name}_13_beta_values.csv',
        raw_data_rds=f'processed_data/{analysis_name}_13_beta_values.rds'
    log:
        'logs/13_bmiqGRSet.Rout'
    shell:
        "Rscript --vanilla {input.script} {params.renv} {input.ratioset_no_sex_chr} {output.bmiqed_data} {output.bmiqed_data_rds} {output.raw_data} {output.raw_data_rds} >& {log}"


# ---- 14. Plot density after BMIQ
rule plot_density_after_bmiq:
    input:
        script="scripts/14_plotDensityAfterBMIQ.R",
        methylsets=rules.preprocess_to_methylset.output.methylsets,
        rgset=rules.filter_samples_rgset.output.rgset_filtered,
        bmiqed_data=rules.bmiq_on_grset.output.bmiqed_data_rds
    params:
        plot_titles=preprocess_methods,
        renv=config['renv']
    output:
        plots=f'plots/{analysis_name}_14_BMIQ_density_plots.pdf'
    log:
        "logs/14_plotDensityAfterBMIQ.Rout"
    shell:
        "Rscript --vanilla {input.script} {params.renv} {input.methylsets} {input.rgset} {input.bmiqed_data} {params.plot_titles} {output.plots} >& {log}"

# ---- 15. Plot histogram of differences
rule plot_histogram_of_differences:
    input:
        script="scripts/15_histogram_of_differences.R",
        rgset=rules.filter_samples_rgset.output.rgset_filtered,
        methset=rules.preprocess_to_methylset.output.methylsets,
        bmiqed=rules.bmiq_on_grset.output.bmiqed_data_rds
    params:
        renv=config['renv']
    output:
        plot=f'plots/{analysis_name}_15_histogram_of_differences.pdf'
    log:
        "logs/15_histogram_of_differences.Rout"
    shell:
        "Rscript --vanilla {input.script} {params.renv} {input.rgset} {input.methset} {input.bmiqed} {output.plot} >& {log}"

# ---- 16. Clean up - remove intermediate data
rule clean_up:
    input:
        script="scripts/16_clean_up.sh"
    log:
        "logs/16_clean_up.log"
    shell:
        "bash {input.script} >& {log}"


rule first_part:
    input:
        f'plots/{analysis_name}_3_control_probe_PCA_plot.pdf',
        f'qc_results/{analysis_name}_3_control_probe_PCA.rds',
        f'plots/{analysis_name}_3_boxplot_control_probes.pdf'

rule second_part:
    input:
        f'plots/{analysis_name}_6_{comparisons}_density_plots.pdf'

rule third_part:
    input:
        f'plots/{analysis_name}_8_qc_plot.pdf',
        f'qc_results/{analysis_name}_9_estimated_cell_proportions.csv',
        f'plots/{analysis_name}_14_BMIQ_density_plots.pdf',
        f'plots/{analysis_name}_15_histogram_of_differences.pdf'

